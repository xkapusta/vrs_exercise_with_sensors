
vrs_exercise_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e9c  08002e9c  000040b8  2**0
                  CONTENTS
  4 .ARM          00000008  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ea4  08002ea4  000040b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea4  08002ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ea8  08002ea8  00003ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08002eac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040b8  2**0
                  CONTENTS
 10 .bss          000001ec  200000b8  200000b8  000040b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  000040b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f54  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001917  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0000b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000558  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167f2  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a67  00000000  00000000  00022e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00074cbd  00000000  00000000  0002a879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009f536  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000225c  00000000  00000000  0009f57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000a17d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002de4 	.word	0x08002de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08002de4 	.word	0x08002de4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__NVIC_GetPriorityGrouping+0x18>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	f003 0307 	and.w	r3, r3, #7
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	@ (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	@ (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	@ (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	@ 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	@ 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4907      	ldr	r1, [pc, #28]	@ (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000398:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ffe3 	bl	8000384 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003be:	f7ff ff57 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffa7 	bl	800031c <NVIC_EncodePriority>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4619      	mov	r1, r3
 80003d2:	2010      	movs	r0, #16
 80003d4:	f7ff ff78 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003d8:	2010      	movs	r0, #16
 80003da:	f7ff ff57 	bl	800028c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003de:	f7ff ff47 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff97 	bl	800031c <NVIC_EncodePriority>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4619      	mov	r1, r3
 80003f2:	2011      	movs	r0, #17
 80003f4:	f7ff ff68 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003f8:	2011      	movs	r0, #17
 80003fa:	f7ff ff47 	bl	800028c <__NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <LL_AHB1_GRP1_EnableClock>:
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	4907      	ldr	r1, [pc, #28]	@ (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000418:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4013      	ands	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000438:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800043c:	f7ff ffe2 	bl	8000404 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000440:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000444:	f7ff ffde 	bl	8000404 <LL_AHB1_GRP1_EnableClock>

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <__NVIC_GetPriorityGrouping>:
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000450:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <__NVIC_GetPriorityGrouping+0x18>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	f003 0307 	and.w	r3, r3, #7
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_EnableIRQ>:
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4907      	ldr	r1, [pc, #28]	@ (80004a0 <__NVIC_EnableIRQ+0x38>)
 8000482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <__NVIC_SetPriority>:
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	db0a      	blt.n	80004ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	490c      	ldr	r1, [pc, #48]	@ (80004f0 <__NVIC_SetPriority+0x4c>)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	0112      	lsls	r2, r2, #4
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80004cc:	e00a      	b.n	80004e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4908      	ldr	r1, [pc, #32]	@ (80004f4 <__NVIC_SetPriority+0x50>)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f003 030f 	and.w	r3, r3, #15
 80004da:	3b04      	subs	r3, #4
 80004dc:	0112      	lsls	r2, r2, #4
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	440b      	add	r3, r1
 80004e2:	761a      	strb	r2, [r3, #24]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e100 	.word	0xe000e100
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <NVIC_EncodePriority>:
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	@ 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	f1c3 0307 	rsb	r3, r3, #7
 8000512:	2b04      	cmp	r3, #4
 8000514:	bf28      	it	cs
 8000516:	2304      	movcs	r3, #4
 8000518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3304      	adds	r3, #4
 800051e:	2b06      	cmp	r3, #6
 8000520:	d902      	bls.n	8000528 <NVIC_EncodePriority+0x30>
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3b03      	subs	r3, #3
 8000526:	e000      	b.n	800052a <NVIC_EncodePriority+0x32>
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	401a      	ands	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000540:	f04f 31ff 	mov.w	r1, #4294967295
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43d9      	mvns	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	4313      	orrs	r3, r2
}
 8000552:	4618      	mov	r0, r3
 8000554:	3724      	adds	r7, #36	@ 0x24
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 0201 	orr.w	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80005be:	b480      	push	{r7}
 80005c0:	b085      	sub	sp, #20
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80005d2:	f023 0306 	bic.w	r3, r3, #6
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	431a      	orrs	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	60da      	str	r2, [r3, #12]
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60da      	str	r2, [r3, #12]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b02      	cmp	r3, #2
 8000620:	d101      	bne.n	8000626 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	2b04      	cmp	r3, #4
 8000646:	d101      	bne.n	800064c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000648:	2301      	movs	r3, #1
 800064a:	e000      	b.n	800064e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	2b20      	cmp	r3, #32
 800066c:	d101      	bne.n	8000672 <LL_I2C_IsActiveFlag_STOP+0x18>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000690:	2b40      	cmp	r3, #64	@ 0x40
 8000692:	d101      	bne.n	8000698 <LL_I2C_IsActiveFlag_TC+0x18>
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <LL_I2C_IsActiveFlag_TC+0x1a>
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f043 0220 	orr.w	r2, r3, #32
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	61da      	str	r2, [r3, #28]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	605a      	str	r2, [r3, #4]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000708:	b480      	push	{r7}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000722:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	041b      	lsls	r3, r3, #16
 8000728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800072c:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	4313      	orrs	r3, r2
 8000736:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	0d5b      	lsrs	r3, r3, #21
 8000744:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <LL_I2C_HandleTransfer+0x5c>)
 800074a:	430b      	orrs	r3, r1
 800074c:	43db      	mvns	r3, r3
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	431a      	orrs	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8000758:	bf00      	nop
 800075a:	371c      	adds	r7, #28
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	03ff7bff 	.word	0x03ff7bff

08000768 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800078e:	78fa      	ldrb	r2, [r7, #3]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_AHB1_GRP1_EnableClock>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	4907      	ldr	r1, [pc, #28]	@ (80007cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	4907      	ldr	r1, [pc, #28]	@ (80007fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80007e6:	69da      	ldr	r2, [r3, #28]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_I2C1_Init>:
uint8_t data_recive_multy[3];
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800082a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800082e:	f7ff ffb7 	bl	80007a0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000832:	23c0      	movs	r3, #192	@ 0xc0
 8000834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000836:	2302      	movs	r3, #2
 8000838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800083e:	2301      	movs	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000846:	2304      	movs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <MX_I2C1_Init+0xd4>)
 8000850:	f001 f962 	bl	8001b18 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000854:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000858:	f7ff ffba 	bl	80007d0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800085c:	f7ff fdf6 	bl	800044c <__NVIC_GetPriorityGrouping>
 8000860:	4603      	mov	r3, r0
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe46 	bl	80004f8 <NVIC_EncodePriority>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	201f      	movs	r0, #31
 8000872:	f7ff fe17 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000876:	201f      	movs	r0, #31
 8000878:	f7ff fdf6 	bl	8000468 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800087c:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 800087e:	f7ff ff22 	bl	80006c6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000882:	4815      	ldr	r0, [pc, #84]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 8000884:	f7ff feb3 	bl	80005ee <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 800088a:	f7ff fe88 	bl	800059e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800088e:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 8000890:	f7ff fe75 	bl	800057e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_I2C1_Init+0xdc>)
 800089a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 80008b8:	f001 fa41 	bl	8001d3e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 80008c2:	f7ff fe7c 	bl	80005be <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_I2C1_Init+0xd8>)
 80008c8:	f7ff fe49 	bl	800055e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3738      	adds	r7, #56	@ 0x38
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	48000400 	.word	0x48000400
 80008d8:	40005400 	.word	0x40005400
 80008dc:	2000090e 	.word	0x2000090e

080008e0 <i2c_read>:

uint32_t i2c_read(uint8_t slave_address, uint8_t register_address, uint8_t number_of_registers){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	460b      	mov	r3, r1
 80008ec:	71bb      	strb	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	data_recive=0;
 80008f2:	4b63      	ldr	r3, [pc, #396]	@ (8000a80 <i2c_read+0x1a0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]

	if(number_of_registers == 2){
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d106      	bne.n	800090c <i2c_read+0x2c>
		data_recive_16=0;
 80008fe:	4b61      	ldr	r3, [pc, #388]	@ (8000a84 <i2c_read+0x1a4>)
 8000900:	2200      	movs	r2, #0
 8000902:	801a      	strh	r2, [r3, #0]
		register_address |= 0x80;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800090a:	71bb      	strb	r3, [r7, #6]
	}
	if(number_of_registers == 3){
 800090c:	797b      	ldrb	r3, [r7, #5]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d106      	bne.n	8000920 <i2c_read+0x40>
		data_recive_32=0;
 8000912:	4b5d      	ldr	r3, [pc, #372]	@ (8000a88 <i2c_read+0x1a8>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
		register_address |= 0x80;
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800091e:	71bb      	strb	r3, [r7, #6]
	}


	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8000920:	79f9      	ldrb	r1, [r7, #7]
 8000922:	4b5a      	ldr	r3, [pc, #360]	@ (8000a8c <i2c_read+0x1ac>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2300      	movs	r3, #0
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	2200      	movs	r2, #0
 800092e:	4858      	ldr	r0, [pc, #352]	@ (8000a90 <i2c_read+0x1b0>)
 8000930:	f7ff feea 	bl	8000708 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 8000934:	bf00      	nop
 8000936:	4856      	ldr	r0, [pc, #344]	@ (8000a90 <i2c_read+0x1b0>)
 8000938:	f7ff fe69 	bl	800060e <LL_I2C_IsActiveFlag_TXIS>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f9      	beq.n	8000936 <i2c_read+0x56>


	LL_I2C_TransmitData8(I2C1, register_address);
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	4619      	mov	r1, r3
 8000946:	4852      	ldr	r0, [pc, #328]	@ (8000a90 <i2c_read+0x1b0>)
 8000948:	f7ff ff1b 	bl	8000782 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)) {}
 800094c:	bf00      	nop
 800094e:	4850      	ldr	r0, [pc, #320]	@ (8000a90 <i2c_read+0x1b0>)
 8000950:	f7ff fe96 	bl	8000680 <LL_I2C_IsActiveFlag_TC>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f9      	beq.n	800094e <i2c_read+0x6e>


	if(number_of_registers <= 1){
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d80a      	bhi.n	8000976 <i2c_read+0x96>
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000960:	79f9      	ldrb	r1, [r7, #7]
 8000962:	4b4c      	ldr	r3, [pc, #304]	@ (8000a94 <i2c_read+0x1b4>)
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	2200      	movs	r2, #0
 8000970:	4847      	ldr	r0, [pc, #284]	@ (8000a90 <i2c_read+0x1b0>)
 8000972:	f7ff fec9 	bl	8000708 <LL_I2C_HandleTransfer>
	}
	if(number_of_registers > 1){
 8000976:	797b      	ldrb	r3, [r7, #5]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d909      	bls.n	8000990 <i2c_read+0xb0>
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, number_of_registers, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_READ);
 800097c:	79f9      	ldrb	r1, [r7, #7]
 800097e:	797b      	ldrb	r3, [r7, #5]
 8000980:	4a44      	ldr	r2, [pc, #272]	@ (8000a94 <i2c_read+0x1b4>)
 8000982:	9201      	str	r2, [sp, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	2200      	movs	r2, #0
 800098a:	4841      	ldr	r0, [pc, #260]	@ (8000a90 <i2c_read+0x1b0>)
 800098c:	f7ff febc 	bl	8000708 <LL_I2C_HandleTransfer>
	}
	while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {}
 8000990:	bf00      	nop
 8000992:	483f      	ldr	r0, [pc, #252]	@ (8000a90 <i2c_read+0x1b0>)
 8000994:	f7ff fe4e 	bl	8000634 <LL_I2C_IsActiveFlag_RXNE>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f9      	beq.n	8000992 <i2c_read+0xb2>


	if(number_of_registers > 1){
 800099e:	797b      	ldrb	r3, [r7, #5]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d923      	bls.n	80009ec <i2c_read+0x10c>
		for(int i=0; i<number_of_registers;i++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e01b      	b.n	80009e2 <i2c_read+0x102>
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
				if (LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80009aa:	4839      	ldr	r0, [pc, #228]	@ (8000a90 <i2c_read+0x1b0>)
 80009ac:	f7ff fe55 	bl	800065a <LL_I2C_IsActiveFlag_STOP>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <i2c_read+0xdc>
					LL_I2C_ClearFlag_STOP(I2C1);
 80009b6:	4836      	ldr	r0, [pc, #216]	@ (8000a90 <i2c_read+0x1b0>)
 80009b8:	f7ff fe75 	bl	80006a6 <LL_I2C_ClearFlag_STOP>
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 80009bc:	4834      	ldr	r0, [pc, #208]	@ (8000a90 <i2c_read+0x1b0>)
 80009be:	f7ff fe39 	bl	8000634 <LL_I2C_IsActiveFlag_RXNE>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f0      	beq.n	80009aa <i2c_read+0xca>
				}
			}
			data_recive_multy[i] = LL_I2C_ReceiveData8(I2C1);
 80009c8:	4831      	ldr	r0, [pc, #196]	@ (8000a90 <i2c_read+0x1b0>)
 80009ca:	f7ff fecd 	bl	8000768 <LL_I2C_ReceiveData8>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4a31      	ldr	r2, [pc, #196]	@ (8000a98 <i2c_read+0x1b8>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	460a      	mov	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<number_of_registers;i++){
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	797b      	ldrb	r3, [r7, #5]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbe8      	blt.n	80009bc <i2c_read+0xdc>
 80009ea:	e00d      	b.n	8000a08 <i2c_read+0x128>
			//while (!LL_I2C_IsActiveFlag_(I2C1)) {}
		}
	}else{
		data_recive = LL_I2C_ReceiveData8(I2C1);
 80009ec:	4828      	ldr	r0, [pc, #160]	@ (8000a90 <i2c_read+0x1b0>)
 80009ee:	f7ff febb 	bl	8000768 <LL_I2C_ReceiveData8>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <i2c_read+0x1a0>)
 80009f8:	701a      	strb	r2, [r3, #0]
		while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {}
 80009fa:	bf00      	nop
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <i2c_read+0x1b0>)
 80009fe:	f7ff fe2c 	bl	800065a <LL_I2C_IsActiveFlag_STOP>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f9      	beq.n	80009fc <i2c_read+0x11c>
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000a08:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <i2c_read+0x1b0>)
 8000a0a:	f7ff fe4c 	bl	80006a6 <LL_I2C_ClearFlag_STOP>


	if(number_of_registers == 1){
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <i2c_read+0x142>
		data_recive_8 = data_recive;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <i2c_read+0x1a0>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <i2c_read+0x1bc>)
 8000a1a:	701a      	strb	r2, [r3, #0]
		return data_recive_8;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <i2c_read+0x1bc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	e02a      	b.n	8000a78 <i2c_read+0x198>
	}
	if(number_of_registers == 2){
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d10e      	bne.n	8000a46 <i2c_read+0x166>
		data_recive_16 = (data_recive_multy[1] << 8) | data_recive_multy[0];
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <i2c_read+0x1b8>)
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <i2c_read+0x1b8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <i2c_read+0x1a4>)
 8000a3e:	801a      	strh	r2, [r3, #0]
		return data_recive_16;
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <i2c_read+0x1a4>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	e018      	b.n	8000a78 <i2c_read+0x198>
	}
	if(number_of_registers == 3){
 8000a46:	797b      	ldrb	r3, [r7, #5]
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d10f      	bne.n	8000a6c <i2c_read+0x18c>
		data_recive_32 = (data_recive_multy[2] << 16) | (data_recive_multy[1] << 8) | data_recive_multy[0];
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <i2c_read+0x1b8>)
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	041a      	lsls	r2, r3, #16
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <i2c_read+0x1b8>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <i2c_read+0x1b8>)
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <i2c_read+0x1a8>)
 8000a64:	601a      	str	r2, [r3, #0]
		return data_recive_32;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <i2c_read+0x1a8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	e005      	b.n	8000a78 <i2c_read+0x198>
	}
	if(number_of_registers == 0){
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <i2c_read+0x198>
		return data_recive;
 8000a72:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <i2c_read+0x1a0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	e7ff      	b.n	8000a78 <i2c_read+0x198>
	}
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000d4 	.word	0x200000d4
 8000a84:	200000d6 	.word	0x200000d6
 8000a88:	200000d8 	.word	0x200000d8
 8000a8c:	80002000 	.word	0x80002000
 8000a90:	40005400 	.word	0x40005400
 8000a94:	80002400 	.word	0x80002400
 8000a98:	200000dc 	.word	0x200000dc
 8000a9c:	200000d5 	.word	0x200000d5

08000aa0 <i2c_write>:

uint8_t i2c_write(uint8_t slave_address, uint8_t register_address, uint8_t data, uint8_t number_of_registers){
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4623      	mov	r3, r4
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	717b      	strb	r3, [r7, #5]
 8000aba:	4613      	mov	r3, r2
 8000abc:	713b      	strb	r3, [r7, #4]

	if(number_of_registers == 2){
 8000abe:	793b      	ldrb	r3, [r7, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d103      	bne.n	8000acc <i2c_write+0x2c>
		register_address |= 0x80;
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aca:	71bb      	strb	r3, [r7, #6]
	}
	if(number_of_registers == 3){
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d103      	bne.n	8000ada <i2c_write+0x3a>
		register_address |= 0x80;
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ad8:	71bb      	strb	r3, [r7, #6]
	}


	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8000ada:	79f9      	ldrb	r1, [r7, #7]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <i2c_write+0xb0>)
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <i2c_write+0xb4>)
 8000aea:	f7ff fe0d 	bl	8000708 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 8000aee:	bf00      	nop
 8000af0:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <i2c_write+0xb4>)
 8000af2:	f7ff fd8c 	bl	800060e <LL_I2C_IsActiveFlag_TXIS>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f9      	beq.n	8000af0 <i2c_write+0x50>

	LL_I2C_TransmitData8(I2C1, register_address);
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <i2c_write+0xb4>)
 8000b02:	f7ff fe3e 	bl	8000782 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 8000b06:	bf00      	nop
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <i2c_write+0xb4>)
 8000b0a:	f7ff fd80 	bl	800060e <LL_I2C_IsActiveFlag_TXIS>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <i2c_write+0x68>

	LL_I2C_TransmitData8(I2C1, data);
 8000b14:	797b      	ldrb	r3, [r7, #5]
 8000b16:	4619      	mov	r1, r3
 8000b18:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <i2c_write+0xb4>)
 8000b1a:	f7ff fe32 	bl	8000782 <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)) {}
 8000b1e:	bf00      	nop
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <i2c_write+0xb4>)
 8000b22:	f7ff fdad 	bl	8000680 <LL_I2C_IsActiveFlag_TC>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f9      	beq.n	8000b20 <i2c_write+0x80>

	LL_I2C_GenerateStopCondition(I2C1);
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <i2c_write+0xb4>)
 8000b2e:	f7ff fdda 	bl	80006e6 <LL_I2C_GenerateStopCondition>
	while (LL_I2C_IsActiveFlag_STOP(I2C1) == 0) {}
 8000b32:	bf00      	nop
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <i2c_write+0xb4>)
 8000b36:	f7ff fd90 	bl	800065a <LL_I2C_IsActiveFlag_STOP>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <i2c_write+0x94>

	LL_I2C_ClearFlag_STOP(I2C1);
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <i2c_write+0xb4>)
 8000b42:	f7ff fdb0 	bl	80006a6 <LL_I2C_ClearFlag_STOP>

	return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	80002000 	.word	0x80002000
 8000b54:	40005400 	.word	0x40005400

08000b58 <__NVIC_SetPriorityGrouping>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	@ (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	@ 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <LL_RCC_HSI_Enable+0x1c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <LL_RCC_HSI_Enable+0x1c>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <LL_RCC_HSI_IsReady+0x20>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000

08000cbc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4904      	ldr	r1, [pc, #16]	@ (8000ce4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <LL_RCC_SetSysClkSource+0x24>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 0203 	bic.w	r2, r3, #3
 8000cf8:	4904      	ldr	r1, [pc, #16]	@ (8000d0c <LL_RCC_SetSysClkSource+0x24>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000

08000d10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <LL_RCC_GetSysClkSource+0x18>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d3c:	4904      	ldr	r1, [pc, #16]	@ (8000d50 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000

08000d54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000d64:	4904      	ldr	r1, [pc, #16]	@ (8000d78 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000d8c:	4904      	ldr	r1, [pc, #16]	@ (8000da0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <LL_RCC_SetI2CClockSource+0x2c>)
 8000dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	0e1b      	lsrs	r3, r3, #24
 8000db4:	43db      	mvns	r3, r3
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000dbe:	4904      	ldr	r1, [pc, #16]	@ (8000dd0 <LL_RCC_SetI2CClockSource+0x2c>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <LL_APB1_GRP1_EnableClock>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	4907      	ldr	r1, [pc, #28]	@ (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dea:	69da      	ldr	r2, [r3, #28]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000

08000e04 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	4907      	ldr	r1, [pc, #28]	@ (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e1a:	699a      	ldr	r2, [r3, #24]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <LL_FLASH_SetLatency+0x24>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 0207 	bic.w	r2, r3, #7
 8000e44:	4904      	ldr	r1, [pc, #16]	@ (8000e58 <LL_FLASH_SetLatency+0x24>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40022000 	.word	0x40022000

08000e5c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <LL_FLASH_GetLatency+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff ffc1 	bl	8000e04 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e82:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000e86:	f7ff ffa5 	bl	8000dd4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff fe64 	bl	8000b58 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000e90:	f7ff fe86 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2200      	movs	r2, #0
 8000e98:	210f      	movs	r1, #15
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff feb8 	bl	8000c10 <NVIC_EncodePriority>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff fe88 	bl	8000bbc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f83a 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f7ff fac0 	bl	8000434 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb4:	f7ff fa7e 	bl	80003b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eb8:	f7ff fca2 	bl	8000800 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 fc04 	bl	80016c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Sensors setup
  lps25hb_Init();
 8000ec0:	f001 fa5a 	bl	8002378 <lps25hb_Init>

  //Print start of the code
  sprintf(usartMsgDebug, "[_][_][_]Program Start[_][_][_]\n\r");
 8000ec4:	4912      	ldr	r1, [pc, #72]	@ (8000f10 <main+0x98>)
 8000ec6:	4813      	ldr	r0, [pc, #76]	@ (8000f14 <main+0x9c>)
 8000ec8:	f001 faf4 	bl	80024b4 <siprintf>
  USART2_PutBuffer(usartMsgDebug, sizeof(usartMsgDebug));
 8000ecc:	2164      	movs	r1, #100	@ 0x64
 8000ece:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <main+0x9c>)
 8000ed0:	f000 fcd4 	bl	800187c <USART2_PutBuffer>
  LL_mDelay(500);
 8000ed4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed8:	f001 fa18 	bl	800230c <LL_mDelay>
    /* USER CODE END WHILE */



	  //Reading pressure [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	  data_read=0;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <main+0xa0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
	  data_read=pressureRead();
 8000ee2:	f001 fa95 	bl	8002410 <pressureRead>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <main+0xa0>)
 8000eea:	6013      	str	r3, [r2, #0]
	  snprintf(periodic_msg, sizeof(periodic_msg), "Presure: %lu \r\n", data_read);
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <main+0xa0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <main+0xa4>)
 8000ef2:	2164      	movs	r1, #100	@ 0x64
 8000ef4:	480a      	ldr	r0, [pc, #40]	@ (8000f20 <main+0xa8>)
 8000ef6:	f001 faa9 	bl	800244c <sniprintf>
	  USART2_PutBuffer(periodic_msg, sizeof(periodic_msg));
 8000efa:	2164      	movs	r1, #100	@ 0x64
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <main+0xa8>)
 8000efe:	f000 fcbd 	bl	800187c <USART2_PutBuffer>
	  LL_mDelay(500);
 8000f02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f06:	f001 fa01 	bl	800230c <LL_mDelay>
  {
 8000f0a:	bf00      	nop
 8000f0c:	e7e6      	b.n	8000edc <main+0x64>
 8000f0e:	bf00      	nop
 8000f10:	08002dfc 	.word	0x08002dfc
 8000f14:	20000000 	.word	0x20000000
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	08002e20 	.word	0x08002e20
 8000f20:	200000e4 	.word	0x200000e4

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ff83 	bl	8000e34 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ff94 	bl	8000e5c <LL_FLASH_GetLatency>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1fa      	bne.n	8000f30 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000f3a:	f7ff fe9d 	bl	8000c78 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f3e:	bf00      	nop
 8000f40:	f7ff feaa 	bl	8000c98 <LL_RCC_HSI_IsReady>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d1fa      	bne.n	8000f40 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f4a:	2010      	movs	r0, #16
 8000f4c:	f7ff feb6 	bl	8000cbc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff feeb 	bl	8000d2c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fefc 	bl	8000d54 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff ff0d 	bl	8000d7c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fec0 	bl	8000ce8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f68:	bf00      	nop
 8000f6a:	f7ff fed1 	bl	8000d10 <LL_RCC_GetSysClkSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1fa      	bne.n	8000f6a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <SystemClock_Config+0x68>)
 8000f76:	f001 f9bb 	bl	80022f0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <SystemClock_Config+0x68>)
 8000f7c:	f001 f9ec 	bl	8002358 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000f80:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000f84:	f7ff ff0e 	bl	8000da4 <LL_RCC_SetI2CClockSource>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	007a1200 	.word	0x007a1200

08000f90 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <LL_DMA_DisableChannel+0x3c>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	3a01      	subs	r2, #1
 8000fae:	4907      	ldr	r1, [pc, #28]	@ (8000fcc <LL_DMA_DisableChannel+0x3c>)
 8000fb0:	5c8a      	ldrb	r2, [r1, r2]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	440a      	add	r2, r1
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	6013      	str	r3, [r2, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	08002e40 	.word	0x08002e40

08000fd0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001006:	605a      	str	r2, [r3, #4]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001024:	2b40      	cmp	r3, #64	@ 0x40
 8001026:	d101      	bne.n	800102c <LL_USART_IsActiveFlag_TC+0x18>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <LL_USART_IsActiveFlag_TC+0x1a>
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800103e:	bf00      	nop
 8001040:	e7fd      	b.n	800103e <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	bf00      	nop
 8001048:	e7fd      	b.n	8001046 <HardFault_Handler+0x4>

0800104a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	bf00      	nop
 8001058:	e7fd      	b.n	8001056 <BusFault_Handler+0x4>

0800105a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <DMA1_Channel7_IRQHandler+0x30>)
 80010ae:	f7ff ff8f 	bl	8000fd0 <LL_DMA_IsActiveFlag_TC7>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10d      	bne.n	80010d4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80010b8:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <DMA1_Channel7_IRQHandler+0x30>)
 80010ba:	f7ff ff9d 	bl	8000ff8 <LL_DMA_ClearFlag_TC7>
		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80010be:	bf00      	nop
 80010c0:	4806      	ldr	r0, [pc, #24]	@ (80010dc <DMA1_Channel7_IRQHandler+0x34>)
 80010c2:	f7ff ffa7 	bl	8001014 <LL_USART_IsActiveFlag_TC>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f9      	beq.n	80010c0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80010cc:	2107      	movs	r1, #7
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <DMA1_Channel7_IRQHandler+0x30>)
 80010d0:	f7ff ff5e 	bl	8000f90 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40004400 	.word	0x40004400

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f001 f9f0 	bl	80024f4 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20003000 	.word	0x20003000
 8001140:	00000400 	.word	0x00000400
 8001144:	20000148 	.word	0x20000148
 8001148:	200002a8 	.word	0x200002a8

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <LL_DMA_EnableChannel>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3b01      	subs	r3, #1
 800120e:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <LL_DMA_EnableChannel+0x3c>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	3a01      	subs	r2, #1
 800121e:	4907      	ldr	r1, [pc, #28]	@ (800123c <LL_DMA_EnableChannel+0x3c>)
 8001220:	5c8a      	ldrb	r2, [r1, r2]
 8001222:	4611      	mov	r1, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	440a      	add	r2, r1
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	08002e60 	.word	0x08002e60

08001240 <LL_DMA_SetDataTransferDirection>:
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <LL_DMA_SetDataTransferDirection+0x48>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	3a01      	subs	r2, #1
 8001268:	4907      	ldr	r1, [pc, #28]	@ (8001288 <LL_DMA_SetDataTransferDirection+0x48>)
 800126a:	5c8a      	ldrb	r2, [r1, r2]
 800126c:	4611      	mov	r1, r2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	440a      	add	r2, r1
 8001272:	4611      	mov	r1, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	08002e60 	.word	0x08002e60

0800128c <LL_DMA_SetMode>:
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <LL_DMA_SetMode+0x44>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 0220 	bic.w	r2, r3, #32
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <LL_DMA_SetMode+0x44>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	4619      	mov	r1, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	440b      	add	r3, r1
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	08002e60 	.word	0x08002e60

080012d4 <LL_DMA_SetPeriphIncMode>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <LL_DMA_SetPeriphIncMode+0x44>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <LL_DMA_SetPeriphIncMode+0x44>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	4619      	mov	r1, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	440b      	add	r3, r1
 8001302:	4619      	mov	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	08002e60 	.word	0x08002e60

0800131c <LL_DMA_SetMemoryIncMode>:
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <LL_DMA_SetMemoryIncMode+0x44>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3b01      	subs	r3, #1
 8001340:	4907      	ldr	r1, [pc, #28]	@ (8001360 <LL_DMA_SetMemoryIncMode+0x44>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	4619      	mov	r1, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	440b      	add	r3, r1
 800134a:	4619      	mov	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	08002e60 	.word	0x08002e60

08001364 <LL_DMA_SetPeriphSize>:
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <LL_DMA_SetPeriphSize+0x44>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <LL_DMA_SetPeriphSize+0x44>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	4619      	mov	r1, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	440b      	add	r3, r1
 8001392:	4619      	mov	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	08002e60 	.word	0x08002e60

080013ac <LL_DMA_SetMemorySize>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <LL_DMA_SetMemorySize+0x44>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <LL_DMA_SetMemorySize+0x44>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	4619      	mov	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	08002e60 	.word	0x08002e60

080013f4 <LL_DMA_SetChannelPriorityLevel>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3b01      	subs	r3, #1
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	4907      	ldr	r1, [pc, #28]	@ (8001438 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	4619      	mov	r1, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	440b      	add	r3, r1
 8001422:	4619      	mov	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	08002e60 	.word	0x08002e60

0800143c <LL_DMA_SetDataLength>:
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	4a0c      	ldr	r2, [pc, #48]	@ (8001480 <LL_DMA_SetDataLength+0x44>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	3a01      	subs	r2, #1
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <LL_DMA_SetDataLength+0x44>)
 8001462:	5c8a      	ldrb	r2, [r1, r2]
 8001464:	4611      	mov	r1, r2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	440a      	add	r2, r1
 800146a:	4611      	mov	r1, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	08002e60 	.word	0x08002e60

08001484 <LL_DMA_SetMemoryAddress>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <LL_DMA_SetMemoryAddress+0x2c>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	08002e60 	.word	0x08002e60

080014b4 <LL_DMA_SetPeriphAddress>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <LL_DMA_SetPeriphAddress+0x2c>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	08002e60 	.word	0x08002e60

080014e4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <LL_DMA_EnableIT_TC+0x3c>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	3a01      	subs	r2, #1
 8001502:	4907      	ldr	r1, [pc, #28]	@ (8001520 <LL_DMA_EnableIT_TC+0x3c>)
 8001504:	5c8a      	ldrb	r2, [r1, r2]
 8001506:	4611      	mov	r1, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	440a      	add	r2, r1
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	08002e60 	.word	0x08002e60

08001524 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <LL_DMA_EnableIT_TE+0x3c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	3a01      	subs	r2, #1
 8001542:	4907      	ldr	r1, [pc, #28]	@ (8001560 <LL_DMA_EnableIT_TE+0x3c>)
 8001544:	5c8a      	ldrb	r2, [r1, r2]
 8001546:	4611      	mov	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	440a      	add	r2, r1
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08002e60 	.word	0x08002e60

08001564 <LL_AHB1_GRP1_EnableClock>:
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000

08001594 <LL_APB1_GRP1_EnableClock>:
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4013      	ands	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000

080015c4 <LL_USART_Enable>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_USART_ConfigAsyncMode>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3308      	adds	r3, #8
 800161c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	e853 3f00 	ldrex	r3, [r3]
 8001624:	60bb      	str	r3, [r7, #8]
   return(result);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3308      	adds	r3, #8
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	61ba      	str	r2, [r7, #24]
 8001636:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001638:	6979      	ldr	r1, [r7, #20]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	e841 2300 	strex	r3, r2, [r1]
 8001640:	613b      	str	r3, [r7, #16]
   return(result);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e7      	bne.n	8001618 <LL_USART_DisableIT_CTS+0x8>
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001656:	b480      	push	{r7}
 8001658:	b089      	sub	sp, #36	@ 0x24
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3308      	adds	r3, #8
 8001662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	e853 3f00 	ldrex	r3, [r3]
 800166a:	60bb      	str	r3, [r7, #8]
   return(result);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3308      	adds	r3, #8
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	61ba      	str	r2, [r7, #24]
 800167c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	e841 2300 	strex	r3, r2, [r1]
 8001686:	613b      	str	r3, [r7, #16]
   return(result);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1e7      	bne.n	800165e <LL_USART_EnableDMAReq_TX+0x8>
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3724      	adds	r7, #36	@ 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d103      	bne.n	80016b4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3328      	adds	r3, #40	@ 0x28
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e002      	b.n	80016ba <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3324      	adds	r3, #36	@ 0x24
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	@ 0x38
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80016f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80016f6:	f7ff ff4d 	bl	8001594 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016fa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80016fe:	f7ff ff31 	bl	8001564 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001702:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001718:	2307      	movs	r3, #7
 800171a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001724:	f000 f9f8 	bl	8001b18 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001728:	2200      	movs	r2, #0
 800172a:	2106      	movs	r1, #6
 800172c:	4851      	ldr	r0, [pc, #324]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800172e:	f7ff fd87 	bl	8001240 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001732:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001736:	2106      	movs	r1, #6
 8001738:	484e      	ldr	r0, [pc, #312]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800173a:	f7ff fe5b 	bl	80013f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800173e:	2200      	movs	r2, #0
 8001740:	2106      	movs	r1, #6
 8001742:	484c      	ldr	r0, [pc, #304]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001744:	f7ff fda2 	bl	800128c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001748:	2200      	movs	r2, #0
 800174a:	2106      	movs	r1, #6
 800174c:	4849      	ldr	r0, [pc, #292]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800174e:	f7ff fdc1 	bl	80012d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	2106      	movs	r1, #6
 8001756:	4847      	ldr	r0, [pc, #284]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001758:	f7ff fde0 	bl	800131c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800175c:	2200      	movs	r2, #0
 800175e:	2106      	movs	r1, #6
 8001760:	4844      	ldr	r0, [pc, #272]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001762:	f7ff fdff 	bl	8001364 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001766:	2200      	movs	r2, #0
 8001768:	2106      	movs	r1, #6
 800176a:	4842      	ldr	r0, [pc, #264]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800176c:	f7ff fe1e 	bl	80013ac <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001770:	2210      	movs	r2, #16
 8001772:	2107      	movs	r1, #7
 8001774:	483f      	ldr	r0, [pc, #252]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001776:	f7ff fd63 	bl	8001240 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800177a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800177e:	2107      	movs	r1, #7
 8001780:	483c      	ldr	r0, [pc, #240]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001782:	f7ff fe37 	bl	80013f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001786:	2200      	movs	r2, #0
 8001788:	2107      	movs	r1, #7
 800178a:	483a      	ldr	r0, [pc, #232]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800178c:	f7ff fd7e 	bl	800128c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001790:	2200      	movs	r2, #0
 8001792:	2107      	movs	r1, #7
 8001794:	4837      	ldr	r0, [pc, #220]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001796:	f7ff fd9d 	bl	80012d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800179a:	2280      	movs	r2, #128	@ 0x80
 800179c:	2107      	movs	r1, #7
 800179e:	4835      	ldr	r0, [pc, #212]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017a0:	f7ff fdbc 	bl	800131c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2107      	movs	r1, #7
 80017a8:	4832      	ldr	r0, [pc, #200]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017aa:	f7ff fddb 	bl	8001364 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2107      	movs	r1, #7
 80017b2:	4830      	ldr	r0, [pc, #192]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017b4:	f7ff fdfa 	bl	80013ac <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80017b8:	2210      	movs	r2, #16
 80017ba:	2107      	movs	r1, #7
 80017bc:	482d      	ldr	r0, [pc, #180]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017be:	f7ff fd3f 	bl	8001240 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80017c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c6:	2107      	movs	r1, #7
 80017c8:	482a      	ldr	r0, [pc, #168]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017ca:	f7ff fe13 	bl	80013f4 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2107      	movs	r1, #7
 80017d2:	4828      	ldr	r0, [pc, #160]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017d4:	f7ff fd5a 	bl	800128c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80017d8:	2200      	movs	r2, #0
 80017da:	2107      	movs	r1, #7
 80017dc:	4825      	ldr	r0, [pc, #148]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017de:	f7ff fd79 	bl	80012d4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80017e2:	2280      	movs	r2, #128	@ 0x80
 80017e4:	2107      	movs	r1, #7
 80017e6:	4823      	ldr	r0, [pc, #140]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017e8:	f7ff fd98 	bl	800131c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2107      	movs	r1, #7
 80017f0:	4820      	ldr	r0, [pc, #128]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017f2:	f7ff fdb7 	bl	8001364 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2107      	movs	r1, #7
 80017fa:	481e      	ldr	r0, [pc, #120]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 80017fc:	f7ff fdd6 	bl	80013ac <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001800:	2100      	movs	r1, #0
 8001802:	481d      	ldr	r0, [pc, #116]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 8001804:	f7ff ff4a 	bl	800169c <LL_USART_DMA_GetRegAddr>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	2107      	movs	r1, #7
 800180e:	4819      	ldr	r0, [pc, #100]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 8001810:	f7ff fe50 	bl	80014b4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001814:	4818      	ldr	r0, [pc, #96]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 8001816:	f7ff ff1e 	bl	8001656 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800181a:	2107      	movs	r1, #7
 800181c:	4815      	ldr	r0, [pc, #84]	@ (8001874 <MX_USART2_UART_Init+0x1ac>)
 800181e:	f7ff fe81 	bl	8001524 <LL_DMA_EnableIT_TE>

    /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001822:	2100      	movs	r1, #0
 8001824:	2026      	movs	r0, #38	@ 0x26
 8001826:	f7ff fcc1 	bl	80011ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800182a:	2026      	movs	r0, #38	@ 0x26
 800182c:	f7ff fca0 	bl	8001170 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001830:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001834:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001842:	230c      	movs	r3, #12
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 8001856:	f000 fcc5 	bl	80021e4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800185a:	4807      	ldr	r0, [pc, #28]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 800185c:	f7ff fed8 	bl	8001610 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 8001862:	f7ff febf 	bl	80015e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001866:	4804      	ldr	r0, [pc, #16]	@ (8001878 <MX_USART2_UART_Init+0x1b0>)
 8001868:	f7ff feac 	bl	80015c4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	@ 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000
 8001878:	40004400 	.word	0x40004400

0800187c <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	461a      	mov	r2, r3
 800188c:	2107      	movs	r1, #7
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <USART2_PutBuffer+0x3c>)
 8001890:	f7ff fdf8 	bl	8001484 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	461a      	mov	r2, r3
 8001898:	2107      	movs	r1, #7
 800189a:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <USART2_PutBuffer+0x3c>)
 800189c:	f7ff fdce 	bl	800143c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80018a0:	2107      	movs	r1, #7
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <USART2_PutBuffer+0x3c>)
 80018a4:	f7ff fe1e 	bl	80014e4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80018a8:	2107      	movs	r1, #7
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <USART2_PutBuffer+0x3c>)
 80018ac:	f7ff fca8 	bl	8001200 <LL_DMA_EnableChannel>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c0:	f7ff fc44 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f000 fe09 	bl	8002500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7ff fac3 	bl	8000e78 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001900:	08002eac 	.word	0x08002eac
  ldr r2, =_sbss
 8001904:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001908:	200002a4 	.word	0x200002a4

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>

0800190e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800190e:	b480      	push	{r7}
 8001910:	b089      	sub	sp, #36	@ 0x24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	613b      	str	r3, [r7, #16]
  return result;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2103      	movs	r1, #3
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	61bb      	str	r3, [r7, #24]
  return result;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	3724      	adds	r7, #36	@ 0x24
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	431a      	orrs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	613b      	str	r3, [r7, #16]
  return result;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2103      	movs	r1, #3
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	61bb      	str	r3, [r7, #24]
  return result;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	431a      	orrs	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b089      	sub	sp, #36	@ 0x24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	613b      	str	r3, [r7, #16]
  return result;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2103      	movs	r1, #3
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	61bb      	str	r3, [r7, #24]
  return result;
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	431a      	orrs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	60da      	str	r2, [r3, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3724      	adds	r7, #36	@ 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	613b      	str	r3, [r7, #16]
  return result;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	210f      	movs	r1, #15
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	401a      	ands	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	61bb      	str	r3, [r7, #24]
  return result;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001aaa:	bf00      	nop
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b089      	sub	sp, #36	@ 0x24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	613b      	str	r3, [r7, #16]
  return result;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	210f      	movs	r1, #15
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	61bb      	str	r3, [r7, #24]
  return result;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	431a      	orrs	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001b0c:	bf00      	nop
 8001b0e:	3724      	adds	r7, #36	@ 0x24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	613b      	str	r3, [r7, #16]
  return result;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b3a:	e051      	b.n	8001be0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d043      	beq.n	8001bda <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d003      	beq.n	8001b62 <LL_GPIO_Init+0x4a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d10e      	bne.n	8001b80 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	461a      	mov	r2, r3
 8001b68:	69b9      	ldr	r1, [r7, #24]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff16 	bl	800199c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fef6 	bl	800196c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	461a      	mov	r2, r3
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff36 	bl	80019fa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d11a      	bne.n	8001bcc <LL_GPIO_Init+0xb4>
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	60bb      	str	r3, [r7, #8]
  return result;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	d807      	bhi.n	8001bbe <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	69b9      	ldr	r1, [r7, #24]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff4e 	bl	8001a58 <LL_GPIO_SetAFPin_0_7>
 8001bbc:	e006      	b.n	8001bcc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff75 	bl	8001ab6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fe9a 	bl	800190e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1a6      	bne.n	8001b3c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <LL_I2C_Enable>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_I2C_Disable>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 0201 	bic.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_I2C_ConfigFilters>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0219      	lsls	r1, r3, #8
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	430b      	orrs	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_I2C_SetOwnAddress1>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c7a:	f023 0307 	bic.w	r3, r3, #7
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_I2C_EnableOwnAddress1>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_I2C_DisableOwnAddress1>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_I2C_SetTiming>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	611a      	str	r2, [r3, #16]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_I2C_SetMode>:
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_I2C_AcknowledgeNextData>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	605a      	str	r2, [r3, #4]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff65 	bl	8001c18 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	461a      	mov	r2, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff6d 	bl	8001c38 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffb6 	bl	8001cd6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff44 	bl	8001bf8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffa0 	bl	8001cb6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff70 	bl	8001c66 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff81 	bl	8001c96 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa9 	bl	8001cf2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffb6 	bl	8001d18 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <LL_RCC_HSI_IsReady>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <LL_RCC_HSI_IsReady+0x20>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000

08001ddc <LL_RCC_LSE_IsReady>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <LL_RCC_LSE_IsReady+0x20>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000

08001e00 <LL_RCC_GetSysClkSource>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <LL_RCC_GetSysClkSource+0x18>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000

08001e1c <LL_RCC_GetAHBPrescaler>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <LL_RCC_GetAHBPrescaler+0x18>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <LL_RCC_GetAPB1Prescaler>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000

08001e54 <LL_RCC_GetAPB2Prescaler>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <LL_RCC_GetUSARTClockSource+0x28>)
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4313      	orrs	r3, r2
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000

08001e9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <LL_RCC_PLL_GetPrediv+0x18>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	f003 030f 	and.w	r3, r3, #15
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ef8:	f000 f862 	bl	8001fc0 <RCC_GetSystemClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f880 	bl	800200c <RCC_GetHCLKClockFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f88e 	bl	8002038 <RCC_GetPCLK1ClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f89a 	bl	8002060 <RCC_GetPCLK2ClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60da      	str	r2, [r3, #12]
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d130      	bne.n	8001fb0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff8e 	bl	8001e70 <LL_RCC_GetUSARTClockSource>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d00a      	beq.n	8001f70 <LL_RCC_GetUSARTClockFreq+0x34>
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d819      	bhi.n	8001f92 <LL_RCC_GetUSARTClockFreq+0x56>
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d002      	beq.n	8001f68 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d00c      	beq.n	8001f80 <LL_RCC_GetUSARTClockFreq+0x44>
 8001f66:	e014      	b.n	8001f92 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001f68:	f000 f82a 	bl	8001fc0 <RCC_GetSystemClockFreq>
 8001f6c:	60f8      	str	r0, [r7, #12]
        break;
 8001f6e:	e01f      	b.n	8001fb0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001f70:	f7ff ff22 	bl	8001db8 <LL_RCC_HSI_IsReady>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <LL_RCC_GetUSARTClockFreq+0x80>)
 8001f7c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001f7e:	e014      	b.n	8001faa <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001f80:	f7ff ff2c 	bl	8001ddc <LL_RCC_LSE_IsReady>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d011      	beq.n	8001fae <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8001f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f8e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001f90:	e00d      	b.n	8001fae <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001f92:	f000 f815 	bl	8001fc0 <RCC_GetSystemClockFreq>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f837 	bl	800200c <RCC_GetHCLKClockFreq>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f849 	bl	8002038 <RCC_GetPCLK1ClockFreq>
 8001fa6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001fa8:	e002      	b.n	8001fb0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001faa:	bf00      	nop
 8001fac:	e000      	b.n	8001fb0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001fae:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001fca:	f7ff ff19 	bl	8001e00 <LL_RCC_GetSysClkSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d00c      	beq.n	8001fee <RCC_GetSystemClockFreq+0x2e>
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d80e      	bhi.n	8001ff6 <RCC_GetSystemClockFreq+0x36>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <RCC_GetSystemClockFreq+0x22>
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d003      	beq.n	8001fe8 <RCC_GetSystemClockFreq+0x28>
 8001fe0:	e009      	b.n	8001ff6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <RCC_GetSystemClockFreq+0x48>)
 8001fe4:	607b      	str	r3, [r7, #4]
      break;
 8001fe6:	e009      	b.n	8001ffc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <RCC_GetSystemClockFreq+0x48>)
 8001fea:	607b      	str	r3, [r7, #4]
      break;
 8001fec:	e006      	b.n	8001ffc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001fee:	f000 f84b 	bl	8002088 <RCC_PLL_GetFreqDomain_SYS>
 8001ff2:	6078      	str	r0, [r7, #4]
      break;
 8001ff4:	e002      	b.n	8001ffc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <RCC_GetSystemClockFreq+0x48>)
 8001ff8:	607b      	str	r3, [r7, #4]
      break;
 8001ffa:	bf00      	nop
  }

  return frequency;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	007a1200 	.word	0x007a1200

0800200c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002014:	f7ff ff02 	bl	8001e1c <LL_RCC_GetAHBPrescaler>
 8002018:	4603      	mov	r3, r0
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <RCC_GetHCLKClockFreq+0x28>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	40d3      	lsrs	r3, r2
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	08002e48 	.word	0x08002e48

08002038 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002040:	f7ff fefa 	bl	8001e38 <LL_RCC_GetAPB1Prescaler>
 8002044:	4603      	mov	r3, r0
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <RCC_GetPCLK1ClockFreq+0x24>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	40d3      	lsrs	r3, r2
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	08002e58 	.word	0x08002e58

08002060 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002068:	f7ff fef4 	bl	8001e54 <LL_RCC_GetAPB2Prescaler>
 800206c:	4603      	mov	r3, r0
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <RCC_GetPCLK2ClockFreq+0x24>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	40d3      	lsrs	r3, r2
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	08002e58 	.word	0x08002e58

08002088 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002096:	f7ff ff01 	bl	8001e9c <LL_RCC_PLL_GetMainSource>
 800209a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <RCC_PLL_GetFreqDomain_SYS+0x24>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a8:	d003      	beq.n	80020b2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80020aa:	e005      	b.n	80020b8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020ae:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80020b0:	e005      	b.n	80020be <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80020b4:	60fb      	str	r3, [r7, #12]
      break;
 80020b6:	e002      	b.n	80020be <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80020b8:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020ba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80020bc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80020be:	f7ff ff09 	bl	8001ed4 <LL_RCC_PLL_GetPrediv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	3301      	adds	r3, #1
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	fbb2 f4f3 	udiv	r4, r2, r3
 80020cc:	f7ff fef4 	bl	8001eb8 <LL_RCC_PLL_GetMultiplicator>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80020d6:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80020da:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	603a      	str	r2, [r7, #0]
  return result;
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	40d3      	lsrs	r3, r2
 80020ee:	3302      	adds	r3, #2
 80020f0:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	003d0900 	.word	0x003d0900
 8002100:	007a1200 	.word	0x007a1200

08002104 <LL_USART_IsEnabled>:
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <LL_USART_IsEnabled+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_USART_IsEnabled+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_USART_SetStopBitsLength>:
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_USART_SetHWFlowCtrl>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_USART_SetBaudRate>:
{
 8002176:	b480      	push	{r7}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800218a:	d11a      	bne.n	80021c2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	005a      	lsls	r2, r3, #1
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	441a      	add	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	60da      	str	r2, [r3, #12]
}
 80021c0:	e00a      	b.n	80021d8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	085a      	lsrs	r2, r3, #1
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	441a      	add	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	60da      	str	r2, [r3, #12]
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff84 	bl	8002104 <LL_USART_IsEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d14e      	bne.n	80022a0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <LL_USART_Init+0xc8>)
 8002208:	4013      	ands	r3, r2
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	6851      	ldr	r1, [r2, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	6912      	ldr	r2, [r2, #16]
 8002218:	4311      	orrs	r1, r2
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	6992      	ldr	r2, [r2, #24]
 800221e:	430a      	orrs	r2, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff7c 	bl	800212a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff89 	bl	8002150 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <LL_USART_Init+0xcc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d104      	bne.n	8002250 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff fe78 	bl	8001f3c <LL_RCC_GetUSARTClockFreq>
 800224c:	61b8      	str	r0, [r7, #24]
 800224e:	e016      	b.n	800227e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <LL_USART_Init+0xd0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d107      	bne.n	8002268 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fe47 	bl	8001ef0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e00a      	b.n	800227e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a13      	ldr	r2, [pc, #76]	@ (80022b8 <LL_USART_Init+0xd4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d106      	bne.n	800227e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe3b 	bl	8001ef0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800228c:	2300      	movs	r3, #0
 800228e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff6b 	bl	8002176 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	efff69f3 	.word	0xefff69f3
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40004400 	.word	0x40004400
 80022b8:	40004800 	.word	0x40004800

080022bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <LL_InitTick+0x30>)
 80022d0:	3b01      	subs	r3, #1
 80022d2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <LL_InitTick+0x30>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <LL_InitTick+0x30>)
 80022dc:	2205      	movs	r2, #5
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80022f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffdd 	bl	80022bc <LL_InitTick>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <LL_mDelay+0x48>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800231a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d00c      	beq.n	800233e <LL_mDelay+0x32>
  {
    Delay++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800232a:	e008      	b.n	800233e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <LL_mDelay+0x48>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <LL_mDelay+0x32>
    {
      Delay--;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f3      	bne.n	800232c <LL_mDelay+0x20>
    }
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <LL_SetSystemCoreClock+0x1c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000064 	.word	0x20000064

08002378 <lps25hb_Init>:

uint32_t pressureData=0;

uint32_t pressureOffset=0;

void lps25hb_Init(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	data_read_set = (uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_WHO_AM_I_ADDRES, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	210f      	movs	r1, #15
 8002382:	20bb      	movs	r0, #187	@ 0xbb
 8002384:	f7fe faac 	bl	80008e0 <i2c_read>
 8002388:	4603      	mov	r3, r0
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <lps25hb_Init+0x84>)
 800238c:	6013      	str	r3, [r2, #0]
	if(data_read_set == LPS25HB_WHO_AM_I_VALUE){
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <lps25hb_Init+0x84>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2bbd      	cmp	r3, #189	@ 0xbd
 8002394:	d102      	bne.n	800239c <lps25hb_Init+0x24>
		whoAmI = 1;
 8002396:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <lps25hb_Init+0x88>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
	}
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(writeSettingsSensor == 0){
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <lps25hb_Init+0x8c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d113      	bne.n	80023cc <lps25hb_Init+0x54>
		uint8_t settings=0x80;
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	71fb      	strb	r3, [r7, #7]
		i2c_write(LPS25HB_DEVICE_ADDRESS_WRITE_1, LPS25HB_CTRL_REG1, settings, 1);
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	2301      	movs	r3, #1
 80023ac:	2120      	movs	r1, #32
 80023ae:	20ba      	movs	r0, #186	@ 0xba
 80023b0:	f7fe fb76 	bl	8000aa0 <i2c_write>
		if((uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_CTRL_REG1, 0) == settings){
 80023b4:	2200      	movs	r2, #0
 80023b6:	2120      	movs	r1, #32
 80023b8:	20bb      	movs	r0, #187	@ 0xbb
 80023ba:	f7fe fa91 	bl	80008e0 <i2c_read>
 80023be:	4602      	mov	r2, r0
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d102      	bne.n	80023cc <lps25hb_Init+0x54>
			writeSettingsSensor=1;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <lps25hb_Init+0x8c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
	}
	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Offset read value [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	pressureOffset=(uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_RPDS_L, 2);
 80023cc:	2202      	movs	r2, #2
 80023ce:	2139      	movs	r1, #57	@ 0x39
 80023d0:	20bb      	movs	r0, #187	@ 0xbb
 80023d2:	f7fe fa85 	bl	80008e0 <i2c_read>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <lps25hb_Init+0x90>)
 80023da:	6013      	str	r3, [r2, #0]

	//Offset read value [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(whoAmI && writeSettingsSensor){
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <lps25hb_Init+0x88>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <lps25hb_Init+0x7c>
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <lps25hb_Init+0x8c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <lps25hb_Init+0x7c>
		USART2_PutBuffer(("lps25hb_set\n\r"), sizeof(("lps25hb_set\n\r")));
 80023ec:	210e      	movs	r1, #14
 80023ee:	4807      	ldr	r0, [pc, #28]	@ (800240c <lps25hb_Init+0x94>)
 80023f0:	f7ff fa44 	bl	800187c <USART2_PutBuffer>
	}
	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000014c 	.word	0x2000014c
 8002400:	20000150 	.word	0x20000150
 8002404:	20000151 	.word	0x20000151
 8002408:	20000158 	.word	0x20000158
 800240c:	08002e30 	.word	0x08002e30

08002410 <pressureRead>:

uint32_t pressureRead(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	pressureData=0;
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <pressureRead+0x34>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
	pressureData=(uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_PRESS_OUT_XL, 3);
 800241a:	2203      	movs	r2, #3
 800241c:	2128      	movs	r1, #40	@ 0x28
 800241e:	20bb      	movs	r0, #187	@ 0xbb
 8002420:	f7fe fa5e 	bl	80008e0 <i2c_read>
 8002424:	4603      	mov	r3, r0
 8002426:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <pressureRead+0x34>)
 8002428:	6013      	str	r3, [r2, #0]
	pressureData=(pressureData+pressureOffset)/4096;
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <pressureRead+0x34>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <pressureRead+0x38>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	0b1b      	lsrs	r3, r3, #12
 8002436:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <pressureRead+0x34>)
 8002438:	6013      	str	r3, [r2, #0]
	return pressureData;
 800243a:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <pressureRead+0x34>)
 800243c:	681b      	ldr	r3, [r3, #0]
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000154 	.word	0x20000154
 8002448:	20000158 	.word	0x20000158

0800244c <sniprintf>:
 800244c:	b40c      	push	{r2, r3}
 800244e:	b530      	push	{r4, r5, lr}
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <sniprintf+0x64>)
 8002452:	1e0c      	subs	r4, r1, #0
 8002454:	681d      	ldr	r5, [r3, #0]
 8002456:	b09d      	sub	sp, #116	@ 0x74
 8002458:	da08      	bge.n	800246c <sniprintf+0x20>
 800245a:	238b      	movs	r3, #139	@ 0x8b
 800245c:	602b      	str	r3, [r5, #0]
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	b01d      	add	sp, #116	@ 0x74
 8002464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002468:	b002      	add	sp, #8
 800246a:	4770      	bx	lr
 800246c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002470:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002474:	bf14      	ite	ne
 8002476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800247a:	4623      	moveq	r3, r4
 800247c:	9304      	str	r3, [sp, #16]
 800247e:	9307      	str	r3, [sp, #28]
 8002480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002484:	9002      	str	r0, [sp, #8]
 8002486:	9006      	str	r0, [sp, #24]
 8002488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800248c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800248e:	ab21      	add	r3, sp, #132	@ 0x84
 8002490:	a902      	add	r1, sp, #8
 8002492:	4628      	mov	r0, r5
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f000 f9ad 	bl	80027f4 <_svfiprintf_r>
 800249a:	1c43      	adds	r3, r0, #1
 800249c:	bfbc      	itt	lt
 800249e:	238b      	movlt	r3, #139	@ 0x8b
 80024a0:	602b      	strlt	r3, [r5, #0]
 80024a2:	2c00      	cmp	r4, #0
 80024a4:	d0dd      	beq.n	8002462 <sniprintf+0x16>
 80024a6:	9b02      	ldr	r3, [sp, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e7d9      	b.n	8002462 <sniprintf+0x16>
 80024ae:	bf00      	nop
 80024b0:	20000068 	.word	0x20000068

080024b4 <siprintf>:
 80024b4:	b40e      	push	{r1, r2, r3}
 80024b6:	b500      	push	{lr}
 80024b8:	b09c      	sub	sp, #112	@ 0x70
 80024ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80024bc:	9002      	str	r0, [sp, #8]
 80024be:	9006      	str	r0, [sp, #24]
 80024c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024c4:	4809      	ldr	r0, [pc, #36]	@ (80024ec <siprintf+0x38>)
 80024c6:	9107      	str	r1, [sp, #28]
 80024c8:	9104      	str	r1, [sp, #16]
 80024ca:	4909      	ldr	r1, [pc, #36]	@ (80024f0 <siprintf+0x3c>)
 80024cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80024d0:	9105      	str	r1, [sp, #20]
 80024d2:	6800      	ldr	r0, [r0, #0]
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	a902      	add	r1, sp, #8
 80024d8:	f000 f98c 	bl	80027f4 <_svfiprintf_r>
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	b01c      	add	sp, #112	@ 0x70
 80024e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024e8:	b003      	add	sp, #12
 80024ea:	4770      	bx	lr
 80024ec:	20000068 	.word	0x20000068
 80024f0:	ffff0208 	.word	0xffff0208

080024f4 <__errno>:
 80024f4:	4b01      	ldr	r3, [pc, #4]	@ (80024fc <__errno+0x8>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000068 	.word	0x20000068

08002500 <__libc_init_array>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	4d0d      	ldr	r5, [pc, #52]	@ (8002538 <__libc_init_array+0x38>)
 8002504:	4c0d      	ldr	r4, [pc, #52]	@ (800253c <__libc_init_array+0x3c>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	2600      	movs	r6, #0
 800250c:	42a6      	cmp	r6, r4
 800250e:	d109      	bne.n	8002524 <__libc_init_array+0x24>
 8002510:	4d0b      	ldr	r5, [pc, #44]	@ (8002540 <__libc_init_array+0x40>)
 8002512:	4c0c      	ldr	r4, [pc, #48]	@ (8002544 <__libc_init_array+0x44>)
 8002514:	f000 fc66 	bl	8002de4 <_init>
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	2600      	movs	r6, #0
 800251e:	42a6      	cmp	r6, r4
 8002520:	d105      	bne.n	800252e <__libc_init_array+0x2e>
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	f855 3b04 	ldr.w	r3, [r5], #4
 8002528:	4798      	blx	r3
 800252a:	3601      	adds	r6, #1
 800252c:	e7ee      	b.n	800250c <__libc_init_array+0xc>
 800252e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002532:	4798      	blx	r3
 8002534:	3601      	adds	r6, #1
 8002536:	e7f2      	b.n	800251e <__libc_init_array+0x1e>
 8002538:	08002ea4 	.word	0x08002ea4
 800253c:	08002ea4 	.word	0x08002ea4
 8002540:	08002ea4 	.word	0x08002ea4
 8002544:	08002ea8 	.word	0x08002ea8

08002548 <__retarget_lock_acquire_recursive>:
 8002548:	4770      	bx	lr

0800254a <__retarget_lock_release_recursive>:
 800254a:	4770      	bx	lr

0800254c <_free_r>:
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4605      	mov	r5, r0
 8002550:	2900      	cmp	r1, #0
 8002552:	d041      	beq.n	80025d8 <_free_r+0x8c>
 8002554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002558:	1f0c      	subs	r4, r1, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	bfb8      	it	lt
 800255e:	18e4      	addlt	r4, r4, r3
 8002560:	f000 f8e0 	bl	8002724 <__malloc_lock>
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <_free_r+0x90>)
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	b933      	cbnz	r3, 8002578 <_free_r+0x2c>
 800256a:	6063      	str	r3, [r4, #4]
 800256c:	6014      	str	r4, [r2, #0]
 800256e:	4628      	mov	r0, r5
 8002570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002574:	f000 b8dc 	b.w	8002730 <__malloc_unlock>
 8002578:	42a3      	cmp	r3, r4
 800257a:	d908      	bls.n	800258e <_free_r+0x42>
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	1821      	adds	r1, r4, r0
 8002580:	428b      	cmp	r3, r1
 8002582:	bf01      	itttt	eq
 8002584:	6819      	ldreq	r1, [r3, #0]
 8002586:	685b      	ldreq	r3, [r3, #4]
 8002588:	1809      	addeq	r1, r1, r0
 800258a:	6021      	streq	r1, [r4, #0]
 800258c:	e7ed      	b.n	800256a <_free_r+0x1e>
 800258e:	461a      	mov	r2, r3
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	b10b      	cbz	r3, 8002598 <_free_r+0x4c>
 8002594:	42a3      	cmp	r3, r4
 8002596:	d9fa      	bls.n	800258e <_free_r+0x42>
 8002598:	6811      	ldr	r1, [r2, #0]
 800259a:	1850      	adds	r0, r2, r1
 800259c:	42a0      	cmp	r0, r4
 800259e:	d10b      	bne.n	80025b8 <_free_r+0x6c>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	4401      	add	r1, r0
 80025a4:	1850      	adds	r0, r2, r1
 80025a6:	4283      	cmp	r3, r0
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	d1e0      	bne.n	800256e <_free_r+0x22>
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	6053      	str	r3, [r2, #4]
 80025b2:	4408      	add	r0, r1
 80025b4:	6010      	str	r0, [r2, #0]
 80025b6:	e7da      	b.n	800256e <_free_r+0x22>
 80025b8:	d902      	bls.n	80025c0 <_free_r+0x74>
 80025ba:	230c      	movs	r3, #12
 80025bc:	602b      	str	r3, [r5, #0]
 80025be:	e7d6      	b.n	800256e <_free_r+0x22>
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	1821      	adds	r1, r4, r0
 80025c4:	428b      	cmp	r3, r1
 80025c6:	bf04      	itt	eq
 80025c8:	6819      	ldreq	r1, [r3, #0]
 80025ca:	685b      	ldreq	r3, [r3, #4]
 80025cc:	6063      	str	r3, [r4, #4]
 80025ce:	bf04      	itt	eq
 80025d0:	1809      	addeq	r1, r1, r0
 80025d2:	6021      	streq	r1, [r4, #0]
 80025d4:	6054      	str	r4, [r2, #4]
 80025d6:	e7ca      	b.n	800256e <_free_r+0x22>
 80025d8:	bd38      	pop	{r3, r4, r5, pc}
 80025da:	bf00      	nop
 80025dc:	200002a0 	.word	0x200002a0

080025e0 <sbrk_aligned>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4e0f      	ldr	r6, [pc, #60]	@ (8002620 <sbrk_aligned+0x40>)
 80025e4:	460c      	mov	r4, r1
 80025e6:	6831      	ldr	r1, [r6, #0]
 80025e8:	4605      	mov	r5, r0
 80025ea:	b911      	cbnz	r1, 80025f2 <sbrk_aligned+0x12>
 80025ec:	f000 fba6 	bl	8002d3c <_sbrk_r>
 80025f0:	6030      	str	r0, [r6, #0]
 80025f2:	4621      	mov	r1, r4
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 fba1 	bl	8002d3c <_sbrk_r>
 80025fa:	1c43      	adds	r3, r0, #1
 80025fc:	d103      	bne.n	8002606 <sbrk_aligned+0x26>
 80025fe:	f04f 34ff 	mov.w	r4, #4294967295
 8002602:	4620      	mov	r0, r4
 8002604:	bd70      	pop	{r4, r5, r6, pc}
 8002606:	1cc4      	adds	r4, r0, #3
 8002608:	f024 0403 	bic.w	r4, r4, #3
 800260c:	42a0      	cmp	r0, r4
 800260e:	d0f8      	beq.n	8002602 <sbrk_aligned+0x22>
 8002610:	1a21      	subs	r1, r4, r0
 8002612:	4628      	mov	r0, r5
 8002614:	f000 fb92 	bl	8002d3c <_sbrk_r>
 8002618:	3001      	adds	r0, #1
 800261a:	d1f2      	bne.n	8002602 <sbrk_aligned+0x22>
 800261c:	e7ef      	b.n	80025fe <sbrk_aligned+0x1e>
 800261e:	bf00      	nop
 8002620:	2000029c 	.word	0x2000029c

08002624 <_malloc_r>:
 8002624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002628:	1ccd      	adds	r5, r1, #3
 800262a:	f025 0503 	bic.w	r5, r5, #3
 800262e:	3508      	adds	r5, #8
 8002630:	2d0c      	cmp	r5, #12
 8002632:	bf38      	it	cc
 8002634:	250c      	movcc	r5, #12
 8002636:	2d00      	cmp	r5, #0
 8002638:	4606      	mov	r6, r0
 800263a:	db01      	blt.n	8002640 <_malloc_r+0x1c>
 800263c:	42a9      	cmp	r1, r5
 800263e:	d904      	bls.n	800264a <_malloc_r+0x26>
 8002640:	230c      	movs	r3, #12
 8002642:	6033      	str	r3, [r6, #0]
 8002644:	2000      	movs	r0, #0
 8002646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800264a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002720 <_malloc_r+0xfc>
 800264e:	f000 f869 	bl	8002724 <__malloc_lock>
 8002652:	f8d8 3000 	ldr.w	r3, [r8]
 8002656:	461c      	mov	r4, r3
 8002658:	bb44      	cbnz	r4, 80026ac <_malloc_r+0x88>
 800265a:	4629      	mov	r1, r5
 800265c:	4630      	mov	r0, r6
 800265e:	f7ff ffbf 	bl	80025e0 <sbrk_aligned>
 8002662:	1c43      	adds	r3, r0, #1
 8002664:	4604      	mov	r4, r0
 8002666:	d158      	bne.n	800271a <_malloc_r+0xf6>
 8002668:	f8d8 4000 	ldr.w	r4, [r8]
 800266c:	4627      	mov	r7, r4
 800266e:	2f00      	cmp	r7, #0
 8002670:	d143      	bne.n	80026fa <_malloc_r+0xd6>
 8002672:	2c00      	cmp	r4, #0
 8002674:	d04b      	beq.n	800270e <_malloc_r+0xea>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	4639      	mov	r1, r7
 800267a:	4630      	mov	r0, r6
 800267c:	eb04 0903 	add.w	r9, r4, r3
 8002680:	f000 fb5c 	bl	8002d3c <_sbrk_r>
 8002684:	4581      	cmp	r9, r0
 8002686:	d142      	bne.n	800270e <_malloc_r+0xea>
 8002688:	6821      	ldr	r1, [r4, #0]
 800268a:	1a6d      	subs	r5, r5, r1
 800268c:	4629      	mov	r1, r5
 800268e:	4630      	mov	r0, r6
 8002690:	f7ff ffa6 	bl	80025e0 <sbrk_aligned>
 8002694:	3001      	adds	r0, #1
 8002696:	d03a      	beq.n	800270e <_malloc_r+0xea>
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	442b      	add	r3, r5
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	f8d8 3000 	ldr.w	r3, [r8]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	bb62      	cbnz	r2, 8002700 <_malloc_r+0xdc>
 80026a6:	f8c8 7000 	str.w	r7, [r8]
 80026aa:	e00f      	b.n	80026cc <_malloc_r+0xa8>
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	1b52      	subs	r2, r2, r5
 80026b0:	d420      	bmi.n	80026f4 <_malloc_r+0xd0>
 80026b2:	2a0b      	cmp	r2, #11
 80026b4:	d917      	bls.n	80026e6 <_malloc_r+0xc2>
 80026b6:	1961      	adds	r1, r4, r5
 80026b8:	42a3      	cmp	r3, r4
 80026ba:	6025      	str	r5, [r4, #0]
 80026bc:	bf18      	it	ne
 80026be:	6059      	strne	r1, [r3, #4]
 80026c0:	6863      	ldr	r3, [r4, #4]
 80026c2:	bf08      	it	eq
 80026c4:	f8c8 1000 	streq.w	r1, [r8]
 80026c8:	5162      	str	r2, [r4, r5]
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	4630      	mov	r0, r6
 80026ce:	f000 f82f 	bl	8002730 <__malloc_unlock>
 80026d2:	f104 000b 	add.w	r0, r4, #11
 80026d6:	1d23      	adds	r3, r4, #4
 80026d8:	f020 0007 	bic.w	r0, r0, #7
 80026dc:	1ac2      	subs	r2, r0, r3
 80026de:	bf1c      	itt	ne
 80026e0:	1a1b      	subne	r3, r3, r0
 80026e2:	50a3      	strne	r3, [r4, r2]
 80026e4:	e7af      	b.n	8002646 <_malloc_r+0x22>
 80026e6:	6862      	ldr	r2, [r4, #4]
 80026e8:	42a3      	cmp	r3, r4
 80026ea:	bf0c      	ite	eq
 80026ec:	f8c8 2000 	streq.w	r2, [r8]
 80026f0:	605a      	strne	r2, [r3, #4]
 80026f2:	e7eb      	b.n	80026cc <_malloc_r+0xa8>
 80026f4:	4623      	mov	r3, r4
 80026f6:	6864      	ldr	r4, [r4, #4]
 80026f8:	e7ae      	b.n	8002658 <_malloc_r+0x34>
 80026fa:	463c      	mov	r4, r7
 80026fc:	687f      	ldr	r7, [r7, #4]
 80026fe:	e7b6      	b.n	800266e <_malloc_r+0x4a>
 8002700:	461a      	mov	r2, r3
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	42a3      	cmp	r3, r4
 8002706:	d1fb      	bne.n	8002700 <_malloc_r+0xdc>
 8002708:	2300      	movs	r3, #0
 800270a:	6053      	str	r3, [r2, #4]
 800270c:	e7de      	b.n	80026cc <_malloc_r+0xa8>
 800270e:	230c      	movs	r3, #12
 8002710:	6033      	str	r3, [r6, #0]
 8002712:	4630      	mov	r0, r6
 8002714:	f000 f80c 	bl	8002730 <__malloc_unlock>
 8002718:	e794      	b.n	8002644 <_malloc_r+0x20>
 800271a:	6005      	str	r5, [r0, #0]
 800271c:	e7d6      	b.n	80026cc <_malloc_r+0xa8>
 800271e:	bf00      	nop
 8002720:	200002a0 	.word	0x200002a0

08002724 <__malloc_lock>:
 8002724:	4801      	ldr	r0, [pc, #4]	@ (800272c <__malloc_lock+0x8>)
 8002726:	f7ff bf0f 	b.w	8002548 <__retarget_lock_acquire_recursive>
 800272a:	bf00      	nop
 800272c:	20000298 	.word	0x20000298

08002730 <__malloc_unlock>:
 8002730:	4801      	ldr	r0, [pc, #4]	@ (8002738 <__malloc_unlock+0x8>)
 8002732:	f7ff bf0a 	b.w	800254a <__retarget_lock_release_recursive>
 8002736:	bf00      	nop
 8002738:	20000298 	.word	0x20000298

0800273c <__ssputs_r>:
 800273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	688e      	ldr	r6, [r1, #8]
 8002742:	461f      	mov	r7, r3
 8002744:	42be      	cmp	r6, r7
 8002746:	680b      	ldr	r3, [r1, #0]
 8002748:	4682      	mov	sl, r0
 800274a:	460c      	mov	r4, r1
 800274c:	4690      	mov	r8, r2
 800274e:	d82d      	bhi.n	80027ac <__ssputs_r+0x70>
 8002750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002758:	d026      	beq.n	80027a8 <__ssputs_r+0x6c>
 800275a:	6965      	ldr	r5, [r4, #20]
 800275c:	6909      	ldr	r1, [r1, #16]
 800275e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002762:	eba3 0901 	sub.w	r9, r3, r1
 8002766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800276a:	1c7b      	adds	r3, r7, #1
 800276c:	444b      	add	r3, r9
 800276e:	106d      	asrs	r5, r5, #1
 8002770:	429d      	cmp	r5, r3
 8002772:	bf38      	it	cc
 8002774:	461d      	movcc	r5, r3
 8002776:	0553      	lsls	r3, r2, #21
 8002778:	d527      	bpl.n	80027ca <__ssputs_r+0x8e>
 800277a:	4629      	mov	r1, r5
 800277c:	f7ff ff52 	bl	8002624 <_malloc_r>
 8002780:	4606      	mov	r6, r0
 8002782:	b360      	cbz	r0, 80027de <__ssputs_r+0xa2>
 8002784:	6921      	ldr	r1, [r4, #16]
 8002786:	464a      	mov	r2, r9
 8002788:	f000 fae8 	bl	8002d5c <memcpy>
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002796:	81a3      	strh	r3, [r4, #12]
 8002798:	6126      	str	r6, [r4, #16]
 800279a:	6165      	str	r5, [r4, #20]
 800279c:	444e      	add	r6, r9
 800279e:	eba5 0509 	sub.w	r5, r5, r9
 80027a2:	6026      	str	r6, [r4, #0]
 80027a4:	60a5      	str	r5, [r4, #8]
 80027a6:	463e      	mov	r6, r7
 80027a8:	42be      	cmp	r6, r7
 80027aa:	d900      	bls.n	80027ae <__ssputs_r+0x72>
 80027ac:	463e      	mov	r6, r7
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	4632      	mov	r2, r6
 80027b2:	4641      	mov	r1, r8
 80027b4:	f000 faa8 	bl	8002d08 <memmove>
 80027b8:	68a3      	ldr	r3, [r4, #8]
 80027ba:	1b9b      	subs	r3, r3, r6
 80027bc:	60a3      	str	r3, [r4, #8]
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	4433      	add	r3, r6
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	2000      	movs	r0, #0
 80027c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ca:	462a      	mov	r2, r5
 80027cc:	f000 fad4 	bl	8002d78 <_realloc_r>
 80027d0:	4606      	mov	r6, r0
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d1e0      	bne.n	8002798 <__ssputs_r+0x5c>
 80027d6:	6921      	ldr	r1, [r4, #16]
 80027d8:	4650      	mov	r0, sl
 80027da:	f7ff feb7 	bl	800254c <_free_r>
 80027de:	230c      	movs	r3, #12
 80027e0:	f8ca 3000 	str.w	r3, [sl]
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ea:	81a3      	strh	r3, [r4, #12]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	e7e9      	b.n	80027c6 <__ssputs_r+0x8a>
	...

080027f4 <_svfiprintf_r>:
 80027f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f8:	4698      	mov	r8, r3
 80027fa:	898b      	ldrh	r3, [r1, #12]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	b09d      	sub	sp, #116	@ 0x74
 8002800:	4607      	mov	r7, r0
 8002802:	460d      	mov	r5, r1
 8002804:	4614      	mov	r4, r2
 8002806:	d510      	bpl.n	800282a <_svfiprintf_r+0x36>
 8002808:	690b      	ldr	r3, [r1, #16]
 800280a:	b973      	cbnz	r3, 800282a <_svfiprintf_r+0x36>
 800280c:	2140      	movs	r1, #64	@ 0x40
 800280e:	f7ff ff09 	bl	8002624 <_malloc_r>
 8002812:	6028      	str	r0, [r5, #0]
 8002814:	6128      	str	r0, [r5, #16]
 8002816:	b930      	cbnz	r0, 8002826 <_svfiprintf_r+0x32>
 8002818:	230c      	movs	r3, #12
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	b01d      	add	sp, #116	@ 0x74
 8002822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002826:	2340      	movs	r3, #64	@ 0x40
 8002828:	616b      	str	r3, [r5, #20]
 800282a:	2300      	movs	r3, #0
 800282c:	9309      	str	r3, [sp, #36]	@ 0x24
 800282e:	2320      	movs	r3, #32
 8002830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002834:	f8cd 800c 	str.w	r8, [sp, #12]
 8002838:	2330      	movs	r3, #48	@ 0x30
 800283a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80029d8 <_svfiprintf_r+0x1e4>
 800283e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002842:	f04f 0901 	mov.w	r9, #1
 8002846:	4623      	mov	r3, r4
 8002848:	469a      	mov	sl, r3
 800284a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800284e:	b10a      	cbz	r2, 8002854 <_svfiprintf_r+0x60>
 8002850:	2a25      	cmp	r2, #37	@ 0x25
 8002852:	d1f9      	bne.n	8002848 <_svfiprintf_r+0x54>
 8002854:	ebba 0b04 	subs.w	fp, sl, r4
 8002858:	d00b      	beq.n	8002872 <_svfiprintf_r+0x7e>
 800285a:	465b      	mov	r3, fp
 800285c:	4622      	mov	r2, r4
 800285e:	4629      	mov	r1, r5
 8002860:	4638      	mov	r0, r7
 8002862:	f7ff ff6b 	bl	800273c <__ssputs_r>
 8002866:	3001      	adds	r0, #1
 8002868:	f000 80a7 	beq.w	80029ba <_svfiprintf_r+0x1c6>
 800286c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800286e:	445a      	add	r2, fp
 8002870:	9209      	str	r2, [sp, #36]	@ 0x24
 8002872:	f89a 3000 	ldrb.w	r3, [sl]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 809f 	beq.w	80029ba <_svfiprintf_r+0x1c6>
 800287c:	2300      	movs	r3, #0
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002886:	f10a 0a01 	add.w	sl, sl, #1
 800288a:	9304      	str	r3, [sp, #16]
 800288c:	9307      	str	r3, [sp, #28]
 800288e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002892:	931a      	str	r3, [sp, #104]	@ 0x68
 8002894:	4654      	mov	r4, sl
 8002896:	2205      	movs	r2, #5
 8002898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800289c:	484e      	ldr	r0, [pc, #312]	@ (80029d8 <_svfiprintf_r+0x1e4>)
 800289e:	f7fd fc97 	bl	80001d0 <memchr>
 80028a2:	9a04      	ldr	r2, [sp, #16]
 80028a4:	b9d8      	cbnz	r0, 80028de <_svfiprintf_r+0xea>
 80028a6:	06d0      	lsls	r0, r2, #27
 80028a8:	bf44      	itt	mi
 80028aa:	2320      	movmi	r3, #32
 80028ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028b0:	0711      	lsls	r1, r2, #28
 80028b2:	bf44      	itt	mi
 80028b4:	232b      	movmi	r3, #43	@ 0x2b
 80028b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028ba:	f89a 3000 	ldrb.w	r3, [sl]
 80028be:	2b2a      	cmp	r3, #42	@ 0x2a
 80028c0:	d015      	beq.n	80028ee <_svfiprintf_r+0xfa>
 80028c2:	9a07      	ldr	r2, [sp, #28]
 80028c4:	4654      	mov	r4, sl
 80028c6:	2000      	movs	r0, #0
 80028c8:	f04f 0c0a 	mov.w	ip, #10
 80028cc:	4621      	mov	r1, r4
 80028ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028d2:	3b30      	subs	r3, #48	@ 0x30
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d94b      	bls.n	8002970 <_svfiprintf_r+0x17c>
 80028d8:	b1b0      	cbz	r0, 8002908 <_svfiprintf_r+0x114>
 80028da:	9207      	str	r2, [sp, #28]
 80028dc:	e014      	b.n	8002908 <_svfiprintf_r+0x114>
 80028de:	eba0 0308 	sub.w	r3, r0, r8
 80028e2:	fa09 f303 	lsl.w	r3, r9, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	9304      	str	r3, [sp, #16]
 80028ea:	46a2      	mov	sl, r4
 80028ec:	e7d2      	b.n	8002894 <_svfiprintf_r+0xa0>
 80028ee:	9b03      	ldr	r3, [sp, #12]
 80028f0:	1d19      	adds	r1, r3, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	9103      	str	r1, [sp, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bfbb      	ittet	lt
 80028fa:	425b      	neglt	r3, r3
 80028fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002900:	9307      	strge	r3, [sp, #28]
 8002902:	9307      	strlt	r3, [sp, #28]
 8002904:	bfb8      	it	lt
 8002906:	9204      	strlt	r2, [sp, #16]
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	2b2e      	cmp	r3, #46	@ 0x2e
 800290c:	d10a      	bne.n	8002924 <_svfiprintf_r+0x130>
 800290e:	7863      	ldrb	r3, [r4, #1]
 8002910:	2b2a      	cmp	r3, #42	@ 0x2a
 8002912:	d132      	bne.n	800297a <_svfiprintf_r+0x186>
 8002914:	9b03      	ldr	r3, [sp, #12]
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	9203      	str	r2, [sp, #12]
 800291c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002920:	3402      	adds	r4, #2
 8002922:	9305      	str	r3, [sp, #20]
 8002924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80029e8 <_svfiprintf_r+0x1f4>
 8002928:	7821      	ldrb	r1, [r4, #0]
 800292a:	2203      	movs	r2, #3
 800292c:	4650      	mov	r0, sl
 800292e:	f7fd fc4f 	bl	80001d0 <memchr>
 8002932:	b138      	cbz	r0, 8002944 <_svfiprintf_r+0x150>
 8002934:	9b04      	ldr	r3, [sp, #16]
 8002936:	eba0 000a 	sub.w	r0, r0, sl
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	4082      	lsls	r2, r0
 800293e:	4313      	orrs	r3, r2
 8002940:	3401      	adds	r4, #1
 8002942:	9304      	str	r3, [sp, #16]
 8002944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002948:	4824      	ldr	r0, [pc, #144]	@ (80029dc <_svfiprintf_r+0x1e8>)
 800294a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800294e:	2206      	movs	r2, #6
 8002950:	f7fd fc3e 	bl	80001d0 <memchr>
 8002954:	2800      	cmp	r0, #0
 8002956:	d036      	beq.n	80029c6 <_svfiprintf_r+0x1d2>
 8002958:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <_svfiprintf_r+0x1ec>)
 800295a:	bb1b      	cbnz	r3, 80029a4 <_svfiprintf_r+0x1b0>
 800295c:	9b03      	ldr	r3, [sp, #12]
 800295e:	3307      	adds	r3, #7
 8002960:	f023 0307 	bic.w	r3, r3, #7
 8002964:	3308      	adds	r3, #8
 8002966:	9303      	str	r3, [sp, #12]
 8002968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800296a:	4433      	add	r3, r6
 800296c:	9309      	str	r3, [sp, #36]	@ 0x24
 800296e:	e76a      	b.n	8002846 <_svfiprintf_r+0x52>
 8002970:	fb0c 3202 	mla	r2, ip, r2, r3
 8002974:	460c      	mov	r4, r1
 8002976:	2001      	movs	r0, #1
 8002978:	e7a8      	b.n	80028cc <_svfiprintf_r+0xd8>
 800297a:	2300      	movs	r3, #0
 800297c:	3401      	adds	r4, #1
 800297e:	9305      	str	r3, [sp, #20]
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 0c0a 	mov.w	ip, #10
 8002986:	4620      	mov	r0, r4
 8002988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800298c:	3a30      	subs	r2, #48	@ 0x30
 800298e:	2a09      	cmp	r2, #9
 8002990:	d903      	bls.n	800299a <_svfiprintf_r+0x1a6>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0c6      	beq.n	8002924 <_svfiprintf_r+0x130>
 8002996:	9105      	str	r1, [sp, #20]
 8002998:	e7c4      	b.n	8002924 <_svfiprintf_r+0x130>
 800299a:	fb0c 2101 	mla	r1, ip, r1, r2
 800299e:	4604      	mov	r4, r0
 80029a0:	2301      	movs	r3, #1
 80029a2:	e7f0      	b.n	8002986 <_svfiprintf_r+0x192>
 80029a4:	ab03      	add	r3, sp, #12
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	462a      	mov	r2, r5
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <_svfiprintf_r+0x1f0>)
 80029ac:	a904      	add	r1, sp, #16
 80029ae:	4638      	mov	r0, r7
 80029b0:	f3af 8000 	nop.w
 80029b4:	1c42      	adds	r2, r0, #1
 80029b6:	4606      	mov	r6, r0
 80029b8:	d1d6      	bne.n	8002968 <_svfiprintf_r+0x174>
 80029ba:	89ab      	ldrh	r3, [r5, #12]
 80029bc:	065b      	lsls	r3, r3, #25
 80029be:	f53f af2d 	bmi.w	800281c <_svfiprintf_r+0x28>
 80029c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029c4:	e72c      	b.n	8002820 <_svfiprintf_r+0x2c>
 80029c6:	ab03      	add	r3, sp, #12
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	462a      	mov	r2, r5
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <_svfiprintf_r+0x1f0>)
 80029ce:	a904      	add	r1, sp, #16
 80029d0:	4638      	mov	r0, r7
 80029d2:	f000 f879 	bl	8002ac8 <_printf_i>
 80029d6:	e7ed      	b.n	80029b4 <_svfiprintf_r+0x1c0>
 80029d8:	08002e67 	.word	0x08002e67
 80029dc:	08002e71 	.word	0x08002e71
 80029e0:	00000000 	.word	0x00000000
 80029e4:	0800273d 	.word	0x0800273d
 80029e8:	08002e6d 	.word	0x08002e6d

080029ec <_printf_common>:
 80029ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f0:	4616      	mov	r6, r2
 80029f2:	4698      	mov	r8, r3
 80029f4:	688a      	ldr	r2, [r1, #8]
 80029f6:	690b      	ldr	r3, [r1, #16]
 80029f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bfb8      	it	lt
 8002a00:	4613      	movlt	r3, r2
 8002a02:	6033      	str	r3, [r6, #0]
 8002a04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a08:	4607      	mov	r7, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	b10a      	cbz	r2, 8002a12 <_printf_common+0x26>
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6033      	str	r3, [r6, #0]
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	0699      	lsls	r1, r3, #26
 8002a16:	bf42      	ittt	mi
 8002a18:	6833      	ldrmi	r3, [r6, #0]
 8002a1a:	3302      	addmi	r3, #2
 8002a1c:	6033      	strmi	r3, [r6, #0]
 8002a1e:	6825      	ldr	r5, [r4, #0]
 8002a20:	f015 0506 	ands.w	r5, r5, #6
 8002a24:	d106      	bne.n	8002a34 <_printf_common+0x48>
 8002a26:	f104 0a19 	add.w	sl, r4, #25
 8002a2a:	68e3      	ldr	r3, [r4, #12]
 8002a2c:	6832      	ldr	r2, [r6, #0]
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	42ab      	cmp	r3, r5
 8002a32:	dc26      	bgt.n	8002a82 <_printf_common+0x96>
 8002a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	3b00      	subs	r3, #0
 8002a3c:	bf18      	it	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	0692      	lsls	r2, r2, #26
 8002a42:	d42b      	bmi.n	8002a9c <_printf_common+0xb0>
 8002a44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a48:	4641      	mov	r1, r8
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	47c8      	blx	r9
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d01e      	beq.n	8002a90 <_printf_common+0xa4>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	6922      	ldr	r2, [r4, #16]
 8002a56:	f003 0306 	and.w	r3, r3, #6
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf02      	ittt	eq
 8002a5e:	68e5      	ldreq	r5, [r4, #12]
 8002a60:	6833      	ldreq	r3, [r6, #0]
 8002a62:	1aed      	subeq	r5, r5, r3
 8002a64:	68a3      	ldr	r3, [r4, #8]
 8002a66:	bf0c      	ite	eq
 8002a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a6c:	2500      	movne	r5, #0
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	bfc4      	itt	gt
 8002a72:	1a9b      	subgt	r3, r3, r2
 8002a74:	18ed      	addgt	r5, r5, r3
 8002a76:	2600      	movs	r6, #0
 8002a78:	341a      	adds	r4, #26
 8002a7a:	42b5      	cmp	r5, r6
 8002a7c:	d11a      	bne.n	8002ab4 <_printf_common+0xc8>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e008      	b.n	8002a94 <_printf_common+0xa8>
 8002a82:	2301      	movs	r3, #1
 8002a84:	4652      	mov	r2, sl
 8002a86:	4641      	mov	r1, r8
 8002a88:	4638      	mov	r0, r7
 8002a8a:	47c8      	blx	r9
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d103      	bne.n	8002a98 <_printf_common+0xac>
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a98:	3501      	adds	r5, #1
 8002a9a:	e7c6      	b.n	8002a2a <_printf_common+0x3e>
 8002a9c:	18e1      	adds	r1, r4, r3
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	2030      	movs	r0, #48	@ 0x30
 8002aa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002aa6:	4422      	add	r2, r4
 8002aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	e7c7      	b.n	8002a44 <_printf_common+0x58>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4641      	mov	r1, r8
 8002aba:	4638      	mov	r0, r7
 8002abc:	47c8      	blx	r9
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d0e6      	beq.n	8002a90 <_printf_common+0xa4>
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7d9      	b.n	8002a7a <_printf_common+0x8e>
	...

08002ac8 <_printf_i>:
 8002ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002acc:	7e0f      	ldrb	r7, [r1, #24]
 8002ace:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ad0:	2f78      	cmp	r7, #120	@ 0x78
 8002ad2:	4691      	mov	r9, r2
 8002ad4:	4680      	mov	r8, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	469a      	mov	sl, r3
 8002ada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ade:	d807      	bhi.n	8002af0 <_printf_i+0x28>
 8002ae0:	2f62      	cmp	r7, #98	@ 0x62
 8002ae2:	d80a      	bhi.n	8002afa <_printf_i+0x32>
 8002ae4:	2f00      	cmp	r7, #0
 8002ae6:	f000 80d2 	beq.w	8002c8e <_printf_i+0x1c6>
 8002aea:	2f58      	cmp	r7, #88	@ 0x58
 8002aec:	f000 80b9 	beq.w	8002c62 <_printf_i+0x19a>
 8002af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002af4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002af8:	e03a      	b.n	8002b70 <_printf_i+0xa8>
 8002afa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002afe:	2b15      	cmp	r3, #21
 8002b00:	d8f6      	bhi.n	8002af0 <_printf_i+0x28>
 8002b02:	a101      	add	r1, pc, #4	@ (adr r1, 8002b08 <_printf_i+0x40>)
 8002b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b75 	.word	0x08002b75
 8002b10:	08002af1 	.word	0x08002af1
 8002b14:	08002af1 	.word	0x08002af1
 8002b18:	08002af1 	.word	0x08002af1
 8002b1c:	08002af1 	.word	0x08002af1
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002af1 	.word	0x08002af1
 8002b28:	08002af1 	.word	0x08002af1
 8002b2c:	08002af1 	.word	0x08002af1
 8002b30:	08002af1 	.word	0x08002af1
 8002b34:	08002c75 	.word	0x08002c75
 8002b38:	08002b9f 	.word	0x08002b9f
 8002b3c:	08002c2f 	.word	0x08002c2f
 8002b40:	08002af1 	.word	0x08002af1
 8002b44:	08002af1 	.word	0x08002af1
 8002b48:	08002c97 	.word	0x08002c97
 8002b4c:	08002af1 	.word	0x08002af1
 8002b50:	08002b9f 	.word	0x08002b9f
 8002b54:	08002af1 	.word	0x08002af1
 8002b58:	08002af1 	.word	0x08002af1
 8002b5c:	08002c37 	.word	0x08002c37
 8002b60:	6833      	ldr	r3, [r6, #0]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6032      	str	r2, [r6, #0]
 8002b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b70:	2301      	movs	r3, #1
 8002b72:	e09d      	b.n	8002cb0 <_printf_i+0x1e8>
 8002b74:	6833      	ldr	r3, [r6, #0]
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	1d19      	adds	r1, r3, #4
 8002b7a:	6031      	str	r1, [r6, #0]
 8002b7c:	0606      	lsls	r6, r0, #24
 8002b7e:	d501      	bpl.n	8002b84 <_printf_i+0xbc>
 8002b80:	681d      	ldr	r5, [r3, #0]
 8002b82:	e003      	b.n	8002b8c <_printf_i+0xc4>
 8002b84:	0645      	lsls	r5, r0, #25
 8002b86:	d5fb      	bpl.n	8002b80 <_printf_i+0xb8>
 8002b88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b8c:	2d00      	cmp	r5, #0
 8002b8e:	da03      	bge.n	8002b98 <_printf_i+0xd0>
 8002b90:	232d      	movs	r3, #45	@ 0x2d
 8002b92:	426d      	negs	r5, r5
 8002b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b98:	4859      	ldr	r0, [pc, #356]	@ (8002d00 <_printf_i+0x238>)
 8002b9a:	230a      	movs	r3, #10
 8002b9c:	e011      	b.n	8002bc2 <_printf_i+0xfa>
 8002b9e:	6821      	ldr	r1, [r4, #0]
 8002ba0:	6833      	ldr	r3, [r6, #0]
 8002ba2:	0608      	lsls	r0, r1, #24
 8002ba4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ba8:	d402      	bmi.n	8002bb0 <_printf_i+0xe8>
 8002baa:	0649      	lsls	r1, r1, #25
 8002bac:	bf48      	it	mi
 8002bae:	b2ad      	uxthmi	r5, r5
 8002bb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bb2:	4853      	ldr	r0, [pc, #332]	@ (8002d00 <_printf_i+0x238>)
 8002bb4:	6033      	str	r3, [r6, #0]
 8002bb6:	bf14      	ite	ne
 8002bb8:	230a      	movne	r3, #10
 8002bba:	2308      	moveq	r3, #8
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bc2:	6866      	ldr	r6, [r4, #4]
 8002bc4:	60a6      	str	r6, [r4, #8]
 8002bc6:	2e00      	cmp	r6, #0
 8002bc8:	bfa2      	ittt	ge
 8002bca:	6821      	ldrge	r1, [r4, #0]
 8002bcc:	f021 0104 	bicge.w	r1, r1, #4
 8002bd0:	6021      	strge	r1, [r4, #0]
 8002bd2:	b90d      	cbnz	r5, 8002bd8 <_printf_i+0x110>
 8002bd4:	2e00      	cmp	r6, #0
 8002bd6:	d04b      	beq.n	8002c70 <_printf_i+0x1a8>
 8002bd8:	4616      	mov	r6, r2
 8002bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bde:	fb03 5711 	mls	r7, r3, r1, r5
 8002be2:	5dc7      	ldrb	r7, [r0, r7]
 8002be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002be8:	462f      	mov	r7, r5
 8002bea:	42bb      	cmp	r3, r7
 8002bec:	460d      	mov	r5, r1
 8002bee:	d9f4      	bls.n	8002bda <_printf_i+0x112>
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d10b      	bne.n	8002c0c <_printf_i+0x144>
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	07df      	lsls	r7, r3, #31
 8002bf8:	d508      	bpl.n	8002c0c <_printf_i+0x144>
 8002bfa:	6923      	ldr	r3, [r4, #16]
 8002bfc:	6861      	ldr	r1, [r4, #4]
 8002bfe:	4299      	cmp	r1, r3
 8002c00:	bfde      	ittt	le
 8002c02:	2330      	movle	r3, #48	@ 0x30
 8002c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c0c:	1b92      	subs	r2, r2, r6
 8002c0e:	6122      	str	r2, [r4, #16]
 8002c10:	f8cd a000 	str.w	sl, [sp]
 8002c14:	464b      	mov	r3, r9
 8002c16:	aa03      	add	r2, sp, #12
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f7ff fee6 	bl	80029ec <_printf_common>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d14a      	bne.n	8002cba <_printf_i+0x1f2>
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	b004      	add	sp, #16
 8002c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	f043 0320 	orr.w	r3, r3, #32
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	4833      	ldr	r0, [pc, #204]	@ (8002d04 <_printf_i+0x23c>)
 8002c38:	2778      	movs	r7, #120	@ 0x78
 8002c3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	6831      	ldr	r1, [r6, #0]
 8002c42:	061f      	lsls	r7, r3, #24
 8002c44:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c48:	d402      	bmi.n	8002c50 <_printf_i+0x188>
 8002c4a:	065f      	lsls	r7, r3, #25
 8002c4c:	bf48      	it	mi
 8002c4e:	b2ad      	uxthmi	r5, r5
 8002c50:	6031      	str	r1, [r6, #0]
 8002c52:	07d9      	lsls	r1, r3, #31
 8002c54:	bf44      	itt	mi
 8002c56:	f043 0320 	orrmi.w	r3, r3, #32
 8002c5a:	6023      	strmi	r3, [r4, #0]
 8002c5c:	b11d      	cbz	r5, 8002c66 <_printf_i+0x19e>
 8002c5e:	2310      	movs	r3, #16
 8002c60:	e7ac      	b.n	8002bbc <_printf_i+0xf4>
 8002c62:	4827      	ldr	r0, [pc, #156]	@ (8002d00 <_printf_i+0x238>)
 8002c64:	e7e9      	b.n	8002c3a <_printf_i+0x172>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	f023 0320 	bic.w	r3, r3, #32
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	e7f6      	b.n	8002c5e <_printf_i+0x196>
 8002c70:	4616      	mov	r6, r2
 8002c72:	e7bd      	b.n	8002bf0 <_printf_i+0x128>
 8002c74:	6833      	ldr	r3, [r6, #0]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	6961      	ldr	r1, [r4, #20]
 8002c7a:	1d18      	adds	r0, r3, #4
 8002c7c:	6030      	str	r0, [r6, #0]
 8002c7e:	062e      	lsls	r6, r5, #24
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	d501      	bpl.n	8002c88 <_printf_i+0x1c0>
 8002c84:	6019      	str	r1, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <_printf_i+0x1c6>
 8002c88:	0668      	lsls	r0, r5, #25
 8002c8a:	d5fb      	bpl.n	8002c84 <_printf_i+0x1bc>
 8002c8c:	8019      	strh	r1, [r3, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	4616      	mov	r6, r2
 8002c94:	e7bc      	b.n	8002c10 <_printf_i+0x148>
 8002c96:	6833      	ldr	r3, [r6, #0]
 8002c98:	1d1a      	adds	r2, r3, #4
 8002c9a:	6032      	str	r2, [r6, #0]
 8002c9c:	681e      	ldr	r6, [r3, #0]
 8002c9e:	6862      	ldr	r2, [r4, #4]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7fd fa94 	bl	80001d0 <memchr>
 8002ca8:	b108      	cbz	r0, 8002cae <_printf_i+0x1e6>
 8002caa:	1b80      	subs	r0, r0, r6
 8002cac:	6060      	str	r0, [r4, #4]
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cb8:	e7aa      	b.n	8002c10 <_printf_i+0x148>
 8002cba:	6923      	ldr	r3, [r4, #16]
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4640      	mov	r0, r8
 8002cc2:	47d0      	blx	sl
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d0ad      	beq.n	8002c24 <_printf_i+0x15c>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	079b      	lsls	r3, r3, #30
 8002ccc:	d413      	bmi.n	8002cf6 <_printf_i+0x22e>
 8002cce:	68e0      	ldr	r0, [r4, #12]
 8002cd0:	9b03      	ldr	r3, [sp, #12]
 8002cd2:	4298      	cmp	r0, r3
 8002cd4:	bfb8      	it	lt
 8002cd6:	4618      	movlt	r0, r3
 8002cd8:	e7a6      	b.n	8002c28 <_printf_i+0x160>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4632      	mov	r2, r6
 8002cde:	4649      	mov	r1, r9
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	47d0      	blx	sl
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d09d      	beq.n	8002c24 <_printf_i+0x15c>
 8002ce8:	3501      	adds	r5, #1
 8002cea:	68e3      	ldr	r3, [r4, #12]
 8002cec:	9903      	ldr	r1, [sp, #12]
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	42ab      	cmp	r3, r5
 8002cf2:	dcf2      	bgt.n	8002cda <_printf_i+0x212>
 8002cf4:	e7eb      	b.n	8002cce <_printf_i+0x206>
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	f104 0619 	add.w	r6, r4, #25
 8002cfc:	e7f5      	b.n	8002cea <_printf_i+0x222>
 8002cfe:	bf00      	nop
 8002d00:	08002e78 	.word	0x08002e78
 8002d04:	08002e89 	.word	0x08002e89

08002d08 <memmove>:
 8002d08:	4288      	cmp	r0, r1
 8002d0a:	b510      	push	{r4, lr}
 8002d0c:	eb01 0402 	add.w	r4, r1, r2
 8002d10:	d902      	bls.n	8002d18 <memmove+0x10>
 8002d12:	4284      	cmp	r4, r0
 8002d14:	4623      	mov	r3, r4
 8002d16:	d807      	bhi.n	8002d28 <memmove+0x20>
 8002d18:	1e43      	subs	r3, r0, #1
 8002d1a:	42a1      	cmp	r1, r4
 8002d1c:	d008      	beq.n	8002d30 <memmove+0x28>
 8002d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d26:	e7f8      	b.n	8002d1a <memmove+0x12>
 8002d28:	4402      	add	r2, r0
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	428a      	cmp	r2, r1
 8002d2e:	d100      	bne.n	8002d32 <memmove+0x2a>
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d3a:	e7f7      	b.n	8002d2c <memmove+0x24>

08002d3c <_sbrk_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4d06      	ldr	r5, [pc, #24]	@ (8002d58 <_sbrk_r+0x1c>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	4604      	mov	r4, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	f7fe f9ca 	bl	80010e0 <_sbrk>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_sbrk_r+0x1a>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_sbrk_r+0x1a>
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	20000294 	.word	0x20000294

08002d5c <memcpy>:
 8002d5c:	440a      	add	r2, r1
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d64:	d100      	bne.n	8002d68 <memcpy+0xc>
 8002d66:	4770      	bx	lr
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d72:	4291      	cmp	r1, r2
 8002d74:	d1f9      	bne.n	8002d6a <memcpy+0xe>
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <_realloc_r>:
 8002d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d7c:	4680      	mov	r8, r0
 8002d7e:	4615      	mov	r5, r2
 8002d80:	460c      	mov	r4, r1
 8002d82:	b921      	cbnz	r1, 8002d8e <_realloc_r+0x16>
 8002d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d88:	4611      	mov	r1, r2
 8002d8a:	f7ff bc4b 	b.w	8002624 <_malloc_r>
 8002d8e:	b92a      	cbnz	r2, 8002d9c <_realloc_r+0x24>
 8002d90:	f7ff fbdc 	bl	800254c <_free_r>
 8002d94:	2400      	movs	r4, #0
 8002d96:	4620      	mov	r0, r4
 8002d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9c:	f000 f81a 	bl	8002dd4 <_malloc_usable_size_r>
 8002da0:	4285      	cmp	r5, r0
 8002da2:	4606      	mov	r6, r0
 8002da4:	d802      	bhi.n	8002dac <_realloc_r+0x34>
 8002da6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002daa:	d8f4      	bhi.n	8002d96 <_realloc_r+0x1e>
 8002dac:	4629      	mov	r1, r5
 8002dae:	4640      	mov	r0, r8
 8002db0:	f7ff fc38 	bl	8002624 <_malloc_r>
 8002db4:	4607      	mov	r7, r0
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d0ec      	beq.n	8002d94 <_realloc_r+0x1c>
 8002dba:	42b5      	cmp	r5, r6
 8002dbc:	462a      	mov	r2, r5
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	bf28      	it	cs
 8002dc2:	4632      	movcs	r2, r6
 8002dc4:	f7ff ffca 	bl	8002d5c <memcpy>
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f7ff fbbe 	bl	800254c <_free_r>
 8002dd0:	463c      	mov	r4, r7
 8002dd2:	e7e0      	b.n	8002d96 <_realloc_r+0x1e>

08002dd4 <_malloc_usable_size_r>:
 8002dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd8:	1f18      	subs	r0, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bfbc      	itt	lt
 8002dde:	580b      	ldrlt	r3, [r1, r0]
 8002de0:	18c0      	addlt	r0, r0, r3
 8002de2:	4770      	bx	lr

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
