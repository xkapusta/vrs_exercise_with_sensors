
vrs_exercise_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006398  08006398  00007398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006790  08006790  00008258  2**0
                  CONTENTS
  4 .ARM          00000008  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006798  08006798  00008258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800679c  0800679c  0000779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  080067a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008258  2**0
                  CONTENTS
 10 .bss          00000244  20000258  20000258  00008258  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00008258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c2a  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c80  00000000  00000000  0000eeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  00010b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060d  00000000  00000000  000113a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017afa  00000000  00000000  000119ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009163  00000000  00000000  000294a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077be1  00000000  00000000  0003260a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa1eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003318  00000000  00000000  000aa230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000ad548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800637c 	.word	0x0800637c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800637c 	.word	0x0800637c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	@ (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ffe3 	bl	8000cbc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf6:	f7ff ff57 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffa7 	bl	8000c54 <NVIC_EncodePriority>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f7ff ff78 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d10:	2010      	movs	r0, #16
 8000d12:	f7ff ff57 	bl	8000bc4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff97 	bl	8000c54 <NVIC_EncodePriority>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2011      	movs	r0, #17
 8000d2c:	f7ff ff68 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d30:	2011      	movs	r0, #17
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LL_AHB1_GRP1_EnableClock>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d70:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000d74:	f7ff ffe2 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d78:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000d7c:	f7ff ffde 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <__NVIC_GetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	@ 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f0a:	f023 0306 	bic.w	r3, r3, #6
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	60da      	str	r2, [r3, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60da      	str	r2, [r3, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d101      	bne.n	8000f5e <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d101      	bne.n	8000f84 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b20      	cmp	r3, #32
 8000fa4:	d101      	bne.n	8000faa <LL_I2C_IsActiveFlag_STOP+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fc8:	2b40      	cmp	r3, #64	@ 0x40
 8000fca:	d101      	bne.n	8000fd0 <LL_I2C_IsActiveFlag_TC+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_I2C_IsActiveFlag_TC+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f043 0220 	orr.w	r2, r3, #32
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	61da      	str	r2, [r3, #28]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR2          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800105a:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001064:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	4313      	orrs	r3, r2
 800106e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001072:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	0d5b      	lsrs	r3, r3, #21
 800107c:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <LL_I2C_HandleTransfer+0x5c>)
 8001082:	430b      	orrs	r3, r1
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	431a      	orrs	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	03ff7bff 	.word	0x03ff7bff

080010a0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_AHB1_GRP1_EnableClock>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4013      	ands	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	4907      	ldr	r1, [pc, #28]	@ (8001134 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4313      	orrs	r3, r2
 800111a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <LL_APB1_GRP1_EnableClock+0x2c>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4013      	ands	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000

08001138 <MX_I2C1_Init>:
uint8_t data_recive_multy[3];
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	@ 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001162:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001166:	f7ff ffb7 	bl	80010d8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	@ 0xc0
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001176:	2301      	movs	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800117e:	2304      	movs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4821      	ldr	r0, [pc, #132]	@ (800120c <MX_I2C1_Init+0xd4>)
 8001188:	f001 fa5e 	bl	8002648 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800118c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001190:	f7ff ffba 	bl	8001108 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001194:	f7ff fdf6 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8001198:	4603      	mov	r3, r0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fe46 	bl	8000e30 <NVIC_EncodePriority>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	201f      	movs	r0, #31
 80011aa:	f7ff fe17 	bl	8000ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ae:	201f      	movs	r0, #31
 80011b0:	f7ff fdf6 	bl	8000da0 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80011b4:	4816      	ldr	r0, [pc, #88]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011b6:	f7ff ff22 	bl	8000ffe <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80011ba:	4815      	ldr	r0, [pc, #84]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011bc:	f7ff feb3 	bl	8000f26 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80011c0:	4813      	ldr	r0, [pc, #76]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011c2:	f7ff fe88 	bl	8000ed6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011c6:	4812      	ldr	r0, [pc, #72]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011c8:	f7ff fe75 	bl	8000eb6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_I2C1_Init+0xdc>)
 80011d2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4808      	ldr	r0, [pc, #32]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011f0:	f001 fb3d 	bl	800286e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_I2C1_Init+0xd8>)
 80011fa:	f7ff fe7c 	bl	8000ef6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_I2C1_Init+0xd8>)
 8001200:	f7ff fe49 	bl	8000e96 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3738      	adds	r7, #56	@ 0x38
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	48000400 	.word	0x48000400
 8001210:	40005400 	.word	0x40005400
 8001214:	2000090e 	.word	0x2000090e

08001218 <i2c_read>:

uint32_t i2c_read(uint8_t slave_address, uint8_t register_address, uint8_t number_of_registers){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
	data_recive=0;
 800122a:	4b63      	ldr	r3, [pc, #396]	@ (80013b8 <i2c_read+0x1a0>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

	if(number_of_registers == 2){
 8001230:	797b      	ldrb	r3, [r7, #5]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d106      	bne.n	8001244 <i2c_read+0x2c>
		data_recive_16=0;
 8001236:	4b61      	ldr	r3, [pc, #388]	@ (80013bc <i2c_read+0x1a4>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
		register_address |= 0x80;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001242:	71bb      	strb	r3, [r7, #6]
	}
	if(number_of_registers == 3){
 8001244:	797b      	ldrb	r3, [r7, #5]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d106      	bne.n	8001258 <i2c_read+0x40>
		data_recive_32=0;
 800124a:	4b5d      	ldr	r3, [pc, #372]	@ (80013c0 <i2c_read+0x1a8>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
		register_address |= 0x80;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001256:	71bb      	strb	r3, [r7, #6]
	}


	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001258:	79f9      	ldrb	r1, [r7, #7]
 800125a:	4b5a      	ldr	r3, [pc, #360]	@ (80013c4 <i2c_read+0x1ac>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2200      	movs	r2, #0
 8001266:	4858      	ldr	r0, [pc, #352]	@ (80013c8 <i2c_read+0x1b0>)
 8001268:	f7ff feea 	bl	8001040 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 800126c:	bf00      	nop
 800126e:	4856      	ldr	r0, [pc, #344]	@ (80013c8 <i2c_read+0x1b0>)
 8001270:	f7ff fe69 	bl	8000f46 <LL_I2C_IsActiveFlag_TXIS>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f9      	beq.n	800126e <i2c_read+0x56>


	LL_I2C_TransmitData8(I2C1, register_address);
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	4619      	mov	r1, r3
 800127e:	4852      	ldr	r0, [pc, #328]	@ (80013c8 <i2c_read+0x1b0>)
 8001280:	f7ff ff1b 	bl	80010ba <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)) {}
 8001284:	bf00      	nop
 8001286:	4850      	ldr	r0, [pc, #320]	@ (80013c8 <i2c_read+0x1b0>)
 8001288:	f7ff fe96 	bl	8000fb8 <LL_I2C_IsActiveFlag_TC>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f9      	beq.n	8001286 <i2c_read+0x6e>


	if(number_of_registers <= 1){
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d80a      	bhi.n	80012ae <i2c_read+0x96>
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001298:	79f9      	ldrb	r1, [r7, #7]
 800129a:	4b4c      	ldr	r3, [pc, #304]	@ (80013cc <i2c_read+0x1b4>)
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2200      	movs	r2, #0
 80012a8:	4847      	ldr	r0, [pc, #284]	@ (80013c8 <i2c_read+0x1b0>)
 80012aa:	f7ff fec9 	bl	8001040 <LL_I2C_HandleTransfer>
	}
	if(number_of_registers > 1){
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d909      	bls.n	80012c8 <i2c_read+0xb0>
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, number_of_registers, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_READ);
 80012b4:	79f9      	ldrb	r1, [r7, #7]
 80012b6:	797b      	ldrb	r3, [r7, #5]
 80012b8:	4a44      	ldr	r2, [pc, #272]	@ (80013cc <i2c_read+0x1b4>)
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	4841      	ldr	r0, [pc, #260]	@ (80013c8 <i2c_read+0x1b0>)
 80012c4:	f7ff febc 	bl	8001040 <LL_I2C_HandleTransfer>
	}
	while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {}
 80012c8:	bf00      	nop
 80012ca:	483f      	ldr	r0, [pc, #252]	@ (80013c8 <i2c_read+0x1b0>)
 80012cc:	f7ff fe4e 	bl	8000f6c <LL_I2C_IsActiveFlag_RXNE>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f9      	beq.n	80012ca <i2c_read+0xb2>


	if(number_of_registers > 1){
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d923      	bls.n	8001324 <i2c_read+0x10c>
		for(int i=0; i<number_of_registers;i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e01b      	b.n	800131a <i2c_read+0x102>
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
				if (LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80012e2:	4839      	ldr	r0, [pc, #228]	@ (80013c8 <i2c_read+0x1b0>)
 80012e4:	f7ff fe55 	bl	8000f92 <LL_I2C_IsActiveFlag_STOP>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <i2c_read+0xdc>
					LL_I2C_ClearFlag_STOP(I2C1);
 80012ee:	4836      	ldr	r0, [pc, #216]	@ (80013c8 <i2c_read+0x1b0>)
 80012f0:	f7ff fe75 	bl	8000fde <LL_I2C_ClearFlag_STOP>
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 80012f4:	4834      	ldr	r0, [pc, #208]	@ (80013c8 <i2c_read+0x1b0>)
 80012f6:	f7ff fe39 	bl	8000f6c <LL_I2C_IsActiveFlag_RXNE>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <i2c_read+0xca>
				}
			}
			data_recive_multy[i] = LL_I2C_ReceiveData8(I2C1);
 8001300:	4831      	ldr	r0, [pc, #196]	@ (80013c8 <i2c_read+0x1b0>)
 8001302:	f7ff fecd 	bl	80010a0 <LL_I2C_ReceiveData8>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	4a31      	ldr	r2, [pc, #196]	@ (80013d0 <i2c_read+0x1b8>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<number_of_registers;i++){
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbe8      	blt.n	80012f4 <i2c_read+0xdc>
 8001322:	e00d      	b.n	8001340 <i2c_read+0x128>
			//while (!LL_I2C_IsActiveFlag_(I2C1)) {}
		}
	}else{
		data_recive = LL_I2C_ReceiveData8(I2C1);
 8001324:	4828      	ldr	r0, [pc, #160]	@ (80013c8 <i2c_read+0x1b0>)
 8001326:	f7ff febb 	bl	80010a0 <LL_I2C_ReceiveData8>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <i2c_read+0x1a0>)
 8001330:	701a      	strb	r2, [r3, #0]
		while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {}
 8001332:	bf00      	nop
 8001334:	4824      	ldr	r0, [pc, #144]	@ (80013c8 <i2c_read+0x1b0>)
 8001336:	f7ff fe2c 	bl	8000f92 <LL_I2C_IsActiveFlag_STOP>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f9      	beq.n	8001334 <i2c_read+0x11c>
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001340:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <i2c_read+0x1b0>)
 8001342:	f7ff fe4c 	bl	8000fde <LL_I2C_ClearFlag_STOP>


	if(number_of_registers == 1){
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <i2c_read+0x142>
		data_recive_8 = data_recive;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <i2c_read+0x1a0>)
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <i2c_read+0x1bc>)
 8001352:	701a      	strb	r2, [r3, #0]
		return data_recive_8;
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <i2c_read+0x1bc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	e02a      	b.n	80013b0 <i2c_read+0x198>
	}
	if(number_of_registers == 2){
 800135a:	797b      	ldrb	r3, [r7, #5]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d10e      	bne.n	800137e <i2c_read+0x166>
		data_recive_16 = (data_recive_multy[1] << 8) | data_recive_multy[0];
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <i2c_read+0x1b8>)
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <i2c_read+0x1b8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <i2c_read+0x1a4>)
 8001376:	801a      	strh	r2, [r3, #0]
		return data_recive_16;
 8001378:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <i2c_read+0x1a4>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	e018      	b.n	80013b0 <i2c_read+0x198>
	}
	if(number_of_registers == 3){
 800137e:	797b      	ldrb	r3, [r7, #5]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d10f      	bne.n	80013a4 <i2c_read+0x18c>
		data_recive_32 = (data_recive_multy[2] << 16) | (data_recive_multy[1] << 8) | data_recive_multy[0];
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <i2c_read+0x1b8>)
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <i2c_read+0x1b8>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	4313      	orrs	r3, r2
 8001392:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <i2c_read+0x1b8>)
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <i2c_read+0x1a8>)
 800139c:	601a      	str	r2, [r3, #0]
		return data_recive_32;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <i2c_read+0x1a8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	e005      	b.n	80013b0 <i2c_read+0x198>
	}
	if(number_of_registers == 0){
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <i2c_read+0x198>
		return data_recive;
 80013aa:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <i2c_read+0x1a0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	e7ff      	b.n	80013b0 <i2c_read+0x198>
	}
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000274 	.word	0x20000274
 80013bc:	20000276 	.word	0x20000276
 80013c0:	20000278 	.word	0x20000278
 80013c4:	80002000 	.word	0x80002000
 80013c8:	40005400 	.word	0x40005400
 80013cc:	80002400 	.word	0x80002400
 80013d0:	2000027c 	.word	0x2000027c
 80013d4:	20000275 	.word	0x20000275

080013d8 <i2c_write>:

uint32_t i2c_write(uint8_t slave_address, uint8_t register_address, uint8_t data, uint8_t number_of_registers){
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	4603      	mov	r3, r0
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	460b      	mov	r3, r1
 80013f0:	717b      	strb	r3, [r7, #5]
 80013f2:	4613      	mov	r3, r2
 80013f4:	713b      	strb	r3, [r7, #4]

	if(number_of_registers == 2){
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d103      	bne.n	8001404 <i2c_write+0x2c>
		register_address |= 0x80;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001402:	71bb      	strb	r3, [r7, #6]
	}
	if(number_of_registers == 3){
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d103      	bne.n	8001412 <i2c_write+0x3a>
		register_address |= 0x80;
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001410:	71bb      	strb	r3, [r7, #6]
	}


	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001412:	79f9      	ldrb	r1, [r7, #7]
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <i2c_write+0xb0>)
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	2300      	movs	r3, #0
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2302      	movs	r3, #2
 800141e:	2200      	movs	r2, #0
 8001420:	481a      	ldr	r0, [pc, #104]	@ (800148c <i2c_write+0xb4>)
 8001422:	f7ff fe0d 	bl	8001040 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 8001426:	bf00      	nop
 8001428:	4818      	ldr	r0, [pc, #96]	@ (800148c <i2c_write+0xb4>)
 800142a:	f7ff fd8c 	bl	8000f46 <LL_I2C_IsActiveFlag_TXIS>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <i2c_write+0x50>

	LL_I2C_TransmitData8(I2C1, register_address);
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	4619      	mov	r1, r3
 8001438:	4814      	ldr	r0, [pc, #80]	@ (800148c <i2c_write+0xb4>)
 800143a:	f7ff fe3e 	bl	80010ba <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {}
 800143e:	bf00      	nop
 8001440:	4812      	ldr	r0, [pc, #72]	@ (800148c <i2c_write+0xb4>)
 8001442:	f7ff fd80 	bl	8000f46 <LL_I2C_IsActiveFlag_TXIS>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f9      	beq.n	8001440 <i2c_write+0x68>

	LL_I2C_TransmitData8(I2C1, data);
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	@ (800148c <i2c_write+0xb4>)
 8001452:	f7ff fe32 	bl	80010ba <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_TC(I2C1)) {}
 8001456:	bf00      	nop
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <i2c_write+0xb4>)
 800145a:	f7ff fdad 	bl	8000fb8 <LL_I2C_IsActiveFlag_TC>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f9      	beq.n	8001458 <i2c_write+0x80>

	LL_I2C_GenerateStopCondition(I2C1);
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <i2c_write+0xb4>)
 8001466:	f7ff fdda 	bl	800101e <LL_I2C_GenerateStopCondition>
	while (LL_I2C_IsActiveFlag_STOP(I2C1) == 0) {}
 800146a:	bf00      	nop
 800146c:	4807      	ldr	r0, [pc, #28]	@ (800148c <i2c_write+0xb4>)
 800146e:	f7ff fd90 	bl	8000f92 <LL_I2C_IsActiveFlag_STOP>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <i2c_write+0x94>

	LL_I2C_ClearFlag_STOP(I2C1);
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <i2c_write+0xb4>)
 800147a:	f7ff fdb0 	bl	8000fde <LL_I2C_ClearFlag_STOP>

	return 0;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	80002000 	.word	0x80002000
 800148c:	40005400 	.word	0x40005400

08001490 <__NVIC_SetPriorityGrouping>:
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_SetPriority>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	@ (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <LL_RCC_HSI_Enable+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <LL_RCC_HSI_Enable+0x1c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <LL_RCC_HSI_IsReady+0x20>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b02      	cmp	r3, #2
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000

080015f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4904      	ldr	r1, [pc, #16]	@ (800161c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <LL_RCC_SetSysClkSource+0x24>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 0203 	bic.w	r2, r3, #3
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <LL_RCC_SetSysClkSource+0x24>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <LL_RCC_GetSysClkSource+0x18>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <LL_RCC_SetAHBPrescaler+0x24>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	4904      	ldr	r1, [pc, #16]	@ (8001688 <LL_RCC_SetAHBPrescaler+0x24>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40021000 	.word	0x40021000

0800168c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800169c:	4904      	ldr	r1, [pc, #16]	@ (80016b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016c4:	4904      	ldr	r1, [pc, #16]	@ (80016d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000

080016dc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <LL_RCC_SetI2CClockSource+0x2c>)
 80016e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0e1b      	lsrs	r3, r3, #24
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80016f6:	4904      	ldr	r1, [pc, #16]	@ (8001708 <LL_RCC_SetI2CClockSource+0x2c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000

0800170c <LL_APB1_GRP1_EnableClock>:
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	4907      	ldr	r1, [pc, #28]	@ (8001738 <LL_APB1_GRP1_EnableClock+0x2c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000

0800173c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	4907      	ldr	r1, [pc, #28]	@ (8001768 <LL_APB2_GRP1_EnableClock+0x2c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <LL_FLASH_SetLatency+0x24>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0207 	bic.w	r2, r3, #7
 800177c:	4904      	ldr	r1, [pc, #16]	@ (8001790 <LL_FLASH_SetLatency+0x24>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40022000 	.word	0x40022000

08001794 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <LL_FLASH_GetLatency+0x18>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b088      	sub	sp, #32
 80017b6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffbf 	bl	800173c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80017be:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80017c2:	f7ff ffa3 	bl	800170c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f7ff fe62 	bl	8001490 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80017cc:	f7ff fe84 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2200      	movs	r2, #0
 80017d4:	210f      	movs	r1, #15
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff feb6 	bl	8001548 <NVIC_EncodePriority>
 80017dc:	4603      	mov	r3, r0
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff fe86 	bl	80014f4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e8:	f000 f8a4 	bl	8001934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ec:	f7ff fabe 	bl	8000d6c <MX_GPIO_Init>
  MX_DMA_Init();
 80017f0:	f7ff fa7c 	bl	8000cec <MX_DMA_Init>
  MX_I2C1_Init();
 80017f4:	f7ff fca0 	bl	8001138 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017f8:	f000 fcfe 	bl	80021f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf(usartMsgDebug, "[_][_][_]Program Start[_][_][_]\n\r");
 80017fc:	4942      	ldr	r1, [pc, #264]	@ (8001908 <main+0x158>)
 80017fe:	4843      	ldr	r0, [pc, #268]	@ (800190c <main+0x15c>)
 8001800:	f002 fa90 	bl	8003d24 <siprintf>
  USART2_PutBuffer(usartMsgDebug, sizeof(usartMsgDebug));
 8001804:	2164      	movs	r1, #100	@ 0x64
 8001806:	4841      	ldr	r0, [pc, #260]	@ (800190c <main+0x15c>)
 8001808:	f000 fdd0 	bl	80023ac <USART2_PutBuffer>
  LL_mDelay(500);
 800180c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001810:	f001 fb14 	bl	8002e3c <LL_mDelay>

  //Sensors setup
  lps25hb_Init();
 8001814:	f001 fc50 	bl	80030b8 <lps25hb_Init>
  //lps25hb_WriteCallback(i2c_write);
  //lps25hb_ReadCallback(i2c_read);

  hts221_Init();
 8001818:	f001 fb46 	bl	8002ea8 <hts221_Init>

  //Print start of the code


  //Base pressure
  basePressure=pressureRead();
 800181c:	f001 fcbc 	bl	8003198 <pressureRead>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <main+0x160>)
 8001826:	edc3 7a00 	vstr	s15, [r3]
  baseTemperature=24;
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <main+0x164>)
 800182c:	4a3a      	ldr	r2, [pc, #232]	@ (8001918 <main+0x168>)
 800182e:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	  //Reading pressure [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	  pressure=pressureRead();
 8001830:	f001 fcb2 	bl	8003198 <pressureRead>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <main+0x16c>)
 800183a:	edc3 7a00 	vstr	s15, [r3]

	  humidity=humidityRead();
 800183e:	f001 fb89 	bl	8002f54 <humidityRead>
 8001842:	ee07 0a90 	vmov	s15, r0
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <main+0x170>)
 800184c:	edc3 7a00 	vstr	s15, [r3]

	  temperature=tempreatureRead();
 8001850:	f001 fbdc 	bl	800300c <tempreatureRead>
 8001854:	ee07 0a90 	vmov	s15, r0
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <main+0x174>)
 800185e:	edc3 7a00 	vstr	s15, [r3]

	  snprintf(periodic_msg, sizeof(periodic_msg), "T: %.1f [C] Hu: %.0f [%%] P: %.2f [hPa] H: %.2f [m] \r\n", temperature*0.08, humidity/1000, pressure, heightCalculation(basePressure, pressure, baseTemperature));
 8001862:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <main+0x174>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	a324      	add	r3, pc, #144	@ (adr r3, 8001900 <main+0x150>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fec1 	bl	80005f8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4692      	mov	sl, r2
 800187c:	469b      	mov	fp, r3
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <main+0x170>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001928 <main+0x178>
 8001888:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800188c:	ee16 0a90 	vmov	r0, s13
 8001890:	f7fe fe5a 	bl	8000548 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <main+0x16c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_f2d>
 80018a2:	4680      	mov	r8, r0
 80018a4:	4689      	mov	r9, r1
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <main+0x160>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <main+0x16c>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <main+0x164>)
 80018b4:	edd3 6a00 	vldr	s13, [r3]
 80018b8:	eeb0 1a66 	vmov.f32	s2, s13
 80018bc:	eef0 0a47 	vmov.f32	s1, s14
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	f001 fc98 	bl	80031f8 <heightCalculation>
 80018c8:	eeb0 7a40 	vmov.f32	s14, s0
 80018cc:	eef0 7a60 	vmov.f32	s15, s1
 80018d0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018d4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80018d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80018dc:	e9cd ab00 	strd	sl, fp, [sp]
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <main+0x17c>)
 80018e2:	2164      	movs	r1, #100	@ 0x64
 80018e4:	4812      	ldr	r0, [pc, #72]	@ (8001930 <main+0x180>)
 80018e6:	f002 f9e9 	bl	8003cbc <sniprintf>
	  USART2_PutBuffer(periodic_msg, sizeof(periodic_msg));
 80018ea:	2164      	movs	r1, #100	@ 0x64
 80018ec:	4810      	ldr	r0, [pc, #64]	@ (8001930 <main+0x180>)
 80018ee:	f000 fd5d 	bl	80023ac <USART2_PutBuffer>
	  LL_mDelay(500);
 80018f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018f6:	f001 faa1 	bl	8002e3c <LL_mDelay>
  {
 80018fa:	bf00      	nop
 80018fc:	e798      	b.n	8001830 <main+0x80>
 80018fe:	bf00      	nop
 8001900:	47ae147b 	.word	0x47ae147b
 8001904:	3fb47ae1 	.word	0x3fb47ae1
 8001908:	08006398 	.word	0x08006398
 800190c:	20000000 	.word	0x20000000
 8001910:	200002e8 	.word	0x200002e8
 8001914:	200002ec 	.word	0x200002ec
 8001918:	41c00000 	.word	0x41c00000
 800191c:	200002e4 	.word	0x200002e4
 8001920:	200002f0 	.word	0x200002f0
 8001924:	200002f4 	.word	0x200002f4
 8001928:	447a0000 	.word	0x447a0000
 800192c:	080063bc 	.word	0x080063bc
 8001930:	20000280 	.word	0x20000280

08001934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff17 	bl	800176c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800193e:	bf00      	nop
 8001940:	f7ff ff28 	bl	8001794 <LL_FLASH_GetLatency>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1fa      	bne.n	8001940 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800194a:	f7ff fe31 	bl	80015b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800194e:	bf00      	nop
 8001950:	f7ff fe3e 	bl	80015d0 <LL_RCC_HSI_IsReady>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d1fa      	bne.n	8001950 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800195a:	2010      	movs	r0, #16
 800195c:	f7ff fe4a 	bl	80015f4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fe7f 	bl	8001664 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fe90 	bl	800168c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fea1 	bl	80016b4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fe54 	bl	8001620 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001978:	bf00      	nop
 800197a:	f7ff fe65 	bl	8001648 <LL_RCC_GetSysClkSource>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1fa      	bne.n	800197a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <SystemClock_Config+0x68>)
 8001986:	f001 fa4b 	bl	8002e20 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800198a:	4804      	ldr	r0, [pc, #16]	@ (800199c <SystemClock_Config+0x68>)
 800198c:	f001 fa7c 	bl	8002e88 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001990:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001994:	f7ff fea2 	bl	80016dc <LL_RCC_SetI2CClockSource>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	007a1200 	.word	0x007a1200

080019a0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <LL_DMA_DisableChannel+0x3c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	3a01      	subs	r2, #1
 80019be:	4907      	ldr	r1, [pc, #28]	@ (80019dc <LL_DMA_DisableChannel+0x3c>)
 80019c0:	5c8a      	ldrb	r2, [r1, r2]
 80019c2:	4611      	mov	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	440a      	add	r2, r1
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	080063f4 	.word	0x080063f4

080019e0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a16:	605a      	str	r2, [r3, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a34:	2b40      	cmp	r3, #64	@ 0x40
 8001a36:	d101      	bne.n	8001a3c <LL_USART_IsActiveFlag_TC+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <LL_USART_IsActiveFlag_TC+0x1a>
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4e:	bf00      	nop
 8001a50:	e7fd      	b.n	8001a4e <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <HardFault_Handler+0x4>

08001a5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	bf00      	nop
 8001a68:	e7fd      	b.n	8001a66 <BusFault_Handler+0x4>

08001a6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001abc:	480a      	ldr	r0, [pc, #40]	@ (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001abe:	f7ff ff8f 	bl	80019e0 <LL_DMA_IsActiveFlag_TC7>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10d      	bne.n	8001ae4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001ac8:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001aca:	f7ff ff9d 	bl	8001a08 <LL_DMA_ClearFlag_TC7>
		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001ace:	bf00      	nop
 8001ad0:	4806      	ldr	r0, [pc, #24]	@ (8001aec <DMA1_Channel7_IRQHandler+0x34>)
 8001ad2:	f7ff ffa7 	bl	8001a24 <LL_USART_IsActiveFlag_TC>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f9      	beq.n	8001ad0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001adc:	2107      	movs	r1, #7
 8001ade:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001ae0:	f7ff ff5e 	bl	80019a0 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40004400 	.word	0x40004400

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f002 f9c1 	bl	8003e90 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <_exit+0x12>

08001b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b48:	f3af 8000 	nop.w
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf0      	blt.n	8001b48 <_read+0x12>
  }

  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e009      	b.n	8001b96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf1      	blt.n	8001b82 <_write+0x12>
  }
  return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_close>:

int _close(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_isatty>:

int _isatty(int file)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f002 f926 	bl	8003e90 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20003000 	.word	0x20003000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	200002f8 	.word	0x200002f8
 8001c78:	200004a0 	.word	0x200004a0

08001c7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <LL_DMA_EnableChannel>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <LL_DMA_EnableChannel+0x3c>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	3a01      	subs	r2, #1
 8001d4e:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <LL_DMA_EnableChannel+0x3c>)
 8001d50:	5c8a      	ldrb	r2, [r1, r2]
 8001d52:	4611      	mov	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	440a      	add	r2, r1
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	08006414 	.word	0x08006414

08001d70 <LL_DMA_SetDataTransferDirection>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	461a      	mov	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d90:	f023 0310 	bic.w	r3, r3, #16
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	3a01      	subs	r2, #1
 8001d98:	4907      	ldr	r1, [pc, #28]	@ (8001db8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001d9a:	5c8a      	ldrb	r2, [r1, r2]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	440a      	add	r2, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	08006414 	.word	0x08006414

08001dbc <LL_DMA_SetMode>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <LL_DMA_SetMode+0x44>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0220 	bic.w	r2, r3, #32
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <LL_DMA_SetMode+0x44>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	4619      	mov	r1, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	440b      	add	r3, r1
 8001dea:	4619      	mov	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	08006414 	.word	0x08006414

08001e04 <LL_DMA_SetPeriphIncMode>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	4907      	ldr	r1, [pc, #28]	@ (8001e48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	440b      	add	r3, r1
 8001e32:	4619      	mov	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	08006414 	.word	0x08006414

08001e4c <LL_DMA_SetMemoryIncMode>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	461a      	mov	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	4619      	mov	r1, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	440b      	add	r3, r1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	08006414 	.word	0x08006414

08001e94 <LL_DMA_SetPeriphSize>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed8 <LL_DMA_SetPeriphSize+0x44>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <LL_DMA_SetPeriphSize+0x44>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	08006414 	.word	0x08006414

08001edc <LL_DMA_SetMemorySize>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <LL_DMA_SetMemorySize+0x44>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <LL_DMA_SetMemorySize+0x44>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	4619      	mov	r1, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	440b      	add	r3, r1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	08006414 	.word	0x08006414

08001f24 <LL_DMA_SetChannelPriorityLevel>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	440b      	add	r3, r1
 8001f52:	4619      	mov	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	08006414 	.word	0x08006414

08001f6c <LL_DMA_SetDataLength>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <LL_DMA_SetDataLength+0x44>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	3a01      	subs	r2, #1
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <LL_DMA_SetDataLength+0x44>)
 8001f92:	5c8a      	ldrb	r2, [r1, r2]
 8001f94:	4611      	mov	r1, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	440a      	add	r2, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	08006414 	.word	0x08006414

08001fb4 <LL_DMA_SetMemoryAddress>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <LL_DMA_SetMemoryAddress+0x2c>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	08006414 	.word	0x08006414

08001fe4 <LL_DMA_SetPeriphAddress>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <LL_DMA_SetPeriphAddress+0x2c>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6093      	str	r3, [r2, #8]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	08006414 	.word	0x08006414

08002014 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	3a01      	subs	r2, #1
 8002032:	4907      	ldr	r1, [pc, #28]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002034:	5c8a      	ldrb	r2, [r1, r2]
 8002036:	4611      	mov	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	440a      	add	r2, r1
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	08006414 	.word	0x08006414

08002054 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3b01      	subs	r3, #1
 8002062:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <LL_DMA_EnableIT_TE+0x3c>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	3a01      	subs	r2, #1
 8002072:	4907      	ldr	r1, [pc, #28]	@ (8002090 <LL_DMA_EnableIT_TE+0x3c>)
 8002074:	5c8a      	ldrb	r2, [r1, r2]
 8002076:	4611      	mov	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	440a      	add	r2, r1
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	08006414 	.word	0x08006414

08002094 <LL_AHB1_GRP1_EnableClock>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	4907      	ldr	r1, [pc, #28]	@ (80020c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <LL_APB1_GRP1_EnableClock>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000

080020f4 <LL_USART_Enable>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_USART_ConfigAsyncMode>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3308      	adds	r3, #8
 800214c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	e853 3f00 	ldrex	r3, [r3]
 8002154:	60bb      	str	r3, [r7, #8]
   return(result);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3308      	adds	r3, #8
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	61ba      	str	r2, [r7, #24]
 8002166:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002168:	6979      	ldr	r1, [r7, #20]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	e841 2300 	strex	r3, r2, [r1]
 8002170:	613b      	str	r3, [r7, #16]
   return(result);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e7      	bne.n	8002148 <LL_USART_DisableIT_CTS+0x8>
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002186:	b480      	push	{r7}
 8002188:	b089      	sub	sp, #36	@ 0x24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3308      	adds	r3, #8
 8002192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	e853 3f00 	ldrex	r3, [r3]
 800219a:	60bb      	str	r3, [r7, #8]
   return(result);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3308      	adds	r3, #8
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	61ba      	str	r2, [r7, #24]
 80021ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ae:	6979      	ldr	r1, [r7, #20]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	e841 2300 	strex	r3, r2, [r1]
 80021b6:	613b      	str	r3, [r7, #16]
   return(result);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e7      	bne.n	800218e <LL_USART_EnableDMAReq_TX+0x8>
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3724      	adds	r7, #36	@ 0x24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3328      	adds	r3, #40	@ 0x28
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e002      	b.n	80021ea <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3324      	adds	r3, #36	@ 0x24
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002222:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002226:	f7ff ff4d 	bl	80020c4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800222a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800222e:	f7ff ff31 	bl	8002094 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002232:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002238:	2302      	movs	r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002248:	2307      	movs	r3, #7
 800224a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f000 f9f8 	bl	8002648 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002258:	2200      	movs	r2, #0
 800225a:	2106      	movs	r1, #6
 800225c:	4851      	ldr	r0, [pc, #324]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800225e:	f7ff fd87 	bl	8001d70 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002262:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002266:	2106      	movs	r1, #6
 8002268:	484e      	ldr	r0, [pc, #312]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800226a:	f7ff fe5b 	bl	8001f24 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800226e:	2200      	movs	r2, #0
 8002270:	2106      	movs	r1, #6
 8002272:	484c      	ldr	r0, [pc, #304]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002274:	f7ff fda2 	bl	8001dbc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002278:	2200      	movs	r2, #0
 800227a:	2106      	movs	r1, #6
 800227c:	4849      	ldr	r0, [pc, #292]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800227e:	f7ff fdc1 	bl	8001e04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	2106      	movs	r1, #6
 8002286:	4847      	ldr	r0, [pc, #284]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002288:	f7ff fde0 	bl	8001e4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800228c:	2200      	movs	r2, #0
 800228e:	2106      	movs	r1, #6
 8002290:	4844      	ldr	r0, [pc, #272]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002292:	f7ff fdff 	bl	8001e94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002296:	2200      	movs	r2, #0
 8002298:	2106      	movs	r1, #6
 800229a:	4842      	ldr	r0, [pc, #264]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800229c:	f7ff fe1e 	bl	8001edc <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80022a0:	2210      	movs	r2, #16
 80022a2:	2107      	movs	r1, #7
 80022a4:	483f      	ldr	r0, [pc, #252]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022a6:	f7ff fd63 	bl	8001d70 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80022aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ae:	2107      	movs	r1, #7
 80022b0:	483c      	ldr	r0, [pc, #240]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022b2:	f7ff fe37 	bl	8001f24 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2107      	movs	r1, #7
 80022ba:	483a      	ldr	r0, [pc, #232]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022bc:	f7ff fd7e 	bl	8001dbc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2107      	movs	r1, #7
 80022c4:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022c6:	f7ff fd9d 	bl	8001e04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	2107      	movs	r1, #7
 80022ce:	4835      	ldr	r0, [pc, #212]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022d0:	f7ff fdbc 	bl	8001e4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2107      	movs	r1, #7
 80022d8:	4832      	ldr	r0, [pc, #200]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022da:	f7ff fddb 	bl	8001e94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80022de:	2200      	movs	r2, #0
 80022e0:	2107      	movs	r1, #7
 80022e2:	4830      	ldr	r0, [pc, #192]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022e4:	f7ff fdfa 	bl	8001edc <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80022e8:	2210      	movs	r2, #16
 80022ea:	2107      	movs	r1, #7
 80022ec:	482d      	ldr	r0, [pc, #180]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022ee:	f7ff fd3f 	bl	8001d70 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80022f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022f6:	2107      	movs	r1, #7
 80022f8:	482a      	ldr	r0, [pc, #168]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 80022fa:	f7ff fe13 	bl	8001f24 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80022fe:	2200      	movs	r2, #0
 8002300:	2107      	movs	r1, #7
 8002302:	4828      	ldr	r0, [pc, #160]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002304:	f7ff fd5a 	bl	8001dbc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002308:	2200      	movs	r2, #0
 800230a:	2107      	movs	r1, #7
 800230c:	4825      	ldr	r0, [pc, #148]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800230e:	f7ff fd79 	bl	8001e04 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002312:	2280      	movs	r2, #128	@ 0x80
 8002314:	2107      	movs	r1, #7
 8002316:	4823      	ldr	r0, [pc, #140]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002318:	f7ff fd98 	bl	8001e4c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800231c:	2200      	movs	r2, #0
 800231e:	2107      	movs	r1, #7
 8002320:	4820      	ldr	r0, [pc, #128]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002322:	f7ff fdb7 	bl	8001e94 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002326:	2200      	movs	r2, #0
 8002328:	2107      	movs	r1, #7
 800232a:	481e      	ldr	r0, [pc, #120]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800232c:	f7ff fdd6 	bl	8001edc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002330:	2100      	movs	r1, #0
 8002332:	481d      	ldr	r0, [pc, #116]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 8002334:	f7ff ff4a 	bl	80021cc <LL_USART_DMA_GetRegAddr>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	2107      	movs	r1, #7
 800233e:	4819      	ldr	r0, [pc, #100]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 8002340:	f7ff fe50 	bl	8001fe4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002344:	4818      	ldr	r0, [pc, #96]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 8002346:	f7ff ff1e 	bl	8002186 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800234a:	2107      	movs	r1, #7
 800234c:	4815      	ldr	r0, [pc, #84]	@ (80023a4 <MX_USART2_UART_Init+0x1ac>)
 800234e:	f7ff fe81 	bl	8002054 <LL_DMA_EnableIT_TE>

    /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002352:	2100      	movs	r1, #0
 8002354:	2026      	movs	r0, #38	@ 0x26
 8002356:	f7ff fcc1 	bl	8001cdc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800235a:	2026      	movs	r0, #38	@ 0x26
 800235c:	f7ff fca0 	bl	8001ca0 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002360:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002364:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002372:	230c      	movs	r3, #12
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002376:	2300      	movs	r3, #0
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4808      	ldr	r0, [pc, #32]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 8002386:	f000 fcc5 	bl	8002d14 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800238a:	4807      	ldr	r0, [pc, #28]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 800238c:	f7ff fed8 	bl	8002140 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 8002392:	f7ff febf 	bl	8002114 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002396:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <MX_USART2_UART_Init+0x1b0>)
 8002398:	f7ff feac 	bl	80020f4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	3738      	adds	r7, #56	@ 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40004400 	.word	0x40004400

080023ac <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	2107      	movs	r1, #7
 80023be:	480a      	ldr	r0, [pc, #40]	@ (80023e8 <USART2_PutBuffer+0x3c>)
 80023c0:	f7ff fdf8 	bl	8001fb4 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	461a      	mov	r2, r3
 80023c8:	2107      	movs	r1, #7
 80023ca:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <USART2_PutBuffer+0x3c>)
 80023cc:	f7ff fdce 	bl	8001f6c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80023d0:	2107      	movs	r1, #7
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <USART2_PutBuffer+0x3c>)
 80023d4:	f7ff fe1e 	bl	8002014 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80023d8:	2107      	movs	r1, #7
 80023da:	4803      	ldr	r0, [pc, #12]	@ (80023e8 <USART2_PutBuffer+0x3c>)
 80023dc:	f7ff fca8 	bl	8001d30 <LL_DMA_EnableChannel>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40020000 	.word	0x40020000

080023ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002424 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f0:	f7ff fc44 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f4:	480c      	ldr	r0, [pc, #48]	@ (8002428 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f6:	490d      	ldr	r1, [pc, #52]	@ (800242c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <LoopForever+0xe>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800240c:	4c0a      	ldr	r4, [pc, #40]	@ (8002438 <LoopForever+0x16>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241a:	f001 fd3f 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241e:	f7ff f9c7 	bl	80017b0 <main>

08002422 <LoopForever>:

LoopForever:
    b LoopForever
 8002422:	e7fe      	b.n	8002422 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002424:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002430:	080067a0 	.word	0x080067a0
  ldr r2, =_sbss
 8002434:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002438:	2000049c 	.word	0x2000049c

0800243c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC1_2_IRQHandler>

0800243e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800243e:	b480      	push	{r7}
 8002440:	b089      	sub	sp, #36	@ 0x24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	613b      	str	r3, [r7, #16]
  return result;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2103      	movs	r1, #3
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	401a      	ands	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	61bb      	str	r3, [r7, #24]
  return result;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]
}
 8002490:	bf00      	nop
 8002492:	3724      	adds	r7, #36	@ 0x24
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	401a      	ands	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	@ 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	613b      	str	r3, [r7, #16]
  return result;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2103      	movs	r1, #3
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	61bb      	str	r3, [r7, #24]
  return result;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800252a:	b480      	push	{r7}
 800252c:	b089      	sub	sp, #36	@ 0x24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	613b      	str	r3, [r7, #16]
  return result;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2103      	movs	r1, #3
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	401a      	ands	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	61bb      	str	r3, [r7, #24]
  return result;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	431a      	orrs	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	60da      	str	r2, [r3, #12]
}
 800257c:	bf00      	nop
 800257e:	3724      	adds	r7, #36	@ 0x24
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	613b      	str	r3, [r7, #16]
  return result;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	210f      	movs	r1, #15
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	401a      	ands	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	61bb      	str	r3, [r7, #24]
  return result;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80025da:	bf00      	nop
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b089      	sub	sp, #36	@ 0x24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	613b      	str	r3, [r7, #16]
  return result;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	210f      	movs	r1, #15
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	61bb      	str	r3, [r7, #24]
  return result;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800263c:	bf00      	nop
 800263e:	3724      	adds	r7, #36	@ 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	613b      	str	r3, [r7, #16]
  return result;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800266a:	e051      	b.n	8002710 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d043      	beq.n	800270a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d003      	beq.n	8002692 <LL_GPIO_Init+0x4a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d10e      	bne.n	80026b0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	461a      	mov	r2, r3
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff16 	bl	80024cc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	461a      	mov	r2, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fef6 	bl	800249c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	461a      	mov	r2, r3
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff36 	bl	800252a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11a      	bne.n	80026fc <LL_GPIO_Init+0xb4>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	60bb      	str	r3, [r7, #8]
  return result;
 80026d2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b07      	cmp	r3, #7
 80026dc:	d807      	bhi.n	80026ee <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	461a      	mov	r2, r3
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff4e 	bl	8002588 <LL_GPIO_SetAFPin_0_7>
 80026ec:	e006      	b.n	80026fc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	461a      	mov	r2, r3
 80026f4:	69b9      	ldr	r1, [r7, #24]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff75 	bl	80025e6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	461a      	mov	r2, r3
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fe9a 	bl	800243e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1a6      	bne.n	800266c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <LL_I2C_Enable>:
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_I2C_Disable>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0201 	bic.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_I2C_ConfigFilters>:
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0219      	lsls	r1, r3, #8
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	430b      	orrs	r3, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_I2C_SetOwnAddress1>:
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_I2C_EnableOwnAddress1>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	609a      	str	r2, [r3, #8]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_I2C_DisableOwnAddress1>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_I2C_SetTiming>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	611a      	str	r2, [r3, #16]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_I2C_SetMode>:
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_I2C_AcknowledgeNextData>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	605a      	str	r2, [r3, #4]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff65 	bl	8002748 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff6d 	bl	8002768 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ffb6 	bl	8002806 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff44 	bl	8002728 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffa0 	bl	80027e6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6919      	ldr	r1, [r3, #16]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	461a      	mov	r2, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff70 	bl	8002796 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff81 	bl	80027c6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa9 	bl	8002822 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffb6 	bl	8002848 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <LL_RCC_HSI_IsReady>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <LL_RCC_HSI_IsReady+0x20>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000

0800290c <LL_RCC_LSE_IsReady>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <LL_RCC_LSE_IsReady+0x20>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40021000 	.word	0x40021000

08002930 <LL_RCC_GetSysClkSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <LL_RCC_GetSysClkSource+0x18>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <LL_RCC_GetAHBPrescaler>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <LL_RCC_GetAHBPrescaler+0x18>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <LL_RCC_GetAPB1Prescaler>:
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <LL_RCC_GetAPB1Prescaler+0x18>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <LL_RCC_GetAPB2Prescaler>:
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <LL_RCC_GetAPB2Prescaler+0x18>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80029a8:	4b07      	ldr	r3, [pc, #28]	@ (80029c8 <LL_RCC_GetUSARTClockSource+0x28>)
 80029aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ac:	2103      	movs	r1, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	4313      	orrs	r3, r2
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000

080029cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <LL_RCC_PLL_GetMainSource+0x18>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000

080029e8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80029ec:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <LL_RCC_PLL_GetPrediv+0x18>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	f003 030f 	and.w	r3, r3, #15
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a28:	f000 f862 	bl	8002af0 <RCC_GetSystemClockFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f880 	bl	8002b3c <RCC_GetHCLKClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f88e 	bl	8002b68 <RCC_GetPCLK1ClockFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f89a 	bl	8002b90 <RCC_GetPCLK2ClockFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d130      	bne.n	8002ae0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff8e 	bl	80029a0 <LL_RCC_GetUSARTClockSource>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d00a      	beq.n	8002aa0 <LL_RCC_GetUSARTClockFreq+0x34>
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d819      	bhi.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x56>
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d002      	beq.n	8002a98 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d00c      	beq.n	8002ab0 <LL_RCC_GetUSARTClockFreq+0x44>
 8002a96:	e014      	b.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002a98:	f000 f82a 	bl	8002af0 <RCC_GetSystemClockFreq>
 8002a9c:	60f8      	str	r0, [r7, #12]
        break;
 8002a9e:	e01f      	b.n	8002ae0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002aa0:	f7ff ff22 	bl	80028e8 <LL_RCC_HSI_IsReady>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <LL_RCC_GetUSARTClockFreq+0x80>)
 8002aac:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002aae:	e014      	b.n	8002ada <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002ab0:	f7ff ff2c 	bl	800290c <LL_RCC_LSE_IsReady>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d011      	beq.n	8002ade <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002abe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002ac0:	e00d      	b.n	8002ade <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002ac2:	f000 f815 	bl	8002af0 <RCC_GetSystemClockFreq>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f837 	bl	8002b3c <RCC_GetHCLKClockFreq>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f849 	bl	8002b68 <RCC_GetPCLK1ClockFreq>
 8002ad6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002ad8:	e002      	b.n	8002ae0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002ade:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	007a1200 	.word	0x007a1200

08002af0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002afa:	f7ff ff19 	bl	8002930 <LL_RCC_GetSysClkSource>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00c      	beq.n	8002b1e <RCC_GetSystemClockFreq+0x2e>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d80e      	bhi.n	8002b26 <RCC_GetSystemClockFreq+0x36>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <RCC_GetSystemClockFreq+0x22>
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d003      	beq.n	8002b18 <RCC_GetSystemClockFreq+0x28>
 8002b10:	e009      	b.n	8002b26 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <RCC_GetSystemClockFreq+0x48>)
 8002b14:	607b      	str	r3, [r7, #4]
      break;
 8002b16:	e009      	b.n	8002b2c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <RCC_GetSystemClockFreq+0x48>)
 8002b1a:	607b      	str	r3, [r7, #4]
      break;
 8002b1c:	e006      	b.n	8002b2c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002b1e:	f000 f84b 	bl	8002bb8 <RCC_PLL_GetFreqDomain_SYS>
 8002b22:	6078      	str	r0, [r7, #4]
      break;
 8002b24:	e002      	b.n	8002b2c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002b26:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <RCC_GetSystemClockFreq+0x48>)
 8002b28:	607b      	str	r3, [r7, #4]
      break;
 8002b2a:	bf00      	nop
  }

  return frequency;
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	007a1200 	.word	0x007a1200

08002b3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002b44:	f7ff ff02 	bl	800294c <LL_RCC_GetAHBPrescaler>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <RCC_GetHCLKClockFreq+0x28>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	40d3      	lsrs	r3, r2
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	080063fc 	.word	0x080063fc

08002b68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b70:	f7ff fefa 	bl	8002968 <LL_RCC_GetAPB1Prescaler>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <RCC_GetPCLK1ClockFreq+0x24>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	40d3      	lsrs	r3, r2
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	0800640c 	.word	0x0800640c

08002b90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b98:	f7ff fef4 	bl	8002984 <LL_RCC_GetAPB2Prescaler>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <RCC_GetPCLK2ClockFreq+0x24>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	40d3      	lsrs	r3, r2
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	0800640c 	.word	0x0800640c

08002bb8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002bc6:	f7ff ff01 	bl	80029cc <LL_RCC_PLL_GetMainSource>
 8002bca:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd8:	d003      	beq.n	8002be2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002bda:	e005      	b.n	8002be8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bde:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002be0:	e005      	b.n	8002bee <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002be4:	60fb      	str	r3, [r7, #12]
      break;
 8002be6:	e002      	b.n	8002bee <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002be8:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002bea:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002bec:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002bee:	f7ff ff09 	bl	8002a04 <LL_RCC_PLL_GetPrediv>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	fbb2 f4f3 	udiv	r4, r2, r3
 8002bfc:	f7ff fef4 	bl	80029e8 <LL_RCC_PLL_GetMultiplicator>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002c06:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002c0a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	fa92 f2a2 	rbit	r2, r2
 8002c12:	603a      	str	r2, [r7, #0]
  return result;
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	40d3      	lsrs	r3, r2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	003d0900 	.word	0x003d0900
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <LL_USART_IsEnabled>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <LL_USART_IsEnabled+0x18>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <LL_USART_IsEnabled+0x1a>
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_USART_SetStopBitsLength>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_USART_SetHWFlowCtrl>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_USART_SetBaudRate>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cba:	d11a      	bne.n	8002cf2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	005a      	lsls	r2, r3, #1
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	441a      	add	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	60da      	str	r2, [r3, #12]
}
 8002cf0:	e00a      	b.n	8002d08 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	085a      	lsrs	r2, r3, #1
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff84 	bl	8002c34 <LL_USART_IsEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d14e      	bne.n	8002dd0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <LL_USART_Init+0xc8>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6851      	ldr	r1, [r2, #4]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	6912      	ldr	r2, [r2, #16]
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6992      	ldr	r2, [r2, #24]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff7c 	bl	8002c5a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff89 	bl	8002c80 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1b      	ldr	r2, [pc, #108]	@ (8002de0 <LL_USART_Init+0xcc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d104      	bne.n	8002d80 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff fe78 	bl	8002a6c <LL_RCC_GetUSARTClockFreq>
 8002d7c:	61b8      	str	r0, [r7, #24]
 8002d7e:	e016      	b.n	8002dae <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <LL_USART_Init+0xd0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d107      	bne.n	8002d98 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe47 	bl	8002a20 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e00a      	b.n	8002dae <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	@ (8002de8 <LL_USART_Init+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d106      	bne.n	8002dae <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe3b 	bl	8002a20 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff6b 	bl	8002ca6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	efff69f3 	.word	0xefff69f3
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40004400 	.word	0x40004400
 8002de8:	40004800 	.word	0x40004800

08002dec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4a07      	ldr	r2, [pc, #28]	@ (8002e1c <LL_InitTick+0x30>)
 8002e00:	3b01      	subs	r3, #1
 8002e02:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <LL_InitTick+0x30>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <LL_InitTick+0x30>)
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002e28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ffdd 	bl	8002dec <LL_InitTick>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <LL_mDelay+0x48>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e4a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d00c      	beq.n	8002e6e <LL_mDelay+0x32>
  {
    Delay++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3301      	adds	r3, #1
 8002e58:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e5a:	e008      	b.n	8002e6e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <LL_mDelay+0x48>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <LL_mDelay+0x32>
    {
      Delay--;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f3      	bne.n	8002e5c <LL_mDelay+0x20>
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e90:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <LL_SetSystemCoreClock+0x1c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000064 	.word	0x20000064

08002ea8 <hts221_Init>:
uint32_t T1_degC=0;
uint32_t T0_OUT=0;
uint32_t T1_OUT=0;
uint32_t T1_T0_msb=0;

void hts221_Init(void){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	data_read_set_HT = (uint32_t)i2c_read(HTS221_DEVICE_ADDRESS_READ, HTS221_WHO_AM_I_ADDRES, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	20bf      	movs	r0, #191	@ 0xbf
 8002eb4:	f7fe f9b0 	bl	8001218 <i2c_read>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <hts221_Init+0x9c>)
 8002ebc:	6013      	str	r3, [r2, #0]
	if(data_read_set_HT == HTS221_WHO_AM_I_VALUE){
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <hts221_Init+0x9c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2bbc      	cmp	r3, #188	@ 0xbc
 8002ec4:	d102      	bne.n	8002ecc <hts221_Init+0x24>
		whoAmI_HT = 1;
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <hts221_Init+0xa0>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
	}
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(writeSettingsSensor_HT == 0){
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <hts221_Init+0xa4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d124      	bne.n	8002f1e <hts221_Init+0x76>
		uint8_t settingsREG1=0x82;
 8002ed4:	2382      	movs	r3, #130	@ 0x82
 8002ed6:	71fb      	strb	r3, [r7, #7]
		uint8_t settingsAV_CONF=0b00110101; //Both on 128 AVG --- H multiplier: 0.07 ----- T multiplier: 0.01
 8002ed8:	2335      	movs	r3, #53	@ 0x35
 8002eda:	71bb      	strb	r3, [r7, #6]
		i2c_write(HTS221_DEVICE_ADDRESS_WRITE, HTS221_CTRL_REG1, settingsREG1, 1);
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	20be      	movs	r0, #190	@ 0xbe
 8002ee4:	f7fe fa78 	bl	80013d8 <i2c_write>
		i2c_write(HTS221_DEVICE_ADDRESS_WRITE, HTS221_AV_CONF, settingsAV_CONF, 1);
 8002ee8:	79ba      	ldrb	r2, [r7, #6]
 8002eea:	2301      	movs	r3, #1
 8002eec:	2110      	movs	r1, #16
 8002eee:	20be      	movs	r0, #190	@ 0xbe
 8002ef0:	f7fe fa72 	bl	80013d8 <i2c_write>

		if((uint32_t)i2c_read(HTS221_DEVICE_ADDRESS_READ,HTS221_CTRL_REG1, 0) == settingsREG1 && (uint32_t)i2c_read(HTS221_DEVICE_ADDRESS_READ, HTS221_AV_CONF, 0) == settingsAV_CONF){
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2120      	movs	r1, #32
 8002ef8:	20bf      	movs	r0, #191	@ 0xbf
 8002efa:	f7fe f98d 	bl	8001218 <i2c_read>
 8002efe:	4602      	mov	r2, r0
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d10b      	bne.n	8002f1e <hts221_Init+0x76>
 8002f06:	2200      	movs	r2, #0
 8002f08:	2110      	movs	r1, #16
 8002f0a:	20bf      	movs	r0, #191	@ 0xbf
 8002f0c:	f7fe f984 	bl	8001218 <i2c_read>
 8002f10:	4602      	mov	r2, r0
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d102      	bne.n	8002f1e <hts221_Init+0x76>
			writeSettingsSensor_HT=1;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <hts221_Init+0xa4>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
	}
	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(whoAmI_HT && writeSettingsSensor_HT){
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <hts221_Init+0xa0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <hts221_Init+0x94>
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <hts221_Init+0xa4>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <hts221_Init+0x94>
		USART2_PutBuffer(usartMsgSensorSethts221, sizeof(usartMsgSensorSethts221));
 8002f2e:	210d      	movs	r1, #13
 8002f30:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <hts221_Init+0xa8>)
 8002f32:	f7ff fa3b 	bl	80023ac <USART2_PutBuffer>
		LL_mDelay(100);
 8002f36:	2064      	movs	r0, #100	@ 0x64
 8002f38:	f7ff ff80 	bl	8002e3c <LL_mDelay>
	}
	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200002fc 	.word	0x200002fc
 8002f48:	20000300 	.word	0x20000300
 8002f4c:	20000301 	.word	0x20000301
 8002f50:	20000068 	.word	0x20000068

08002f54 <humidityRead>:
	T1_OUT |= ((T1_OUT >> 15) & 1) << 31;

	//Temperature [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***
}

float humidityRead(void){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
	humidity_value=0;
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <humidityRead+0x94>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

	H_OUT=(uint32_t)i2c_read(HTS221_DEVICE_ADDRESS_READ, HTS221_HUMIDITY_OUT_L, 2);
 8002f60:	2202      	movs	r2, #2
 8002f62:	2128      	movs	r1, #40	@ 0x28
 8002f64:	20bf      	movs	r0, #191	@ 0xbf
 8002f66:	f7fe f957 	bl	8001218 <i2c_read>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <humidityRead+0x98>)
 8002f6e:	6013      	str	r3, [r2, #0]
	H_OUT |= ((H_OUT >> 15) & 1) << 31;
 8002f70:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <humidityRead+0x98>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0bdb      	lsrs	r3, r3, #15
 8002f76:	07da      	lsls	r2, r3, #31
 8002f78:	4b1c      	ldr	r3, [pc, #112]	@ (8002fec <humidityRead+0x98>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <humidityRead+0x98>)
 8002f80:	6013      	str	r3, [r2, #0]
	humidity_value=(float)(( ( (H1_rH - H0_rH) * (H_OUT - H0_T0_OUT) ) / (H1_T0_OUT - H0_T0_OUT) )+H0_rH);
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <humidityRead+0x9c>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff4 <humidityRead+0xa0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	4a17      	ldr	r2, [pc, #92]	@ (8002fec <humidityRead+0x98>)
 8002f8e:	6811      	ldr	r1, [r2, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <humidityRead+0xa4>)
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	1a8a      	subs	r2, r1, r2
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <humidityRead+0xa8>)
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <humidityRead+0xa4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1acb      	subs	r3, r1, r3
 8002fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <humidityRead+0xa0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <humidityRead+0x94>)
 8002fb8:	edc3 7a00 	vstr	s15, [r3]
	humidity_value_1=(float)((humidity_value*humidityMultiplier)/1000);
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <humidityRead+0x94>)
 8002fbe:	ed93 7a00 	vldr	s14, [r3]
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <humidityRead+0xac>)
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fcc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8003004 <humidityRead+0xb0>
 8002fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <humidityRead+0xb4>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]

	return humidity_value_1;
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <humidityRead+0xb4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	ee07 3a90 	vmov	s15, r3
}
 8002fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000304 	.word	0x20000304
 8002fec:	2000030c 	.word	0x2000030c
 8002ff0:	20000314 	.word	0x20000314
 8002ff4:	20000310 	.word	0x20000310
 8002ff8:	20000318 	.word	0x20000318
 8002ffc:	2000031c 	.word	0x2000031c
 8003000:	20000078 	.word	0x20000078
 8003004:	447a0000 	.word	0x447a0000
 8003008:	20000308 	.word	0x20000308

0800300c <tempreatureRead>:

float tempreatureRead(void){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	temperature_value=0;
 8003010:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <tempreatureRead+0x8c>)
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

	T_OUT=(uint32_t)i2c_read(HTS221_DEVICE_ADDRESS_READ, HTS221_TEMP_OUT_L, 2);
 8003018:	2202      	movs	r2, #2
 800301a:	212a      	movs	r1, #42	@ 0x2a
 800301c:	20bf      	movs	r0, #191	@ 0xbf
 800301e:	f7fe f8fb 	bl	8001218 <i2c_read>
 8003022:	4603      	mov	r3, r0
 8003024:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <tempreatureRead+0x90>)
 8003026:	6013      	str	r3, [r2, #0]
	T_OUT |= ((T_OUT >> 15) & 1) << 31;
 8003028:	4b1c      	ldr	r3, [pc, #112]	@ (800309c <tempreatureRead+0x90>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0bdb      	lsrs	r3, r3, #15
 800302e:	07da      	lsls	r2, r3, #31
 8003030:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <tempreatureRead+0x90>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	4a19      	ldr	r2, [pc, #100]	@ (800309c <tempreatureRead+0x90>)
 8003038:	6013      	str	r3, [r2, #0]
	temperature_value=(float)((((T1_degC-T0_degC)*(T_OUT-T0_OUT))/(T1_OUT-T0_OUT))+T0_degC); //Maybe this dont work too because why would it
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <tempreatureRead+0x94>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <tempreatureRead+0x98>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	4a15      	ldr	r2, [pc, #84]	@ (800309c <tempreatureRead+0x90>)
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <tempreatureRead+0x9c>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	1a8a      	subs	r2, r1, r2
 800304e:	fb03 f202 	mul.w	r2, r3, r2
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <tempreatureRead+0xa0>)
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <tempreatureRead+0x9c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <tempreatureRead+0x98>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4413      	add	r3, r2
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <tempreatureRead+0x8c>)
 8003070:	edc3 7a00 	vstr	s15, [r3]
	temperature_value_1=(float)(temperature_value)*temperatureMultiplier;
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <tempreatureRead+0x8c>)
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <tempreatureRead+0xa4>)
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <tempreatureRead+0xa8>)
 8003086:	edc3 7a00 	vstr	s15, [r3]

	return temperature_value; // Hmmmmmmmmmmmmmmmmmmmmmmmmmmmm
 800308a:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <tempreatureRead+0x8c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	ee07 3a90 	vmov	s15, r3
}
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000320 	.word	0x20000320
 800309c:	20000328 	.word	0x20000328
 80030a0:	20000330 	.word	0x20000330
 80030a4:	2000032c 	.word	0x2000032c
 80030a8:	20000334 	.word	0x20000334
 80030ac:	20000338 	.word	0x20000338
 80030b0:	2000007c 	.word	0x2000007c
 80030b4:	20000324 	.word	0x20000324

080030b8 <lps25hb_Init>:
		writeCallback = callback;
	}
}


void lps25hb_Init(void){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	data_read_set = (uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_WHO_AM_I_ADDRES, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	210f      	movs	r1, #15
 80030c2:	20bb      	movs	r0, #187	@ 0xbb
 80030c4:	f7fe f8a8 	bl	8001218 <i2c_read>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003184 <lps25hb_Init+0xcc>)
 80030cc:	6013      	str	r3, [r2, #0]
	if(data_read_set == LPS25HB_WHO_AM_I_VALUE){
 80030ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003184 <lps25hb_Init+0xcc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2bbd      	cmp	r3, #189	@ 0xbd
 80030d4:	d102      	bne.n	80030dc <lps25hb_Init+0x24>
		whoAmI = 1;
 80030d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003188 <lps25hb_Init+0xd0>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
	}
	//Who am I [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(writeSettingsSensor == 0){
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <lps25hb_Init+0xd4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d134      	bne.n	800314e <lps25hb_Init+0x96>
		uint8_t settingsREG1=0xC0;
 80030e4:	23c0      	movs	r3, #192	@ 0xc0
 80030e6:	71fb      	strb	r3, [r7, #7]
		uint8_t settingsREG2=0x40;
 80030e8:	2340      	movs	r3, #64	@ 0x40
 80030ea:	71bb      	strb	r3, [r7, #6]
		uint8_t settingsRES=0x1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	717b      	strb	r3, [r7, #5]
		uint8_t settingsFIFO_CTRL=0xC7;
 80030f0:	23c7      	movs	r3, #199	@ 0xc7
 80030f2:	713b      	strb	r3, [r7, #4]

		i2c_write(LPS25HB_DEVICE_ADDRESS_WRITE_1, LPS25HB_CTRL_REG1, settingsREG1, 1);
 80030f4:	79fa      	ldrb	r2, [r7, #7]
 80030f6:	2301      	movs	r3, #1
 80030f8:	2120      	movs	r1, #32
 80030fa:	20ba      	movs	r0, #186	@ 0xba
 80030fc:	f7fe f96c 	bl	80013d8 <i2c_write>
		i2c_write(LPS25HB_DEVICE_ADDRESS_WRITE_1, LPS25HB_CTRL_REG2, settingsREG2, 1);
 8003100:	79ba      	ldrb	r2, [r7, #6]
 8003102:	2301      	movs	r3, #1
 8003104:	2121      	movs	r1, #33	@ 0x21
 8003106:	20ba      	movs	r0, #186	@ 0xba
 8003108:	f7fe f966 	bl	80013d8 <i2c_write>
		i2c_write(LPS25HB_DEVICE_ADDRESS_WRITE_1, LPS25HB_RES_CONF, settingsRES, 1);
 800310c:	797a      	ldrb	r2, [r7, #5]
 800310e:	2301      	movs	r3, #1
 8003110:	2110      	movs	r1, #16
 8003112:	20ba      	movs	r0, #186	@ 0xba
 8003114:	f7fe f960 	bl	80013d8 <i2c_write>
		i2c_write(LPS25HB_DEVICE_ADDRESS_WRITE_1, LPS25HB_FIFO_CTRL, settingsFIFO_CTRL, 1);
 8003118:	793a      	ldrb	r2, [r7, #4]
 800311a:	2301      	movs	r3, #1
 800311c:	212e      	movs	r1, #46	@ 0x2e
 800311e:	20ba      	movs	r0, #186	@ 0xba
 8003120:	f7fe f95a 	bl	80013d8 <i2c_write>

		if((uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_CTRL_REG1, 0) == settingsREG1 && (uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_RES_CONF, 0) == settingsRES){
 8003124:	2200      	movs	r2, #0
 8003126:	2120      	movs	r1, #32
 8003128:	20bb      	movs	r0, #187	@ 0xbb
 800312a:	f7fe f875 	bl	8001218 <i2c_read>
 800312e:	4602      	mov	r2, r0
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d10b      	bne.n	800314e <lps25hb_Init+0x96>
 8003136:	2200      	movs	r2, #0
 8003138:	2110      	movs	r1, #16
 800313a:	20bb      	movs	r0, #187	@ 0xbb
 800313c:	f7fe f86c 	bl	8001218 <i2c_read>
 8003140:	4602      	mov	r2, r0
 8003142:	797b      	ldrb	r3, [r7, #5]
 8003144:	429a      	cmp	r2, r3
 8003146:	d102      	bne.n	800314e <lps25hb_Init+0x96>
			writeSettingsSensor=1;
 8003148:	4b10      	ldr	r3, [pc, #64]	@ (800318c <lps25hb_Init+0xd4>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
	}
	//Sensor settings [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Offset read value [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	pressureOffset=(uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_RPDS_L, 2);
 800314e:	2202      	movs	r2, #2
 8003150:	2139      	movs	r1, #57	@ 0x39
 8003152:	20bb      	movs	r0, #187	@ 0xbb
 8003154:	f7fe f860 	bl	8001218 <i2c_read>
 8003158:	4603      	mov	r3, r0
 800315a:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <lps25hb_Init+0xd8>)
 800315c:	6013      	str	r3, [r2, #0]

	//Offset read value [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***


	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]
	if(whoAmI && writeSettingsSensor){
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <lps25hb_Init+0xd0>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <lps25hb_Init+0xc4>
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <lps25hb_Init+0xd4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <lps25hb_Init+0xc4>
		USART2_PutBuffer(usartMsgSensorSetlps25hb, sizeof(usartMsgSensorSetlps25hb));
 800316e:	210e      	movs	r1, #14
 8003170:	4808      	ldr	r0, [pc, #32]	@ (8003194 <lps25hb_Init+0xdc>)
 8003172:	f7ff f91b 	bl	80023ac <USART2_PutBuffer>
		LL_mDelay(100);
 8003176:	2064      	movs	r0, #100	@ 0x64
 8003178:	f7ff fe60 	bl	8002e3c <LL_mDelay>
	}
	//Check of setup [_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_][_]***
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000033c 	.word	0x2000033c
 8003188:	20000340 	.word	0x20000340
 800318c:	20000341 	.word	0x20000341
 8003190:	2000034c 	.word	0x2000034c
 8003194:	20000080 	.word	0x20000080

08003198 <pressureRead>:

float pressureRead(void){
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	pressureData=0;
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <pressureRead+0x50>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
	pressureData=(uint32_t)i2c_read(LPS25HB_DEVICE_ADDRESS_READ_1, LPS25HB_PRESS_OUT_XL, 3);
 80031a2:	2203      	movs	r2, #3
 80031a4:	2128      	movs	r1, #40	@ 0x28
 80031a6:	20bb      	movs	r0, #187	@ 0xbb
 80031a8:	f7fe f836 	bl	8001218 <i2c_read>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a0e      	ldr	r2, [pc, #56]	@ (80031e8 <pressureRead+0x50>)
 80031b0:	6013      	str	r3, [r2, #0]
	pressureDataF=0;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <pressureRead+0x54>)
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
	pressureDataF=(float)(pressureData+pressureOffset)/4096;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <pressureRead+0x50>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <pressureRead+0x58>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031cc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80031f4 <pressureRead+0x5c>
 80031d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <pressureRead+0x54>)
 80031d6:	edc3 7a00 	vstr	s15, [r3]
	//pressureData=~pressureOffset+1;
	return pressureDataF;
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <pressureRead+0x54>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	ee07 3a90 	vmov	s15, r3
}
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000344 	.word	0x20000344
 80031ec:	20000348 	.word	0x20000348
 80031f0:	2000034c 	.word	0x2000034c
 80031f4:	45800000 	.word	0x45800000

080031f8 <heightCalculation>:

double heightCalculation(float basePressure, float currentPressure, float temp){
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003202:	edc7 0a02 	vstr	s1, [r7, #8]
 8003206:	ed87 1a01 	vstr	s2, [r7, #4]
	return ( ( (double)287.05 * (double)temp) / (double)9.80665 )*(log(basePressure/currentPressure));
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	a319      	add	r3, pc, #100	@ (adr r3, 8003278 <heightCalculation+0x80>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd f9ef 	bl	80005f8 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	a317      	add	r3, pc, #92	@ (adr r3, 8003280 <heightCalculation+0x88>)
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd fb10 	bl	800084c <__aeabi_ddiv>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	ed97 7a03 	vldr	s14, [r7, #12]
 8003238:	edd7 7a02 	vldr	s15, [r7, #8]
 800323c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003240:	ee16 0a90 	vmov	r0, s13
 8003244:	f7fd f980 	bl	8000548 <__aeabi_f2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	ec43 2b10 	vmov	d0, r2, r3
 8003250:	f002 fe96 	bl	8005f80 <log>
 8003254:	ec53 2b10 	vmov	r2, r3, d0
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f7fd f9cc 	bl	80005f8 <__aeabi_dmul>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	ec43 2b17 	vmov	d7, r2, r3
}
 8003268:	eeb0 0a47 	vmov.f32	s0, s14
 800326c:	eef0 0a67 	vmov.f32	s1, s15
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
 8003276:	bf00      	nop
 8003278:	cccccccd 	.word	0xcccccccd
 800327c:	4071f0cc 	.word	0x4071f0cc
 8003280:	3a92a305 	.word	0x3a92a305
 8003284:	40239d01 	.word	0x40239d01

08003288 <__cvt>:
 8003288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800328c:	ec57 6b10 	vmov	r6, r7, d0
 8003290:	2f00      	cmp	r7, #0
 8003292:	460c      	mov	r4, r1
 8003294:	4619      	mov	r1, r3
 8003296:	463b      	mov	r3, r7
 8003298:	bfbb      	ittet	lt
 800329a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800329e:	461f      	movlt	r7, r3
 80032a0:	2300      	movge	r3, #0
 80032a2:	232d      	movlt	r3, #45	@ 0x2d
 80032a4:	700b      	strb	r3, [r1, #0]
 80032a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80032ac:	4691      	mov	r9, r2
 80032ae:	f023 0820 	bic.w	r8, r3, #32
 80032b2:	bfbc      	itt	lt
 80032b4:	4632      	movlt	r2, r6
 80032b6:	4616      	movlt	r6, r2
 80032b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032bc:	d005      	beq.n	80032ca <__cvt+0x42>
 80032be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032c2:	d100      	bne.n	80032c6 <__cvt+0x3e>
 80032c4:	3401      	adds	r4, #1
 80032c6:	2102      	movs	r1, #2
 80032c8:	e000      	b.n	80032cc <__cvt+0x44>
 80032ca:	2103      	movs	r1, #3
 80032cc:	ab03      	add	r3, sp, #12
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	ab02      	add	r3, sp, #8
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	ec47 6b10 	vmov	d0, r6, r7
 80032d8:	4653      	mov	r3, sl
 80032da:	4622      	mov	r2, r4
 80032dc:	f000 fe90 	bl	8004000 <_dtoa_r>
 80032e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032e4:	4605      	mov	r5, r0
 80032e6:	d119      	bne.n	800331c <__cvt+0x94>
 80032e8:	f019 0f01 	tst.w	r9, #1
 80032ec:	d00e      	beq.n	800330c <__cvt+0x84>
 80032ee:	eb00 0904 	add.w	r9, r0, r4
 80032f2:	2200      	movs	r2, #0
 80032f4:	2300      	movs	r3, #0
 80032f6:	4630      	mov	r0, r6
 80032f8:	4639      	mov	r1, r7
 80032fa:	f7fd fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80032fe:	b108      	cbz	r0, 8003304 <__cvt+0x7c>
 8003300:	f8cd 900c 	str.w	r9, [sp, #12]
 8003304:	2230      	movs	r2, #48	@ 0x30
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	454b      	cmp	r3, r9
 800330a:	d31e      	bcc.n	800334a <__cvt+0xc2>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003310:	1b5b      	subs	r3, r3, r5
 8003312:	4628      	mov	r0, r5
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	b004      	add	sp, #16
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003320:	eb00 0904 	add.w	r9, r0, r4
 8003324:	d1e5      	bne.n	80032f2 <__cvt+0x6a>
 8003326:	7803      	ldrb	r3, [r0, #0]
 8003328:	2b30      	cmp	r3, #48	@ 0x30
 800332a:	d10a      	bne.n	8003342 <__cvt+0xba>
 800332c:	2200      	movs	r2, #0
 800332e:	2300      	movs	r3, #0
 8003330:	4630      	mov	r0, r6
 8003332:	4639      	mov	r1, r7
 8003334:	f7fd fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003338:	b918      	cbnz	r0, 8003342 <__cvt+0xba>
 800333a:	f1c4 0401 	rsb	r4, r4, #1
 800333e:	f8ca 4000 	str.w	r4, [sl]
 8003342:	f8da 3000 	ldr.w	r3, [sl]
 8003346:	4499      	add	r9, r3
 8003348:	e7d3      	b.n	80032f2 <__cvt+0x6a>
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	9103      	str	r1, [sp, #12]
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e7d9      	b.n	8003306 <__cvt+0x7e>

08003352 <__exponent>:
 8003352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003354:	2900      	cmp	r1, #0
 8003356:	bfba      	itte	lt
 8003358:	4249      	neglt	r1, r1
 800335a:	232d      	movlt	r3, #45	@ 0x2d
 800335c:	232b      	movge	r3, #43	@ 0x2b
 800335e:	2909      	cmp	r1, #9
 8003360:	7002      	strb	r2, [r0, #0]
 8003362:	7043      	strb	r3, [r0, #1]
 8003364:	dd29      	ble.n	80033ba <__exponent+0x68>
 8003366:	f10d 0307 	add.w	r3, sp, #7
 800336a:	461d      	mov	r5, r3
 800336c:	270a      	movs	r7, #10
 800336e:	461a      	mov	r2, r3
 8003370:	fbb1 f6f7 	udiv	r6, r1, r7
 8003374:	fb07 1416 	mls	r4, r7, r6, r1
 8003378:	3430      	adds	r4, #48	@ 0x30
 800337a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800337e:	460c      	mov	r4, r1
 8003380:	2c63      	cmp	r4, #99	@ 0x63
 8003382:	f103 33ff 	add.w	r3, r3, #4294967295
 8003386:	4631      	mov	r1, r6
 8003388:	dcf1      	bgt.n	800336e <__exponent+0x1c>
 800338a:	3130      	adds	r1, #48	@ 0x30
 800338c:	1e94      	subs	r4, r2, #2
 800338e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003392:	1c41      	adds	r1, r0, #1
 8003394:	4623      	mov	r3, r4
 8003396:	42ab      	cmp	r3, r5
 8003398:	d30a      	bcc.n	80033b0 <__exponent+0x5e>
 800339a:	f10d 0309 	add.w	r3, sp, #9
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ac      	cmp	r4, r5
 80033a2:	bf88      	it	hi
 80033a4:	2300      	movhi	r3, #0
 80033a6:	3302      	adds	r3, #2
 80033a8:	4403      	add	r3, r0
 80033aa:	1a18      	subs	r0, r3, r0
 80033ac:	b003      	add	sp, #12
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033b8:	e7ed      	b.n	8003396 <__exponent+0x44>
 80033ba:	2330      	movs	r3, #48	@ 0x30
 80033bc:	3130      	adds	r1, #48	@ 0x30
 80033be:	7083      	strb	r3, [r0, #2]
 80033c0:	70c1      	strb	r1, [r0, #3]
 80033c2:	1d03      	adds	r3, r0, #4
 80033c4:	e7f1      	b.n	80033aa <__exponent+0x58>
	...

080033c8 <_printf_float>:
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	b08d      	sub	sp, #52	@ 0x34
 80033ce:	460c      	mov	r4, r1
 80033d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80033d4:	4616      	mov	r6, r2
 80033d6:	461f      	mov	r7, r3
 80033d8:	4605      	mov	r5, r0
 80033da:	f000 fd0f 	bl	8003dfc <_localeconv_r>
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	9304      	str	r3, [sp, #16]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fc ff44 	bl	8000270 <strlen>
 80033e8:	2300      	movs	r3, #0
 80033ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80033ec:	f8d8 3000 	ldr.w	r3, [r8]
 80033f0:	9005      	str	r0, [sp, #20]
 80033f2:	3307      	adds	r3, #7
 80033f4:	f023 0307 	bic.w	r3, r3, #7
 80033f8:	f103 0208 	add.w	r2, r3, #8
 80033fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003400:	f8d4 b000 	ldr.w	fp, [r4]
 8003404:	f8c8 2000 	str.w	r2, [r8]
 8003408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800340c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003410:	9307      	str	r3, [sp, #28]
 8003412:	f8cd 8018 	str.w	r8, [sp, #24]
 8003416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800341a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800341e:	4b9c      	ldr	r3, [pc, #624]	@ (8003690 <_printf_float+0x2c8>)
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	f7fd fb82 	bl	8000b2c <__aeabi_dcmpun>
 8003428:	bb70      	cbnz	r0, 8003488 <_printf_float+0xc0>
 800342a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800342e:	4b98      	ldr	r3, [pc, #608]	@ (8003690 <_printf_float+0x2c8>)
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	f7fd fb5c 	bl	8000af0 <__aeabi_dcmple>
 8003438:	bb30      	cbnz	r0, 8003488 <_printf_float+0xc0>
 800343a:	2200      	movs	r2, #0
 800343c:	2300      	movs	r3, #0
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fd fb4b 	bl	8000adc <__aeabi_dcmplt>
 8003446:	b110      	cbz	r0, 800344e <_printf_float+0x86>
 8003448:	232d      	movs	r3, #45	@ 0x2d
 800344a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800344e:	4a91      	ldr	r2, [pc, #580]	@ (8003694 <_printf_float+0x2cc>)
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <_printf_float+0x2d0>)
 8003452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003456:	bf94      	ite	ls
 8003458:	4690      	movls	r8, r2
 800345a:	4698      	movhi	r8, r3
 800345c:	2303      	movs	r3, #3
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	f02b 0304 	bic.w	r3, fp, #4
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	f04f 0900 	mov.w	r9, #0
 800346a:	9700      	str	r7, [sp, #0]
 800346c:	4633      	mov	r3, r6
 800346e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003470:	4621      	mov	r1, r4
 8003472:	4628      	mov	r0, r5
 8003474:	f000 f9d2 	bl	800381c <_printf_common>
 8003478:	3001      	adds	r0, #1
 800347a:	f040 808d 	bne.w	8003598 <_printf_float+0x1d0>
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	b00d      	add	sp, #52	@ 0x34
 8003484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	4640      	mov	r0, r8
 800348e:	4649      	mov	r1, r9
 8003490:	f7fd fb4c 	bl	8000b2c <__aeabi_dcmpun>
 8003494:	b140      	cbz	r0, 80034a8 <_printf_float+0xe0>
 8003496:	464b      	mov	r3, r9
 8003498:	2b00      	cmp	r3, #0
 800349a:	bfbc      	itt	lt
 800349c:	232d      	movlt	r3, #45	@ 0x2d
 800349e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <_printf_float+0x2d4>)
 80034a4:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <_printf_float+0x2d8>)
 80034a6:	e7d4      	b.n	8003452 <_printf_float+0x8a>
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80034ae:	9206      	str	r2, [sp, #24]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	d13b      	bne.n	800352c <_printf_float+0x164>
 80034b4:	2306      	movs	r3, #6
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80034bc:	2300      	movs	r3, #0
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80034c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80034c8:	ab09      	add	r3, sp, #36	@ 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6861      	ldr	r1, [r4, #4]
 80034ce:	ec49 8b10 	vmov	d0, r8, r9
 80034d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7ff fed6 	bl	8003288 <__cvt>
 80034dc:	9b06      	ldr	r3, [sp, #24]
 80034de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034e0:	2b47      	cmp	r3, #71	@ 0x47
 80034e2:	4680      	mov	r8, r0
 80034e4:	d129      	bne.n	800353a <_printf_float+0x172>
 80034e6:	1cc8      	adds	r0, r1, #3
 80034e8:	db02      	blt.n	80034f0 <_printf_float+0x128>
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	4299      	cmp	r1, r3
 80034ee:	dd41      	ble.n	8003574 <_printf_float+0x1ac>
 80034f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80034f4:	fa5f fa8a 	uxtb.w	sl, sl
 80034f8:	3901      	subs	r1, #1
 80034fa:	4652      	mov	r2, sl
 80034fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003500:	9109      	str	r1, [sp, #36]	@ 0x24
 8003502:	f7ff ff26 	bl	8003352 <__exponent>
 8003506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003508:	1813      	adds	r3, r2, r0
 800350a:	2a01      	cmp	r2, #1
 800350c:	4681      	mov	r9, r0
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	dc02      	bgt.n	8003518 <_printf_float+0x150>
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	07d2      	lsls	r2, r2, #31
 8003516:	d501      	bpl.n	800351c <_printf_float+0x154>
 8003518:	3301      	adds	r3, #1
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0a2      	beq.n	800346a <_printf_float+0xa2>
 8003524:	232d      	movs	r3, #45	@ 0x2d
 8003526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800352a:	e79e      	b.n	800346a <_printf_float+0xa2>
 800352c:	9a06      	ldr	r2, [sp, #24]
 800352e:	2a47      	cmp	r2, #71	@ 0x47
 8003530:	d1c2      	bne.n	80034b8 <_printf_float+0xf0>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1c0      	bne.n	80034b8 <_printf_float+0xf0>
 8003536:	2301      	movs	r3, #1
 8003538:	e7bd      	b.n	80034b6 <_printf_float+0xee>
 800353a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800353e:	d9db      	bls.n	80034f8 <_printf_float+0x130>
 8003540:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003544:	d118      	bne.n	8003578 <_printf_float+0x1b0>
 8003546:	2900      	cmp	r1, #0
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	dd0b      	ble.n	8003564 <_printf_float+0x19c>
 800354c:	6121      	str	r1, [r4, #16]
 800354e:	b913      	cbnz	r3, 8003556 <_printf_float+0x18e>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	07d0      	lsls	r0, r2, #31
 8003554:	d502      	bpl.n	800355c <_printf_float+0x194>
 8003556:	3301      	adds	r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	6123      	str	r3, [r4, #16]
 800355c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800355e:	f04f 0900 	mov.w	r9, #0
 8003562:	e7db      	b.n	800351c <_printf_float+0x154>
 8003564:	b913      	cbnz	r3, 800356c <_printf_float+0x1a4>
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	07d2      	lsls	r2, r2, #31
 800356a:	d501      	bpl.n	8003570 <_printf_float+0x1a8>
 800356c:	3302      	adds	r3, #2
 800356e:	e7f4      	b.n	800355a <_printf_float+0x192>
 8003570:	2301      	movs	r3, #1
 8003572:	e7f2      	b.n	800355a <_printf_float+0x192>
 8003574:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800357a:	4299      	cmp	r1, r3
 800357c:	db05      	blt.n	800358a <_printf_float+0x1c2>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	6121      	str	r1, [r4, #16]
 8003582:	07d8      	lsls	r0, r3, #31
 8003584:	d5ea      	bpl.n	800355c <_printf_float+0x194>
 8003586:	1c4b      	adds	r3, r1, #1
 8003588:	e7e7      	b.n	800355a <_printf_float+0x192>
 800358a:	2900      	cmp	r1, #0
 800358c:	bfd4      	ite	le
 800358e:	f1c1 0202 	rsble	r2, r1, #2
 8003592:	2201      	movgt	r2, #1
 8003594:	4413      	add	r3, r2
 8003596:	e7e0      	b.n	800355a <_printf_float+0x192>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	055a      	lsls	r2, r3, #21
 800359c:	d407      	bmi.n	80035ae <_printf_float+0x1e6>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	4642      	mov	r2, r8
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	d12b      	bne.n	8003604 <_printf_float+0x23c>
 80035ac:	e767      	b.n	800347e <_printf_float+0xb6>
 80035ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035b2:	f240 80dd 	bls.w	8003770 <_printf_float+0x3a8>
 80035b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ba:	2200      	movs	r2, #0
 80035bc:	2300      	movs	r3, #0
 80035be:	f7fd fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d033      	beq.n	800362e <_printf_float+0x266>
 80035c6:	4a37      	ldr	r2, [pc, #220]	@ (80036a4 <_printf_float+0x2dc>)
 80035c8:	2301      	movs	r3, #1
 80035ca:	4631      	mov	r1, r6
 80035cc:	4628      	mov	r0, r5
 80035ce:	47b8      	blx	r7
 80035d0:	3001      	adds	r0, #1
 80035d2:	f43f af54 	beq.w	800347e <_printf_float+0xb6>
 80035d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80035da:	4543      	cmp	r3, r8
 80035dc:	db02      	blt.n	80035e4 <_printf_float+0x21c>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	07d8      	lsls	r0, r3, #31
 80035e2:	d50f      	bpl.n	8003604 <_printf_float+0x23c>
 80035e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f af45 	beq.w	800347e <_printf_float+0xb6>
 80035f4:	f04f 0900 	mov.w	r9, #0
 80035f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80035fc:	f104 0a1a 	add.w	sl, r4, #26
 8003600:	45c8      	cmp	r8, r9
 8003602:	dc09      	bgt.n	8003618 <_printf_float+0x250>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	f100 8103 	bmi.w	8003812 <_printf_float+0x44a>
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003610:	4298      	cmp	r0, r3
 8003612:	bfb8      	it	lt
 8003614:	4618      	movlt	r0, r3
 8003616:	e734      	b.n	8003482 <_printf_float+0xba>
 8003618:	2301      	movs	r3, #1
 800361a:	4652      	mov	r2, sl
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af2b 	beq.w	800347e <_printf_float+0xb6>
 8003628:	f109 0901 	add.w	r9, r9, #1
 800362c:	e7e8      	b.n	8003600 <_printf_float+0x238>
 800362e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	dc39      	bgt.n	80036a8 <_printf_float+0x2e0>
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <_printf_float+0x2dc>)
 8003636:	2301      	movs	r3, #1
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af1d 	beq.w	800347e <_printf_float+0xb6>
 8003644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003648:	ea59 0303 	orrs.w	r3, r9, r3
 800364c:	d102      	bne.n	8003654 <_printf_float+0x28c>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	07d9      	lsls	r1, r3, #31
 8003652:	d5d7      	bpl.n	8003604 <_printf_float+0x23c>
 8003654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f af0d 	beq.w	800347e <_printf_float+0xb6>
 8003664:	f04f 0a00 	mov.w	sl, #0
 8003668:	f104 0b1a 	add.w	fp, r4, #26
 800366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800366e:	425b      	negs	r3, r3
 8003670:	4553      	cmp	r3, sl
 8003672:	dc01      	bgt.n	8003678 <_printf_float+0x2b0>
 8003674:	464b      	mov	r3, r9
 8003676:	e793      	b.n	80035a0 <_printf_float+0x1d8>
 8003678:	2301      	movs	r3, #1
 800367a:	465a      	mov	r2, fp
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f aefb 	beq.w	800347e <_printf_float+0xb6>
 8003688:	f10a 0a01 	add.w	sl, sl, #1
 800368c:	e7ee      	b.n	800366c <_printf_float+0x2a4>
 800368e:	bf00      	nop
 8003690:	7fefffff 	.word	0x7fefffff
 8003694:	0800641b 	.word	0x0800641b
 8003698:	0800641f 	.word	0x0800641f
 800369c:	08006423 	.word	0x08006423
 80036a0:	08006427 	.word	0x08006427
 80036a4:	0800642b 	.word	0x0800642b
 80036a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036ae:	4553      	cmp	r3, sl
 80036b0:	bfa8      	it	ge
 80036b2:	4653      	movge	r3, sl
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	4699      	mov	r9, r3
 80036b8:	dc36      	bgt.n	8003728 <_printf_float+0x360>
 80036ba:	f04f 0b00 	mov.w	fp, #0
 80036be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c2:	f104 021a 	add.w	r2, r4, #26
 80036c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036c8:	9306      	str	r3, [sp, #24]
 80036ca:	eba3 0309 	sub.w	r3, r3, r9
 80036ce:	455b      	cmp	r3, fp
 80036d0:	dc31      	bgt.n	8003736 <_printf_float+0x36e>
 80036d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036d4:	459a      	cmp	sl, r3
 80036d6:	dc3a      	bgt.n	800374e <_printf_float+0x386>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d437      	bmi.n	800374e <_printf_float+0x386>
 80036de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036e0:	ebaa 0903 	sub.w	r9, sl, r3
 80036e4:	9b06      	ldr	r3, [sp, #24]
 80036e6:	ebaa 0303 	sub.w	r3, sl, r3
 80036ea:	4599      	cmp	r9, r3
 80036ec:	bfa8      	it	ge
 80036ee:	4699      	movge	r9, r3
 80036f0:	f1b9 0f00 	cmp.w	r9, #0
 80036f4:	dc33      	bgt.n	800375e <_printf_float+0x396>
 80036f6:	f04f 0800 	mov.w	r8, #0
 80036fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fe:	f104 0b1a 	add.w	fp, r4, #26
 8003702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003704:	ebaa 0303 	sub.w	r3, sl, r3
 8003708:	eba3 0309 	sub.w	r3, r3, r9
 800370c:	4543      	cmp	r3, r8
 800370e:	f77f af79 	ble.w	8003604 <_printf_float+0x23c>
 8003712:	2301      	movs	r3, #1
 8003714:	465a      	mov	r2, fp
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f aeae 	beq.w	800347e <_printf_float+0xb6>
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	e7ec      	b.n	8003702 <_printf_float+0x33a>
 8003728:	4642      	mov	r2, r8
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	d1c2      	bne.n	80036ba <_printf_float+0x2f2>
 8003734:	e6a3      	b.n	800347e <_printf_float+0xb6>
 8003736:	2301      	movs	r3, #1
 8003738:	4631      	mov	r1, r6
 800373a:	4628      	mov	r0, r5
 800373c:	9206      	str	r2, [sp, #24]
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	f43f ae9c 	beq.w	800347e <_printf_float+0xb6>
 8003746:	9a06      	ldr	r2, [sp, #24]
 8003748:	f10b 0b01 	add.w	fp, fp, #1
 800374c:	e7bb      	b.n	80036c6 <_printf_float+0x2fe>
 800374e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	d1c0      	bne.n	80036de <_printf_float+0x316>
 800375c:	e68f      	b.n	800347e <_printf_float+0xb6>
 800375e:	9a06      	ldr	r2, [sp, #24]
 8003760:	464b      	mov	r3, r9
 8003762:	4442      	add	r2, r8
 8003764:	4631      	mov	r1, r6
 8003766:	4628      	mov	r0, r5
 8003768:	47b8      	blx	r7
 800376a:	3001      	adds	r0, #1
 800376c:	d1c3      	bne.n	80036f6 <_printf_float+0x32e>
 800376e:	e686      	b.n	800347e <_printf_float+0xb6>
 8003770:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003774:	f1ba 0f01 	cmp.w	sl, #1
 8003778:	dc01      	bgt.n	800377e <_printf_float+0x3b6>
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d536      	bpl.n	80037ec <_printf_float+0x424>
 800377e:	2301      	movs	r3, #1
 8003780:	4642      	mov	r2, r8
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	47b8      	blx	r7
 8003788:	3001      	adds	r0, #1
 800378a:	f43f ae78 	beq.w	800347e <_printf_float+0xb6>
 800378e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003792:	4631      	mov	r1, r6
 8003794:	4628      	mov	r0, r5
 8003796:	47b8      	blx	r7
 8003798:	3001      	adds	r0, #1
 800379a:	f43f ae70 	beq.w	800347e <_printf_float+0xb6>
 800379e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037a2:	2200      	movs	r2, #0
 80037a4:	2300      	movs	r3, #0
 80037a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037aa:	f7fd f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80037ae:	b9c0      	cbnz	r0, 80037e2 <_printf_float+0x41a>
 80037b0:	4653      	mov	r3, sl
 80037b2:	f108 0201 	add.w	r2, r8, #1
 80037b6:	4631      	mov	r1, r6
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b8      	blx	r7
 80037bc:	3001      	adds	r0, #1
 80037be:	d10c      	bne.n	80037da <_printf_float+0x412>
 80037c0:	e65d      	b.n	800347e <_printf_float+0xb6>
 80037c2:	2301      	movs	r3, #1
 80037c4:	465a      	mov	r2, fp
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f ae56 	beq.w	800347e <_printf_float+0xb6>
 80037d2:	f108 0801 	add.w	r8, r8, #1
 80037d6:	45d0      	cmp	r8, sl
 80037d8:	dbf3      	blt.n	80037c2 <_printf_float+0x3fa>
 80037da:	464b      	mov	r3, r9
 80037dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037e0:	e6df      	b.n	80035a2 <_printf_float+0x1da>
 80037e2:	f04f 0800 	mov.w	r8, #0
 80037e6:	f104 0b1a 	add.w	fp, r4, #26
 80037ea:	e7f4      	b.n	80037d6 <_printf_float+0x40e>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4642      	mov	r2, r8
 80037f0:	e7e1      	b.n	80037b6 <_printf_float+0x3ee>
 80037f2:	2301      	movs	r3, #1
 80037f4:	464a      	mov	r2, r9
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	47b8      	blx	r7
 80037fc:	3001      	adds	r0, #1
 80037fe:	f43f ae3e 	beq.w	800347e <_printf_float+0xb6>
 8003802:	f108 0801 	add.w	r8, r8, #1
 8003806:	68e3      	ldr	r3, [r4, #12]
 8003808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800380a:	1a5b      	subs	r3, r3, r1
 800380c:	4543      	cmp	r3, r8
 800380e:	dcf0      	bgt.n	80037f2 <_printf_float+0x42a>
 8003810:	e6fc      	b.n	800360c <_printf_float+0x244>
 8003812:	f04f 0800 	mov.w	r8, #0
 8003816:	f104 0919 	add.w	r9, r4, #25
 800381a:	e7f4      	b.n	8003806 <_printf_float+0x43e>

0800381c <_printf_common>:
 800381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003820:	4616      	mov	r6, r2
 8003822:	4698      	mov	r8, r3
 8003824:	688a      	ldr	r2, [r1, #8]
 8003826:	690b      	ldr	r3, [r1, #16]
 8003828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800382c:	4293      	cmp	r3, r2
 800382e:	bfb8      	it	lt
 8003830:	4613      	movlt	r3, r2
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003838:	4607      	mov	r7, r0
 800383a:	460c      	mov	r4, r1
 800383c:	b10a      	cbz	r2, 8003842 <_printf_common+0x26>
 800383e:	3301      	adds	r3, #1
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	0699      	lsls	r1, r3, #26
 8003846:	bf42      	ittt	mi
 8003848:	6833      	ldrmi	r3, [r6, #0]
 800384a:	3302      	addmi	r3, #2
 800384c:	6033      	strmi	r3, [r6, #0]
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	f015 0506 	ands.w	r5, r5, #6
 8003854:	d106      	bne.n	8003864 <_printf_common+0x48>
 8003856:	f104 0a19 	add.w	sl, r4, #25
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	6832      	ldr	r2, [r6, #0]
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	42ab      	cmp	r3, r5
 8003862:	dc26      	bgt.n	80038b2 <_printf_common+0x96>
 8003864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	3b00      	subs	r3, #0
 800386c:	bf18      	it	ne
 800386e:	2301      	movne	r3, #1
 8003870:	0692      	lsls	r2, r2, #26
 8003872:	d42b      	bmi.n	80038cc <_printf_common+0xb0>
 8003874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003878:	4641      	mov	r1, r8
 800387a:	4638      	mov	r0, r7
 800387c:	47c8      	blx	r9
 800387e:	3001      	adds	r0, #1
 8003880:	d01e      	beq.n	80038c0 <_printf_common+0xa4>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	6922      	ldr	r2, [r4, #16]
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf02      	ittt	eq
 800388e:	68e5      	ldreq	r5, [r4, #12]
 8003890:	6833      	ldreq	r3, [r6, #0]
 8003892:	1aed      	subeq	r5, r5, r3
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	bf0c      	ite	eq
 8003898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800389c:	2500      	movne	r5, #0
 800389e:	4293      	cmp	r3, r2
 80038a0:	bfc4      	itt	gt
 80038a2:	1a9b      	subgt	r3, r3, r2
 80038a4:	18ed      	addgt	r5, r5, r3
 80038a6:	2600      	movs	r6, #0
 80038a8:	341a      	adds	r4, #26
 80038aa:	42b5      	cmp	r5, r6
 80038ac:	d11a      	bne.n	80038e4 <_printf_common+0xc8>
 80038ae:	2000      	movs	r0, #0
 80038b0:	e008      	b.n	80038c4 <_printf_common+0xa8>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4652      	mov	r2, sl
 80038b6:	4641      	mov	r1, r8
 80038b8:	4638      	mov	r0, r7
 80038ba:	47c8      	blx	r9
 80038bc:	3001      	adds	r0, #1
 80038be:	d103      	bne.n	80038c8 <_printf_common+0xac>
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7c6      	b.n	800385a <_printf_common+0x3e>
 80038cc:	18e1      	adds	r1, r4, r3
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	2030      	movs	r0, #48	@ 0x30
 80038d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038d6:	4422      	add	r2, r4
 80038d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038e0:	3302      	adds	r3, #2
 80038e2:	e7c7      	b.n	8003874 <_printf_common+0x58>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4622      	mov	r2, r4
 80038e8:	4641      	mov	r1, r8
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c8      	blx	r9
 80038ee:	3001      	adds	r0, #1
 80038f0:	d0e6      	beq.n	80038c0 <_printf_common+0xa4>
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7d9      	b.n	80038aa <_printf_common+0x8e>
	...

080038f8 <_printf_i>:
 80038f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	7e0f      	ldrb	r7, [r1, #24]
 80038fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003900:	2f78      	cmp	r7, #120	@ 0x78
 8003902:	4691      	mov	r9, r2
 8003904:	4680      	mov	r8, r0
 8003906:	460c      	mov	r4, r1
 8003908:	469a      	mov	sl, r3
 800390a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800390e:	d807      	bhi.n	8003920 <_printf_i+0x28>
 8003910:	2f62      	cmp	r7, #98	@ 0x62
 8003912:	d80a      	bhi.n	800392a <_printf_i+0x32>
 8003914:	2f00      	cmp	r7, #0
 8003916:	f000 80d2 	beq.w	8003abe <_printf_i+0x1c6>
 800391a:	2f58      	cmp	r7, #88	@ 0x58
 800391c:	f000 80b9 	beq.w	8003a92 <_printf_i+0x19a>
 8003920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003928:	e03a      	b.n	80039a0 <_printf_i+0xa8>
 800392a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800392e:	2b15      	cmp	r3, #21
 8003930:	d8f6      	bhi.n	8003920 <_printf_i+0x28>
 8003932:	a101      	add	r1, pc, #4	@ (adr r1, 8003938 <_printf_i+0x40>)
 8003934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003938:	08003991 	.word	0x08003991
 800393c:	080039a5 	.word	0x080039a5
 8003940:	08003921 	.word	0x08003921
 8003944:	08003921 	.word	0x08003921
 8003948:	08003921 	.word	0x08003921
 800394c:	08003921 	.word	0x08003921
 8003950:	080039a5 	.word	0x080039a5
 8003954:	08003921 	.word	0x08003921
 8003958:	08003921 	.word	0x08003921
 800395c:	08003921 	.word	0x08003921
 8003960:	08003921 	.word	0x08003921
 8003964:	08003aa5 	.word	0x08003aa5
 8003968:	080039cf 	.word	0x080039cf
 800396c:	08003a5f 	.word	0x08003a5f
 8003970:	08003921 	.word	0x08003921
 8003974:	08003921 	.word	0x08003921
 8003978:	08003ac7 	.word	0x08003ac7
 800397c:	08003921 	.word	0x08003921
 8003980:	080039cf 	.word	0x080039cf
 8003984:	08003921 	.word	0x08003921
 8003988:	08003921 	.word	0x08003921
 800398c:	08003a67 	.word	0x08003a67
 8003990:	6833      	ldr	r3, [r6, #0]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6032      	str	r2, [r6, #0]
 8003998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039a0:	2301      	movs	r3, #1
 80039a2:	e09d      	b.n	8003ae0 <_printf_i+0x1e8>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	6031      	str	r1, [r6, #0]
 80039ac:	0606      	lsls	r6, r0, #24
 80039ae:	d501      	bpl.n	80039b4 <_printf_i+0xbc>
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	e003      	b.n	80039bc <_printf_i+0xc4>
 80039b4:	0645      	lsls	r5, r0, #25
 80039b6:	d5fb      	bpl.n	80039b0 <_printf_i+0xb8>
 80039b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039bc:	2d00      	cmp	r5, #0
 80039be:	da03      	bge.n	80039c8 <_printf_i+0xd0>
 80039c0:	232d      	movs	r3, #45	@ 0x2d
 80039c2:	426d      	negs	r5, r5
 80039c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039c8:	4859      	ldr	r0, [pc, #356]	@ (8003b30 <_printf_i+0x238>)
 80039ca:	230a      	movs	r3, #10
 80039cc:	e011      	b.n	80039f2 <_printf_i+0xfa>
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	0608      	lsls	r0, r1, #24
 80039d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039d8:	d402      	bmi.n	80039e0 <_printf_i+0xe8>
 80039da:	0649      	lsls	r1, r1, #25
 80039dc:	bf48      	it	mi
 80039de:	b2ad      	uxthmi	r5, r5
 80039e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039e2:	4853      	ldr	r0, [pc, #332]	@ (8003b30 <_printf_i+0x238>)
 80039e4:	6033      	str	r3, [r6, #0]
 80039e6:	bf14      	ite	ne
 80039e8:	230a      	movne	r3, #10
 80039ea:	2308      	moveq	r3, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039f2:	6866      	ldr	r6, [r4, #4]
 80039f4:	60a6      	str	r6, [r4, #8]
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	bfa2      	ittt	ge
 80039fa:	6821      	ldrge	r1, [r4, #0]
 80039fc:	f021 0104 	bicge.w	r1, r1, #4
 8003a00:	6021      	strge	r1, [r4, #0]
 8003a02:	b90d      	cbnz	r5, 8003a08 <_printf_i+0x110>
 8003a04:	2e00      	cmp	r6, #0
 8003a06:	d04b      	beq.n	8003aa0 <_printf_i+0x1a8>
 8003a08:	4616      	mov	r6, r2
 8003a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a12:	5dc7      	ldrb	r7, [r0, r7]
 8003a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a18:	462f      	mov	r7, r5
 8003a1a:	42bb      	cmp	r3, r7
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	d9f4      	bls.n	8003a0a <_printf_i+0x112>
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d10b      	bne.n	8003a3c <_printf_i+0x144>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	07df      	lsls	r7, r3, #31
 8003a28:	d508      	bpl.n	8003a3c <_printf_i+0x144>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	6861      	ldr	r1, [r4, #4]
 8003a2e:	4299      	cmp	r1, r3
 8003a30:	bfde      	ittt	le
 8003a32:	2330      	movle	r3, #48	@ 0x30
 8003a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a3c:	1b92      	subs	r2, r2, r6
 8003a3e:	6122      	str	r2, [r4, #16]
 8003a40:	f8cd a000 	str.w	sl, [sp]
 8003a44:	464b      	mov	r3, r9
 8003a46:	aa03      	add	r2, sp, #12
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f7ff fee6 	bl	800381c <_printf_common>
 8003a50:	3001      	adds	r0, #1
 8003a52:	d14a      	bne.n	8003aea <_printf_i+0x1f2>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	b004      	add	sp, #16
 8003a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	f043 0320 	orr.w	r3, r3, #32
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	4833      	ldr	r0, [pc, #204]	@ (8003b34 <_printf_i+0x23c>)
 8003a68:	2778      	movs	r7, #120	@ 0x78
 8003a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	6831      	ldr	r1, [r6, #0]
 8003a72:	061f      	lsls	r7, r3, #24
 8003a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a78:	d402      	bmi.n	8003a80 <_printf_i+0x188>
 8003a7a:	065f      	lsls	r7, r3, #25
 8003a7c:	bf48      	it	mi
 8003a7e:	b2ad      	uxthmi	r5, r5
 8003a80:	6031      	str	r1, [r6, #0]
 8003a82:	07d9      	lsls	r1, r3, #31
 8003a84:	bf44      	itt	mi
 8003a86:	f043 0320 	orrmi.w	r3, r3, #32
 8003a8a:	6023      	strmi	r3, [r4, #0]
 8003a8c:	b11d      	cbz	r5, 8003a96 <_printf_i+0x19e>
 8003a8e:	2310      	movs	r3, #16
 8003a90:	e7ac      	b.n	80039ec <_printf_i+0xf4>
 8003a92:	4827      	ldr	r0, [pc, #156]	@ (8003b30 <_printf_i+0x238>)
 8003a94:	e7e9      	b.n	8003a6a <_printf_i+0x172>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f023 0320 	bic.w	r3, r3, #32
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	e7f6      	b.n	8003a8e <_printf_i+0x196>
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	e7bd      	b.n	8003a20 <_printf_i+0x128>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6825      	ldr	r5, [r4, #0]
 8003aa8:	6961      	ldr	r1, [r4, #20]
 8003aaa:	1d18      	adds	r0, r3, #4
 8003aac:	6030      	str	r0, [r6, #0]
 8003aae:	062e      	lsls	r6, r5, #24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0x1c0>
 8003ab4:	6019      	str	r1, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0x1c6>
 8003ab8:	0668      	lsls	r0, r5, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0x1bc>
 8003abc:	8019      	strh	r1, [r3, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	e7bc      	b.n	8003a40 <_printf_i+0x148>
 8003ac6:	6833      	ldr	r3, [r6, #0]
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	6032      	str	r2, [r6, #0]
 8003acc:	681e      	ldr	r6, [r3, #0]
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f7fc fb7c 	bl	80001d0 <memchr>
 8003ad8:	b108      	cbz	r0, 8003ade <_printf_i+0x1e6>
 8003ada:	1b80      	subs	r0, r0, r6
 8003adc:	6060      	str	r0, [r4, #4]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ae8:	e7aa      	b.n	8003a40 <_printf_i+0x148>
 8003aea:	6923      	ldr	r3, [r4, #16]
 8003aec:	4632      	mov	r2, r6
 8003aee:	4649      	mov	r1, r9
 8003af0:	4640      	mov	r0, r8
 8003af2:	47d0      	blx	sl
 8003af4:	3001      	adds	r0, #1
 8003af6:	d0ad      	beq.n	8003a54 <_printf_i+0x15c>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	079b      	lsls	r3, r3, #30
 8003afc:	d413      	bmi.n	8003b26 <_printf_i+0x22e>
 8003afe:	68e0      	ldr	r0, [r4, #12]
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	4298      	cmp	r0, r3
 8003b04:	bfb8      	it	lt
 8003b06:	4618      	movlt	r0, r3
 8003b08:	e7a6      	b.n	8003a58 <_printf_i+0x160>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	47d0      	blx	sl
 8003b14:	3001      	adds	r0, #1
 8003b16:	d09d      	beq.n	8003a54 <_printf_i+0x15c>
 8003b18:	3501      	adds	r5, #1
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	9903      	ldr	r1, [sp, #12]
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dcf2      	bgt.n	8003b0a <_printf_i+0x212>
 8003b24:	e7eb      	b.n	8003afe <_printf_i+0x206>
 8003b26:	2500      	movs	r5, #0
 8003b28:	f104 0619 	add.w	r6, r4, #25
 8003b2c:	e7f5      	b.n	8003b1a <_printf_i+0x222>
 8003b2e:	bf00      	nop
 8003b30:	0800642d 	.word	0x0800642d
 8003b34:	0800643e 	.word	0x0800643e

08003b38 <std>:
 8003b38:	2300      	movs	r3, #0
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b46:	6083      	str	r3, [r0, #8]
 8003b48:	8181      	strh	r1, [r0, #12]
 8003b4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b4c:	81c2      	strh	r2, [r0, #14]
 8003b4e:	6183      	str	r3, [r0, #24]
 8003b50:	4619      	mov	r1, r3
 8003b52:	2208      	movs	r2, #8
 8003b54:	305c      	adds	r0, #92	@ 0x5c
 8003b56:	f000 f948 	bl	8003dea <memset>
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <std+0x58>)
 8003b5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <std+0x5c>)
 8003b60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <std+0x60>)
 8003b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x64>)
 8003b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x68>)
 8003b6c:	6224      	str	r4, [r4, #32]
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d006      	beq.n	8003b80 <std+0x48>
 8003b72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b76:	4294      	cmp	r4, r2
 8003b78:	d002      	beq.n	8003b80 <std+0x48>
 8003b7a:	33d0      	adds	r3, #208	@ 0xd0
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d105      	bne.n	8003b8c <std+0x54>
 8003b80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b88:	f000 b9ac 	b.w	8003ee4 <__retarget_lock_init_recursive>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	bf00      	nop
 8003b90:	08003d65 	.word	0x08003d65
 8003b94:	08003d87 	.word	0x08003d87
 8003b98:	08003dbf 	.word	0x08003dbf
 8003b9c:	08003de3 	.word	0x08003de3
 8003ba0:	20000350 	.word	0x20000350

08003ba4 <stdio_exit_handler>:
 8003ba4:	4a02      	ldr	r2, [pc, #8]	@ (8003bb0 <stdio_exit_handler+0xc>)
 8003ba6:	4903      	ldr	r1, [pc, #12]	@ (8003bb4 <stdio_exit_handler+0x10>)
 8003ba8:	4803      	ldr	r0, [pc, #12]	@ (8003bb8 <stdio_exit_handler+0x14>)
 8003baa:	f000 b869 	b.w	8003c80 <_fwalk_sglue>
 8003bae:	bf00      	nop
 8003bb0:	20000090 	.word	0x20000090
 8003bb4:	08005845 	.word	0x08005845
 8003bb8:	200000a0 	.word	0x200000a0

08003bbc <cleanup_stdio>:
 8003bbc:	6841      	ldr	r1, [r0, #4]
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <cleanup_stdio+0x34>)
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	d001      	beq.n	8003bcc <cleanup_stdio+0x10>
 8003bc8:	f001 fe3c 	bl	8005844 <_fflush_r>
 8003bcc:	68a1      	ldr	r1, [r4, #8]
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <cleanup_stdio+0x38>)
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d002      	beq.n	8003bda <cleanup_stdio+0x1e>
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f001 fe35 	bl	8005844 <_fflush_r>
 8003bda:	68e1      	ldr	r1, [r4, #12]
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <cleanup_stdio+0x3c>)
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d004      	beq.n	8003bec <cleanup_stdio+0x30>
 8003be2:	4620      	mov	r0, r4
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be8:	f001 be2c 	b.w	8005844 <_fflush_r>
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000350 	.word	0x20000350
 8003bf4:	200003b8 	.word	0x200003b8
 8003bf8:	20000420 	.word	0x20000420

08003bfc <global_stdio_init.part.0>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <global_stdio_init.part.0+0x30>)
 8003c00:	4c0b      	ldr	r4, [pc, #44]	@ (8003c30 <global_stdio_init.part.0+0x34>)
 8003c02:	4a0c      	ldr	r2, [pc, #48]	@ (8003c34 <global_stdio_init.part.0+0x38>)
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4620      	mov	r0, r4
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	f7ff ff94 	bl	8003b38 <std>
 8003c10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c14:	2201      	movs	r2, #1
 8003c16:	2109      	movs	r1, #9
 8003c18:	f7ff ff8e 	bl	8003b38 <std>
 8003c1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c20:	2202      	movs	r2, #2
 8003c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c26:	2112      	movs	r1, #18
 8003c28:	f7ff bf86 	b.w	8003b38 <std>
 8003c2c:	20000488 	.word	0x20000488
 8003c30:	20000350 	.word	0x20000350
 8003c34:	08003ba5 	.word	0x08003ba5

08003c38 <__sfp_lock_acquire>:
 8003c38:	4801      	ldr	r0, [pc, #4]	@ (8003c40 <__sfp_lock_acquire+0x8>)
 8003c3a:	f000 b954 	b.w	8003ee6 <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000491 	.word	0x20000491

08003c44 <__sfp_lock_release>:
 8003c44:	4801      	ldr	r0, [pc, #4]	@ (8003c4c <__sfp_lock_release+0x8>)
 8003c46:	f000 b94f 	b.w	8003ee8 <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000491 	.word	0x20000491

08003c50 <__sinit>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
 8003c54:	f7ff fff0 	bl	8003c38 <__sfp_lock_acquire>
 8003c58:	6a23      	ldr	r3, [r4, #32]
 8003c5a:	b11b      	cbz	r3, 8003c64 <__sinit+0x14>
 8003c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c60:	f7ff bff0 	b.w	8003c44 <__sfp_lock_release>
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__sinit+0x28>)
 8003c66:	6223      	str	r3, [r4, #32]
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <__sinit+0x2c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f5      	bne.n	8003c5c <__sinit+0xc>
 8003c70:	f7ff ffc4 	bl	8003bfc <global_stdio_init.part.0>
 8003c74:	e7f2      	b.n	8003c5c <__sinit+0xc>
 8003c76:	bf00      	nop
 8003c78:	08003bbd 	.word	0x08003bbd
 8003c7c:	20000488 	.word	0x20000488

08003c80 <_fwalk_sglue>:
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c84:	4607      	mov	r7, r0
 8003c86:	4688      	mov	r8, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c90:	f1b9 0901 	subs.w	r9, r9, #1
 8003c94:	d505      	bpl.n	8003ca2 <_fwalk_sglue+0x22>
 8003c96:	6824      	ldr	r4, [r4, #0]
 8003c98:	2c00      	cmp	r4, #0
 8003c9a:	d1f7      	bne.n	8003c8c <_fwalk_sglue+0xc>
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d907      	bls.n	8003cb8 <_fwalk_sglue+0x38>
 8003ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cac:	3301      	adds	r3, #1
 8003cae:	d003      	beq.n	8003cb8 <_fwalk_sglue+0x38>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	4306      	orrs	r6, r0
 8003cb8:	3568      	adds	r5, #104	@ 0x68
 8003cba:	e7e9      	b.n	8003c90 <_fwalk_sglue+0x10>

08003cbc <sniprintf>:
 8003cbc:	b40c      	push	{r2, r3}
 8003cbe:	b530      	push	{r4, r5, lr}
 8003cc0:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <sniprintf+0x64>)
 8003cc2:	1e0c      	subs	r4, r1, #0
 8003cc4:	681d      	ldr	r5, [r3, #0]
 8003cc6:	b09d      	sub	sp, #116	@ 0x74
 8003cc8:	da08      	bge.n	8003cdc <sniprintf+0x20>
 8003cca:	238b      	movs	r3, #139	@ 0x8b
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd2:	b01d      	add	sp, #116	@ 0x74
 8003cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cd8:	b002      	add	sp, #8
 8003cda:	4770      	bx	lr
 8003cdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ce4:	bf14      	ite	ne
 8003ce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cea:	4623      	moveq	r3, r4
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	9006      	str	r0, [sp, #24]
 8003cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cfe:	ab21      	add	r3, sp, #132	@ 0x84
 8003d00:	a902      	add	r1, sp, #8
 8003d02:	4628      	mov	r0, r5
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f001 fc1d 	bl	8005544 <_svfiprintf_r>
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	bfbc      	itt	lt
 8003d0e:	238b      	movlt	r3, #139	@ 0x8b
 8003d10:	602b      	strlt	r3, [r5, #0]
 8003d12:	2c00      	cmp	r4, #0
 8003d14:	d0dd      	beq.n	8003cd2 <sniprintf+0x16>
 8003d16:	9b02      	ldr	r3, [sp, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e7d9      	b.n	8003cd2 <sniprintf+0x16>
 8003d1e:	bf00      	nop
 8003d20:	2000009c 	.word	0x2000009c

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b500      	push	{lr}
 8003d28:	b09c      	sub	sp, #112	@ 0x70
 8003d2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d34:	4809      	ldr	r0, [pc, #36]	@ (8003d5c <siprintf+0x38>)
 8003d36:	9107      	str	r1, [sp, #28]
 8003d38:	9104      	str	r1, [sp, #16]
 8003d3a:	4909      	ldr	r1, [pc, #36]	@ (8003d60 <siprintf+0x3c>)
 8003d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	a902      	add	r1, sp, #8
 8003d48:	f001 fbfc 	bl	8005544 <_svfiprintf_r>
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	@ 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	2000009c 	.word	0x2000009c
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <__sread>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	f000 f86c 	bl	8003e48 <_read_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bfab      	itete	ge
 8003d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d76:	89a3      	ldrhlt	r3, [r4, #12]
 8003d78:	181b      	addge	r3, r3, r0
 8003d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d7e:	bfac      	ite	ge
 8003d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d82:	81a3      	strhlt	r3, [r4, #12]
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <__swrite>:
 8003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	898b      	ldrh	r3, [r1, #12]
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	4605      	mov	r5, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4616      	mov	r6, r2
 8003d96:	d505      	bpl.n	8003da4 <__swrite+0x1e>
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f000 f840 	bl	8003e24 <_lseek_r>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	4632      	mov	r2, r6
 8003db2:	463b      	mov	r3, r7
 8003db4:	4628      	mov	r0, r5
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f000 b857 	b.w	8003e6c <_write_r>

08003dbe <__sseek>:
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc6:	f000 f82d 	bl	8003e24 <_lseek_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	bf15      	itete	ne
 8003dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dda:	81a3      	strheq	r3, [r4, #12]
 8003ddc:	bf18      	it	ne
 8003dde:	81a3      	strhne	r3, [r4, #12]
 8003de0:	bd10      	pop	{r4, pc}

08003de2 <__sclose>:
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 b80d 	b.w	8003e04 <_close_r>

08003dea <memset>:
 8003dea:	4402      	add	r2, r0
 8003dec:	4603      	mov	r3, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d100      	bne.n	8003df4 <memset+0xa>
 8003df2:	4770      	bx	lr
 8003df4:	f803 1b01 	strb.w	r1, [r3], #1
 8003df8:	e7f9      	b.n	8003dee <memset+0x4>
	...

08003dfc <_localeconv_r>:
 8003dfc:	4800      	ldr	r0, [pc, #0]	@ (8003e00 <_localeconv_r+0x4>)
 8003dfe:	4770      	bx	lr
 8003e00:	200001dc 	.word	0x200001dc

08003e04 <_close_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	@ (8003e20 <_close_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd feca 	bl	8001ba8 <_close>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_close_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_close_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	2000048c 	.word	0x2000048c

08003e24 <_lseek_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	@ (8003e44 <_lseek_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fd fedf 	bl	8001bf6 <_lseek>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_lseek_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_lseek_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	2000048c 	.word	0x2000048c

08003e48 <_read_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	@ (8003e68 <_read_r+0x20>)
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	4608      	mov	r0, r1
 8003e50:	4611      	mov	r1, r2
 8003e52:	2200      	movs	r2, #0
 8003e54:	602a      	str	r2, [r5, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fd fe6d 	bl	8001b36 <_read>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_read_r+0x1e>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_read_r+0x1e>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	2000048c 	.word	0x2000048c

08003e6c <_write_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d07      	ldr	r5, [pc, #28]	@ (8003e8c <_write_r+0x20>)
 8003e70:	4604      	mov	r4, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fd fe78 	bl	8001b70 <_write>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_write_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_write_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	2000048c 	.word	0x2000048c

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	@ (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000009c 	.word	0x2000009c

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed4 <__libc_init_array+0x38>)
 8003ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ed8 <__libc_init_array+0x3c>)
 8003ea2:	1b64      	subs	r4, r4, r5
 8003ea4:	10a4      	asrs	r4, r4, #2
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	4d0b      	ldr	r5, [pc, #44]	@ (8003edc <__libc_init_array+0x40>)
 8003eae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee0 <__libc_init_array+0x44>)
 8003eb0:	f002 fa64 	bl	800637c <_init>
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	2600      	movs	r6, #0
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	08006798 	.word	0x08006798
 8003ed8:	08006798 	.word	0x08006798
 8003edc:	08006798 	.word	0x08006798
 8003ee0:	0800679c 	.word	0x0800679c

08003ee4 <__retarget_lock_init_recursive>:
 8003ee4:	4770      	bx	lr

08003ee6 <__retarget_lock_acquire_recursive>:
 8003ee6:	4770      	bx	lr

08003ee8 <__retarget_lock_release_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <quorem>:
 8003eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eee:	6903      	ldr	r3, [r0, #16]
 8003ef0:	690c      	ldr	r4, [r1, #16]
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	db7e      	blt.n	8003ff6 <quorem+0x10c>
 8003ef8:	3c01      	subs	r4, #1
 8003efa:	f101 0814 	add.w	r8, r1, #20
 8003efe:	00a3      	lsls	r3, r4, #2
 8003f00:	f100 0514 	add.w	r5, r0, #20
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f14:	3301      	adds	r3, #1
 8003f16:	429a      	cmp	r2, r3
 8003f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f20:	d32e      	bcc.n	8003f80 <quorem+0x96>
 8003f22:	f04f 0a00 	mov.w	sl, #0
 8003f26:	46c4      	mov	ip, r8
 8003f28:	46ae      	mov	lr, r5
 8003f2a:	46d3      	mov	fp, sl
 8003f2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f30:	b298      	uxth	r0, r3
 8003f32:	fb06 a000 	mla	r0, r6, r0, sl
 8003f36:	0c02      	lsrs	r2, r0, #16
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	fb06 2303 	mla	r3, r6, r3, r2
 8003f3e:	f8de 2000 	ldr.w	r2, [lr]
 8003f42:	b280      	uxth	r0, r0
 8003f44:	b292      	uxth	r2, r2
 8003f46:	1a12      	subs	r2, r2, r0
 8003f48:	445a      	add	r2, fp
 8003f4a:	f8de 0000 	ldr.w	r0, [lr]
 8003f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f62:	45e1      	cmp	r9, ip
 8003f64:	f84e 2b04 	str.w	r2, [lr], #4
 8003f68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f6c:	d2de      	bcs.n	8003f2c <quorem+0x42>
 8003f6e:	9b00      	ldr	r3, [sp, #0]
 8003f70:	58eb      	ldr	r3, [r5, r3]
 8003f72:	b92b      	cbnz	r3, 8003f80 <quorem+0x96>
 8003f74:	9b01      	ldr	r3, [sp, #4]
 8003f76:	3b04      	subs	r3, #4
 8003f78:	429d      	cmp	r5, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	d32f      	bcc.n	8003fde <quorem+0xf4>
 8003f7e:	613c      	str	r4, [r7, #16]
 8003f80:	4638      	mov	r0, r7
 8003f82:	f001 f97b 	bl	800527c <__mcmp>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	db25      	blt.n	8003fd6 <quorem+0xec>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f92:	f8d1 c000 	ldr.w	ip, [r1]
 8003f96:	fa1f fe82 	uxth.w	lr, r2
 8003f9a:	fa1f f38c 	uxth.w	r3, ip
 8003f9e:	eba3 030e 	sub.w	r3, r3, lr
 8003fa2:	4403      	add	r3, r0
 8003fa4:	0c12      	lsrs	r2, r2, #16
 8003fa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003faa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fb4:	45c1      	cmp	r9, r8
 8003fb6:	f841 3b04 	str.w	r3, [r1], #4
 8003fba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fbe:	d2e6      	bcs.n	8003f8e <quorem+0xa4>
 8003fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fc8:	b922      	cbnz	r2, 8003fd4 <quorem+0xea>
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	429d      	cmp	r5, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	d30b      	bcc.n	8003fea <quorem+0x100>
 8003fd2:	613c      	str	r4, [r7, #16]
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	b003      	add	sp, #12
 8003fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d1cb      	bne.n	8003f7e <quorem+0x94>
 8003fe6:	3c01      	subs	r4, #1
 8003fe8:	e7c6      	b.n	8003f78 <quorem+0x8e>
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	3b04      	subs	r3, #4
 8003fee:	2a00      	cmp	r2, #0
 8003ff0:	d1ef      	bne.n	8003fd2 <quorem+0xe8>
 8003ff2:	3c01      	subs	r4, #1
 8003ff4:	e7ea      	b.n	8003fcc <quorem+0xe2>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7ee      	b.n	8003fd8 <quorem+0xee>
 8003ffa:	0000      	movs	r0, r0
 8003ffc:	0000      	movs	r0, r0
	...

08004000 <_dtoa_r>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	69c7      	ldr	r7, [r0, #28]
 8004006:	b099      	sub	sp, #100	@ 0x64
 8004008:	ed8d 0b02 	vstr	d0, [sp, #8]
 800400c:	ec55 4b10 	vmov	r4, r5, d0
 8004010:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004012:	9109      	str	r1, [sp, #36]	@ 0x24
 8004014:	4683      	mov	fp, r0
 8004016:	920e      	str	r2, [sp, #56]	@ 0x38
 8004018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800401a:	b97f      	cbnz	r7, 800403c <_dtoa_r+0x3c>
 800401c:	2010      	movs	r0, #16
 800401e:	f000 fdfd 	bl	8004c1c <malloc>
 8004022:	4602      	mov	r2, r0
 8004024:	f8cb 001c 	str.w	r0, [fp, #28]
 8004028:	b920      	cbnz	r0, 8004034 <_dtoa_r+0x34>
 800402a:	4ba7      	ldr	r3, [pc, #668]	@ (80042c8 <_dtoa_r+0x2c8>)
 800402c:	21ef      	movs	r1, #239	@ 0xef
 800402e:	48a7      	ldr	r0, [pc, #668]	@ (80042cc <_dtoa_r+0x2cc>)
 8004030:	f001 fc68 	bl	8005904 <__assert_func>
 8004034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004038:	6007      	str	r7, [r0, #0]
 800403a:	60c7      	str	r7, [r0, #12]
 800403c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	b159      	cbz	r1, 800405c <_dtoa_r+0x5c>
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	604a      	str	r2, [r1, #4]
 8004048:	2301      	movs	r3, #1
 800404a:	4093      	lsls	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
 800404e:	4658      	mov	r0, fp
 8004050:	f000 feda 	bl	8004e08 <_Bfree>
 8004054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	1e2b      	subs	r3, r5, #0
 800405e:	bfb9      	ittee	lt
 8004060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	9303      	strlt	r3, [sp, #12]
 8004066:	2300      	movge	r3, #0
 8004068:	6033      	strge	r3, [r6, #0]
 800406a:	9f03      	ldr	r7, [sp, #12]
 800406c:	4b98      	ldr	r3, [pc, #608]	@ (80042d0 <_dtoa_r+0x2d0>)
 800406e:	bfbc      	itt	lt
 8004070:	2201      	movlt	r2, #1
 8004072:	6032      	strlt	r2, [r6, #0]
 8004074:	43bb      	bics	r3, r7
 8004076:	d112      	bne.n	800409e <_dtoa_r+0x9e>
 8004078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800407a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004084:	4323      	orrs	r3, r4
 8004086:	f000 854d 	beq.w	8004b24 <_dtoa_r+0xb24>
 800408a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800408c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80042e4 <_dtoa_r+0x2e4>
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 854f 	beq.w	8004b34 <_dtoa_r+0xb34>
 8004096:	f10a 0303 	add.w	r3, sl, #3
 800409a:	f000 bd49 	b.w	8004b30 <_dtoa_r+0xb30>
 800409e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	ec51 0b17 	vmov	r0, r1, d7
 80040a8:	2300      	movs	r3, #0
 80040aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80040ae:	f7fc fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80040b2:	4680      	mov	r8, r0
 80040b4:	b158      	cbz	r0, 80040ce <_dtoa_r+0xce>
 80040b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80040b8:	2301      	movs	r3, #1
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80040be:	b113      	cbz	r3, 80040c6 <_dtoa_r+0xc6>
 80040c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80040c2:	4b84      	ldr	r3, [pc, #528]	@ (80042d4 <_dtoa_r+0x2d4>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80042e8 <_dtoa_r+0x2e8>
 80040ca:	f000 bd33 	b.w	8004b34 <_dtoa_r+0xb34>
 80040ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80040d2:	aa16      	add	r2, sp, #88	@ 0x58
 80040d4:	a917      	add	r1, sp, #92	@ 0x5c
 80040d6:	4658      	mov	r0, fp
 80040d8:	f001 f980 	bl	80053dc <__d2b>
 80040dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80040e0:	4681      	mov	r9, r0
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d077      	beq.n	80041d6 <_dtoa_r+0x1d6>
 80040e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80040f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80040fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004100:	4619      	mov	r1, r3
 8004102:	2200      	movs	r2, #0
 8004104:	4b74      	ldr	r3, [pc, #464]	@ (80042d8 <_dtoa_r+0x2d8>)
 8004106:	f7fc f8bf 	bl	8000288 <__aeabi_dsub>
 800410a:	a369      	add	r3, pc, #420	@ (adr r3, 80042b0 <_dtoa_r+0x2b0>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa72 	bl	80005f8 <__aeabi_dmul>
 8004114:	a368      	add	r3, pc, #416	@ (adr r3, 80042b8 <_dtoa_r+0x2b8>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc f8b7 	bl	800028c <__adddf3>
 800411e:	4604      	mov	r4, r0
 8004120:	4630      	mov	r0, r6
 8004122:	460d      	mov	r5, r1
 8004124:	f7fc f9fe 	bl	8000524 <__aeabi_i2d>
 8004128:	a365      	add	r3, pc, #404	@ (adr r3, 80042c0 <_dtoa_r+0x2c0>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc fa63 	bl	80005f8 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	f7fc f8a7 	bl	800028c <__adddf3>
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	f7fc fd09 	bl	8000b58 <__aeabi_d2iz>
 8004146:	2200      	movs	r2, #0
 8004148:	4607      	mov	r7, r0
 800414a:	2300      	movs	r3, #0
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	f7fc fcc4 	bl	8000adc <__aeabi_dcmplt>
 8004154:	b140      	cbz	r0, 8004168 <_dtoa_r+0x168>
 8004156:	4638      	mov	r0, r7
 8004158:	f7fc f9e4 	bl	8000524 <__aeabi_i2d>
 800415c:	4622      	mov	r2, r4
 800415e:	462b      	mov	r3, r5
 8004160:	f7fc fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004164:	b900      	cbnz	r0, 8004168 <_dtoa_r+0x168>
 8004166:	3f01      	subs	r7, #1
 8004168:	2f16      	cmp	r7, #22
 800416a:	d851      	bhi.n	8004210 <_dtoa_r+0x210>
 800416c:	4b5b      	ldr	r3, [pc, #364]	@ (80042dc <_dtoa_r+0x2dc>)
 800416e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800417a:	f7fc fcaf 	bl	8000adc <__aeabi_dcmplt>
 800417e:	2800      	cmp	r0, #0
 8004180:	d048      	beq.n	8004214 <_dtoa_r+0x214>
 8004182:	3f01      	subs	r7, #1
 8004184:	2300      	movs	r3, #0
 8004186:	9312      	str	r3, [sp, #72]	@ 0x48
 8004188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800418a:	1b9b      	subs	r3, r3, r6
 800418c:	1e5a      	subs	r2, r3, #1
 800418e:	bf44      	itt	mi
 8004190:	f1c3 0801 	rsbmi	r8, r3, #1
 8004194:	2300      	movmi	r3, #0
 8004196:	9208      	str	r2, [sp, #32]
 8004198:	bf54      	ite	pl
 800419a:	f04f 0800 	movpl.w	r8, #0
 800419e:	9308      	strmi	r3, [sp, #32]
 80041a0:	2f00      	cmp	r7, #0
 80041a2:	db39      	blt.n	8004218 <_dtoa_r+0x218>
 80041a4:	9b08      	ldr	r3, [sp, #32]
 80041a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80041a8:	443b      	add	r3, r7
 80041aa:	9308      	str	r3, [sp, #32]
 80041ac:	2300      	movs	r3, #0
 80041ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80041b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041b2:	2b09      	cmp	r3, #9
 80041b4:	d864      	bhi.n	8004280 <_dtoa_r+0x280>
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	bfc4      	itt	gt
 80041ba:	3b04      	subgt	r3, #4
 80041bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80041be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041c0:	f1a3 0302 	sub.w	r3, r3, #2
 80041c4:	bfcc      	ite	gt
 80041c6:	2400      	movgt	r4, #0
 80041c8:	2401      	movle	r4, #1
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d863      	bhi.n	8004296 <_dtoa_r+0x296>
 80041ce:	e8df f003 	tbb	[pc, r3]
 80041d2:	372a      	.short	0x372a
 80041d4:	5535      	.short	0x5535
 80041d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80041da:	441e      	add	r6, r3
 80041dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	bfc1      	itttt	gt
 80041e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80041e8:	409f      	lslgt	r7, r3
 80041ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80041ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80041f2:	bfd6      	itet	le
 80041f4:	f1c3 0320 	rsble	r3, r3, #32
 80041f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80041fc:	fa04 f003 	lslle.w	r0, r4, r3
 8004200:	f7fc f980 	bl	8000504 <__aeabi_ui2d>
 8004204:	2201      	movs	r2, #1
 8004206:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800420a:	3e01      	subs	r6, #1
 800420c:	9214      	str	r2, [sp, #80]	@ 0x50
 800420e:	e777      	b.n	8004100 <_dtoa_r+0x100>
 8004210:	2301      	movs	r3, #1
 8004212:	e7b8      	b.n	8004186 <_dtoa_r+0x186>
 8004214:	9012      	str	r0, [sp, #72]	@ 0x48
 8004216:	e7b7      	b.n	8004188 <_dtoa_r+0x188>
 8004218:	427b      	negs	r3, r7
 800421a:	930a      	str	r3, [sp, #40]	@ 0x28
 800421c:	2300      	movs	r3, #0
 800421e:	eba8 0807 	sub.w	r8, r8, r7
 8004222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004224:	e7c4      	b.n	80041b0 <_dtoa_r+0x1b0>
 8004226:	2300      	movs	r3, #0
 8004228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800422a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	dc35      	bgt.n	800429c <_dtoa_r+0x29c>
 8004230:	2301      	movs	r3, #1
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	9307      	str	r3, [sp, #28]
 8004236:	461a      	mov	r2, r3
 8004238:	920e      	str	r2, [sp, #56]	@ 0x38
 800423a:	e00b      	b.n	8004254 <_dtoa_r+0x254>
 800423c:	2301      	movs	r3, #1
 800423e:	e7f3      	b.n	8004228 <_dtoa_r+0x228>
 8004240:	2300      	movs	r3, #0
 8004242:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	9307      	str	r3, [sp, #28]
 8004250:	bfb8      	it	lt
 8004252:	2301      	movlt	r3, #1
 8004254:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004258:	2100      	movs	r1, #0
 800425a:	2204      	movs	r2, #4
 800425c:	f102 0514 	add.w	r5, r2, #20
 8004260:	429d      	cmp	r5, r3
 8004262:	d91f      	bls.n	80042a4 <_dtoa_r+0x2a4>
 8004264:	6041      	str	r1, [r0, #4]
 8004266:	4658      	mov	r0, fp
 8004268:	f000 fd8e 	bl	8004d88 <_Balloc>
 800426c:	4682      	mov	sl, r0
 800426e:	2800      	cmp	r0, #0
 8004270:	d13c      	bne.n	80042ec <_dtoa_r+0x2ec>
 8004272:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <_dtoa_r+0x2e0>)
 8004274:	4602      	mov	r2, r0
 8004276:	f240 11af 	movw	r1, #431	@ 0x1af
 800427a:	e6d8      	b.n	800402e <_dtoa_r+0x2e>
 800427c:	2301      	movs	r3, #1
 800427e:	e7e0      	b.n	8004242 <_dtoa_r+0x242>
 8004280:	2401      	movs	r4, #1
 8004282:	2300      	movs	r3, #0
 8004284:	9309      	str	r3, [sp, #36]	@ 0x24
 8004286:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	2200      	movs	r2, #0
 8004292:	2312      	movs	r3, #18
 8004294:	e7d0      	b.n	8004238 <_dtoa_r+0x238>
 8004296:	2301      	movs	r3, #1
 8004298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800429a:	e7f5      	b.n	8004288 <_dtoa_r+0x288>
 800429c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	9307      	str	r3, [sp, #28]
 80042a2:	e7d7      	b.n	8004254 <_dtoa_r+0x254>
 80042a4:	3101      	adds	r1, #1
 80042a6:	0052      	lsls	r2, r2, #1
 80042a8:	e7d8      	b.n	800425c <_dtoa_r+0x25c>
 80042aa:	bf00      	nop
 80042ac:	f3af 8000 	nop.w
 80042b0:	636f4361 	.word	0x636f4361
 80042b4:	3fd287a7 	.word	0x3fd287a7
 80042b8:	8b60c8b3 	.word	0x8b60c8b3
 80042bc:	3fc68a28 	.word	0x3fc68a28
 80042c0:	509f79fb 	.word	0x509f79fb
 80042c4:	3fd34413 	.word	0x3fd34413
 80042c8:	0800645c 	.word	0x0800645c
 80042cc:	08006473 	.word	0x08006473
 80042d0:	7ff00000 	.word	0x7ff00000
 80042d4:	0800642c 	.word	0x0800642c
 80042d8:	3ff80000 	.word	0x3ff80000
 80042dc:	08006570 	.word	0x08006570
 80042e0:	080064cb 	.word	0x080064cb
 80042e4:	08006458 	.word	0x08006458
 80042e8:	0800642b 	.word	0x0800642b
 80042ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80042f0:	6018      	str	r0, [r3, #0]
 80042f2:	9b07      	ldr	r3, [sp, #28]
 80042f4:	2b0e      	cmp	r3, #14
 80042f6:	f200 80a4 	bhi.w	8004442 <_dtoa_r+0x442>
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	f000 80a1 	beq.w	8004442 <_dtoa_r+0x442>
 8004300:	2f00      	cmp	r7, #0
 8004302:	dd33      	ble.n	800436c <_dtoa_r+0x36c>
 8004304:	4bad      	ldr	r3, [pc, #692]	@ (80045bc <_dtoa_r+0x5bc>)
 8004306:	f007 020f 	and.w	r2, r7, #15
 800430a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800430e:	ed93 7b00 	vldr	d7, [r3]
 8004312:	05f8      	lsls	r0, r7, #23
 8004314:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800431c:	d516      	bpl.n	800434c <_dtoa_r+0x34c>
 800431e:	4ba8      	ldr	r3, [pc, #672]	@ (80045c0 <_dtoa_r+0x5c0>)
 8004320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004328:	f7fc fa90 	bl	800084c <__aeabi_ddiv>
 800432c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004330:	f004 040f 	and.w	r4, r4, #15
 8004334:	2603      	movs	r6, #3
 8004336:	4da2      	ldr	r5, [pc, #648]	@ (80045c0 <_dtoa_r+0x5c0>)
 8004338:	b954      	cbnz	r4, 8004350 <_dtoa_r+0x350>
 800433a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800433e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004342:	f7fc fa83 	bl	800084c <__aeabi_ddiv>
 8004346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800434a:	e028      	b.n	800439e <_dtoa_r+0x39e>
 800434c:	2602      	movs	r6, #2
 800434e:	e7f2      	b.n	8004336 <_dtoa_r+0x336>
 8004350:	07e1      	lsls	r1, r4, #31
 8004352:	d508      	bpl.n	8004366 <_dtoa_r+0x366>
 8004354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004364:	3601      	adds	r6, #1
 8004366:	1064      	asrs	r4, r4, #1
 8004368:	3508      	adds	r5, #8
 800436a:	e7e5      	b.n	8004338 <_dtoa_r+0x338>
 800436c:	f000 80d2 	beq.w	8004514 <_dtoa_r+0x514>
 8004370:	427c      	negs	r4, r7
 8004372:	4b92      	ldr	r3, [pc, #584]	@ (80045bc <_dtoa_r+0x5bc>)
 8004374:	4d92      	ldr	r5, [pc, #584]	@ (80045c0 <_dtoa_r+0x5c0>)
 8004376:	f004 020f 	and.w	r2, r4, #15
 800437a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004386:	f7fc f937 	bl	80005f8 <__aeabi_dmul>
 800438a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800438e:	1124      	asrs	r4, r4, #4
 8004390:	2300      	movs	r3, #0
 8004392:	2602      	movs	r6, #2
 8004394:	2c00      	cmp	r4, #0
 8004396:	f040 80b2 	bne.w	80044fe <_dtoa_r+0x4fe>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d3      	bne.n	8004346 <_dtoa_r+0x346>
 800439e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80043a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80b7 	beq.w	8004518 <_dtoa_r+0x518>
 80043aa:	4b86      	ldr	r3, [pc, #536]	@ (80045c4 <_dtoa_r+0x5c4>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7fc fb93 	bl	8000adc <__aeabi_dcmplt>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f000 80ae 	beq.w	8004518 <_dtoa_r+0x518>
 80043bc:	9b07      	ldr	r3, [sp, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80aa 	beq.w	8004518 <_dtoa_r+0x518>
 80043c4:	9b00      	ldr	r3, [sp, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dd37      	ble.n	800443a <_dtoa_r+0x43a>
 80043ca:	1e7b      	subs	r3, r7, #1
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	4620      	mov	r0, r4
 80043d0:	4b7d      	ldr	r3, [pc, #500]	@ (80045c8 <_dtoa_r+0x5c8>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc f90f 	bl	80005f8 <__aeabi_dmul>
 80043da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043de:	9c00      	ldr	r4, [sp, #0]
 80043e0:	3601      	adds	r6, #1
 80043e2:	4630      	mov	r0, r6
 80043e4:	f7fc f89e 	bl	8000524 <__aeabi_i2d>
 80043e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ec:	f7fc f904 	bl	80005f8 <__aeabi_dmul>
 80043f0:	4b76      	ldr	r3, [pc, #472]	@ (80045cc <_dtoa_r+0x5cc>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	f7fb ff4a 	bl	800028c <__adddf3>
 80043f8:	4605      	mov	r5, r0
 80043fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80043fe:	2c00      	cmp	r4, #0
 8004400:	f040 808d 	bne.w	800451e <_dtoa_r+0x51e>
 8004404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004408:	4b71      	ldr	r3, [pc, #452]	@ (80045d0 <_dtoa_r+0x5d0>)
 800440a:	2200      	movs	r2, #0
 800440c:	f7fb ff3c 	bl	8000288 <__aeabi_dsub>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004418:	462a      	mov	r2, r5
 800441a:	4633      	mov	r3, r6
 800441c:	f7fc fb7c 	bl	8000b18 <__aeabi_dcmpgt>
 8004420:	2800      	cmp	r0, #0
 8004422:	f040 828b 	bne.w	800493c <_dtoa_r+0x93c>
 8004426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800442a:	462a      	mov	r2, r5
 800442c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004430:	f7fc fb54 	bl	8000adc <__aeabi_dcmplt>
 8004434:	2800      	cmp	r0, #0
 8004436:	f040 8128 	bne.w	800468a <_dtoa_r+0x68a>
 800443a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800443e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004444:	2b00      	cmp	r3, #0
 8004446:	f2c0 815a 	blt.w	80046fe <_dtoa_r+0x6fe>
 800444a:	2f0e      	cmp	r7, #14
 800444c:	f300 8157 	bgt.w	80046fe <_dtoa_r+0x6fe>
 8004450:	4b5a      	ldr	r3, [pc, #360]	@ (80045bc <_dtoa_r+0x5bc>)
 8004452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004456:	ed93 7b00 	vldr	d7, [r3]
 800445a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800445c:	2b00      	cmp	r3, #0
 800445e:	ed8d 7b00 	vstr	d7, [sp]
 8004462:	da03      	bge.n	800446c <_dtoa_r+0x46c>
 8004464:	9b07      	ldr	r3, [sp, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f340 8101 	ble.w	800466e <_dtoa_r+0x66e>
 800446c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004470:	4656      	mov	r6, sl
 8004472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc f9e7 	bl	800084c <__aeabi_ddiv>
 800447e:	f7fc fb6b 	bl	8000b58 <__aeabi_d2iz>
 8004482:	4680      	mov	r8, r0
 8004484:	f7fc f84e 	bl	8000524 <__aeabi_i2d>
 8004488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800448c:	f7fc f8b4 	bl	80005f8 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800449c:	f7fb fef4 	bl	8000288 <__aeabi_dsub>
 80044a0:	f806 4b01 	strb.w	r4, [r6], #1
 80044a4:	9d07      	ldr	r5, [sp, #28]
 80044a6:	eba6 040a 	sub.w	r4, r6, sl
 80044aa:	42a5      	cmp	r5, r4
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	f040 8117 	bne.w	80046e2 <_dtoa_r+0x6e2>
 80044b4:	f7fb feea 	bl	800028c <__adddf3>
 80044b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044bc:	4604      	mov	r4, r0
 80044be:	460d      	mov	r5, r1
 80044c0:	f7fc fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f040 80f9 	bne.w	80046bc <_dtoa_r+0x6bc>
 80044ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fc faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80044d6:	b118      	cbz	r0, 80044e0 <_dtoa_r+0x4e0>
 80044d8:	f018 0f01 	tst.w	r8, #1
 80044dc:	f040 80ee 	bne.w	80046bc <_dtoa_r+0x6bc>
 80044e0:	4649      	mov	r1, r9
 80044e2:	4658      	mov	r0, fp
 80044e4:	f000 fc90 	bl	8004e08 <_Bfree>
 80044e8:	2300      	movs	r3, #0
 80044ea:	7033      	strb	r3, [r6, #0]
 80044ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80044ee:	3701      	adds	r7, #1
 80044f0:	601f      	str	r7, [r3, #0]
 80044f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 831d 	beq.w	8004b34 <_dtoa_r+0xb34>
 80044fa:	601e      	str	r6, [r3, #0]
 80044fc:	e31a      	b.n	8004b34 <_dtoa_r+0xb34>
 80044fe:	07e2      	lsls	r2, r4, #31
 8004500:	d505      	bpl.n	800450e <_dtoa_r+0x50e>
 8004502:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004506:	f7fc f877 	bl	80005f8 <__aeabi_dmul>
 800450a:	3601      	adds	r6, #1
 800450c:	2301      	movs	r3, #1
 800450e:	1064      	asrs	r4, r4, #1
 8004510:	3508      	adds	r5, #8
 8004512:	e73f      	b.n	8004394 <_dtoa_r+0x394>
 8004514:	2602      	movs	r6, #2
 8004516:	e742      	b.n	800439e <_dtoa_r+0x39e>
 8004518:	9c07      	ldr	r4, [sp, #28]
 800451a:	9704      	str	r7, [sp, #16]
 800451c:	e761      	b.n	80043e2 <_dtoa_r+0x3e2>
 800451e:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <_dtoa_r+0x5bc>)
 8004520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004526:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800452a:	4454      	add	r4, sl
 800452c:	2900      	cmp	r1, #0
 800452e:	d053      	beq.n	80045d8 <_dtoa_r+0x5d8>
 8004530:	4928      	ldr	r1, [pc, #160]	@ (80045d4 <_dtoa_r+0x5d4>)
 8004532:	2000      	movs	r0, #0
 8004534:	f7fc f98a 	bl	800084c <__aeabi_ddiv>
 8004538:	4633      	mov	r3, r6
 800453a:	462a      	mov	r2, r5
 800453c:	f7fb fea4 	bl	8000288 <__aeabi_dsub>
 8004540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004544:	4656      	mov	r6, sl
 8004546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800454a:	f7fc fb05 	bl	8000b58 <__aeabi_d2iz>
 800454e:	4605      	mov	r5, r0
 8004550:	f7fb ffe8 	bl	8000524 <__aeabi_i2d>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800455c:	f7fb fe94 	bl	8000288 <__aeabi_dsub>
 8004560:	3530      	adds	r5, #48	@ 0x30
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800456a:	f806 5b01 	strb.w	r5, [r6], #1
 800456e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004572:	f7fc fab3 	bl	8000adc <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d171      	bne.n	800465e <_dtoa_r+0x65e>
 800457a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800457e:	4911      	ldr	r1, [pc, #68]	@ (80045c4 <_dtoa_r+0x5c4>)
 8004580:	2000      	movs	r0, #0
 8004582:	f7fb fe81 	bl	8000288 <__aeabi_dsub>
 8004586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800458a:	f7fc faa7 	bl	8000adc <__aeabi_dcmplt>
 800458e:	2800      	cmp	r0, #0
 8004590:	f040 8095 	bne.w	80046be <_dtoa_r+0x6be>
 8004594:	42a6      	cmp	r6, r4
 8004596:	f43f af50 	beq.w	800443a <_dtoa_r+0x43a>
 800459a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800459e:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <_dtoa_r+0x5c8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	f7fc f829 	bl	80005f8 <__aeabi_dmul>
 80045a6:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <_dtoa_r+0x5c8>)
 80045a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045ac:	2200      	movs	r2, #0
 80045ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045b2:	f7fc f821 	bl	80005f8 <__aeabi_dmul>
 80045b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ba:	e7c4      	b.n	8004546 <_dtoa_r+0x546>
 80045bc:	08006570 	.word	0x08006570
 80045c0:	08006548 	.word	0x08006548
 80045c4:	3ff00000 	.word	0x3ff00000
 80045c8:	40240000 	.word	0x40240000
 80045cc:	401c0000 	.word	0x401c0000
 80045d0:	40140000 	.word	0x40140000
 80045d4:	3fe00000 	.word	0x3fe00000
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	f7fc f80c 	bl	80005f8 <__aeabi_dmul>
 80045e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80045e6:	4656      	mov	r6, sl
 80045e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ec:	f7fc fab4 	bl	8000b58 <__aeabi_d2iz>
 80045f0:	4605      	mov	r5, r0
 80045f2:	f7fb ff97 	bl	8000524 <__aeabi_i2d>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045fe:	f7fb fe43 	bl	8000288 <__aeabi_dsub>
 8004602:	3530      	adds	r5, #48	@ 0x30
 8004604:	f806 5b01 	strb.w	r5, [r6], #1
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	42a6      	cmp	r6, r4
 800460e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	d124      	bne.n	8004662 <_dtoa_r+0x662>
 8004618:	4bac      	ldr	r3, [pc, #688]	@ (80048cc <_dtoa_r+0x8cc>)
 800461a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800461e:	f7fb fe35 	bl	800028c <__adddf3>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800462a:	f7fc fa75 	bl	8000b18 <__aeabi_dcmpgt>
 800462e:	2800      	cmp	r0, #0
 8004630:	d145      	bne.n	80046be <_dtoa_r+0x6be>
 8004632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004636:	49a5      	ldr	r1, [pc, #660]	@ (80048cc <_dtoa_r+0x8cc>)
 8004638:	2000      	movs	r0, #0
 800463a:	f7fb fe25 	bl	8000288 <__aeabi_dsub>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004646:	f7fc fa49 	bl	8000adc <__aeabi_dcmplt>
 800464a:	2800      	cmp	r0, #0
 800464c:	f43f aef5 	beq.w	800443a <_dtoa_r+0x43a>
 8004650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004652:	1e73      	subs	r3, r6, #1
 8004654:	9315      	str	r3, [sp, #84]	@ 0x54
 8004656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800465a:	2b30      	cmp	r3, #48	@ 0x30
 800465c:	d0f8      	beq.n	8004650 <_dtoa_r+0x650>
 800465e:	9f04      	ldr	r7, [sp, #16]
 8004660:	e73e      	b.n	80044e0 <_dtoa_r+0x4e0>
 8004662:	4b9b      	ldr	r3, [pc, #620]	@ (80048d0 <_dtoa_r+0x8d0>)
 8004664:	f7fb ffc8 	bl	80005f8 <__aeabi_dmul>
 8004668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800466c:	e7bc      	b.n	80045e8 <_dtoa_r+0x5e8>
 800466e:	d10c      	bne.n	800468a <_dtoa_r+0x68a>
 8004670:	4b98      	ldr	r3, [pc, #608]	@ (80048d4 <_dtoa_r+0x8d4>)
 8004672:	2200      	movs	r2, #0
 8004674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004678:	f7fb ffbe 	bl	80005f8 <__aeabi_dmul>
 800467c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004680:	f7fc fa40 	bl	8000b04 <__aeabi_dcmpge>
 8004684:	2800      	cmp	r0, #0
 8004686:	f000 8157 	beq.w	8004938 <_dtoa_r+0x938>
 800468a:	2400      	movs	r4, #0
 800468c:	4625      	mov	r5, r4
 800468e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004690:	43db      	mvns	r3, r3
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	4656      	mov	r6, sl
 8004696:	2700      	movs	r7, #0
 8004698:	4621      	mov	r1, r4
 800469a:	4658      	mov	r0, fp
 800469c:	f000 fbb4 	bl	8004e08 <_Bfree>
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	d0dc      	beq.n	800465e <_dtoa_r+0x65e>
 80046a4:	b12f      	cbz	r7, 80046b2 <_dtoa_r+0x6b2>
 80046a6:	42af      	cmp	r7, r5
 80046a8:	d003      	beq.n	80046b2 <_dtoa_r+0x6b2>
 80046aa:	4639      	mov	r1, r7
 80046ac:	4658      	mov	r0, fp
 80046ae:	f000 fbab 	bl	8004e08 <_Bfree>
 80046b2:	4629      	mov	r1, r5
 80046b4:	4658      	mov	r0, fp
 80046b6:	f000 fba7 	bl	8004e08 <_Bfree>
 80046ba:	e7d0      	b.n	800465e <_dtoa_r+0x65e>
 80046bc:	9704      	str	r7, [sp, #16]
 80046be:	4633      	mov	r3, r6
 80046c0:	461e      	mov	r6, r3
 80046c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046c6:	2a39      	cmp	r2, #57	@ 0x39
 80046c8:	d107      	bne.n	80046da <_dtoa_r+0x6da>
 80046ca:	459a      	cmp	sl, r3
 80046cc:	d1f8      	bne.n	80046c0 <_dtoa_r+0x6c0>
 80046ce:	9a04      	ldr	r2, [sp, #16]
 80046d0:	3201      	adds	r2, #1
 80046d2:	9204      	str	r2, [sp, #16]
 80046d4:	2230      	movs	r2, #48	@ 0x30
 80046d6:	f88a 2000 	strb.w	r2, [sl]
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	3201      	adds	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e7bd      	b.n	800465e <_dtoa_r+0x65e>
 80046e2:	4b7b      	ldr	r3, [pc, #492]	@ (80048d0 <_dtoa_r+0x8d0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	f7fb ff87 	bl	80005f8 <__aeabi_dmul>
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	4604      	mov	r4, r0
 80046f0:	460d      	mov	r5, r1
 80046f2:	f7fc f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	f43f aebb 	beq.w	8004472 <_dtoa_r+0x472>
 80046fc:	e6f0      	b.n	80044e0 <_dtoa_r+0x4e0>
 80046fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004700:	2a00      	cmp	r2, #0
 8004702:	f000 80db 	beq.w	80048bc <_dtoa_r+0x8bc>
 8004706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004708:	2a01      	cmp	r2, #1
 800470a:	f300 80bf 	bgt.w	800488c <_dtoa_r+0x88c>
 800470e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004710:	2a00      	cmp	r2, #0
 8004712:	f000 80b7 	beq.w	8004884 <_dtoa_r+0x884>
 8004716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800471a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800471c:	4646      	mov	r6, r8
 800471e:	9a08      	ldr	r2, [sp, #32]
 8004720:	2101      	movs	r1, #1
 8004722:	441a      	add	r2, r3
 8004724:	4658      	mov	r0, fp
 8004726:	4498      	add	r8, r3
 8004728:	9208      	str	r2, [sp, #32]
 800472a:	f000 fc21 	bl	8004f70 <__i2b>
 800472e:	4605      	mov	r5, r0
 8004730:	b15e      	cbz	r6, 800474a <_dtoa_r+0x74a>
 8004732:	9b08      	ldr	r3, [sp, #32]
 8004734:	2b00      	cmp	r3, #0
 8004736:	dd08      	ble.n	800474a <_dtoa_r+0x74a>
 8004738:	42b3      	cmp	r3, r6
 800473a:	9a08      	ldr	r2, [sp, #32]
 800473c:	bfa8      	it	ge
 800473e:	4633      	movge	r3, r6
 8004740:	eba8 0803 	sub.w	r8, r8, r3
 8004744:	1af6      	subs	r6, r6, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	9308      	str	r3, [sp, #32]
 800474a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800474c:	b1f3      	cbz	r3, 800478c <_dtoa_r+0x78c>
 800474e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80b7 	beq.w	80048c4 <_dtoa_r+0x8c4>
 8004756:	b18c      	cbz	r4, 800477c <_dtoa_r+0x77c>
 8004758:	4629      	mov	r1, r5
 800475a:	4622      	mov	r2, r4
 800475c:	4658      	mov	r0, fp
 800475e:	f000 fcc7 	bl	80050f0 <__pow5mult>
 8004762:	464a      	mov	r2, r9
 8004764:	4601      	mov	r1, r0
 8004766:	4605      	mov	r5, r0
 8004768:	4658      	mov	r0, fp
 800476a:	f000 fc17 	bl	8004f9c <__multiply>
 800476e:	4649      	mov	r1, r9
 8004770:	9004      	str	r0, [sp, #16]
 8004772:	4658      	mov	r0, fp
 8004774:	f000 fb48 	bl	8004e08 <_Bfree>
 8004778:	9b04      	ldr	r3, [sp, #16]
 800477a:	4699      	mov	r9, r3
 800477c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800477e:	1b1a      	subs	r2, r3, r4
 8004780:	d004      	beq.n	800478c <_dtoa_r+0x78c>
 8004782:	4649      	mov	r1, r9
 8004784:	4658      	mov	r0, fp
 8004786:	f000 fcb3 	bl	80050f0 <__pow5mult>
 800478a:	4681      	mov	r9, r0
 800478c:	2101      	movs	r1, #1
 800478e:	4658      	mov	r0, fp
 8004790:	f000 fbee 	bl	8004f70 <__i2b>
 8004794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004796:	4604      	mov	r4, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 81cf 	beq.w	8004b3c <_dtoa_r+0xb3c>
 800479e:	461a      	mov	r2, r3
 80047a0:	4601      	mov	r1, r0
 80047a2:	4658      	mov	r0, fp
 80047a4:	f000 fca4 	bl	80050f0 <__pow5mult>
 80047a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	4604      	mov	r4, r0
 80047ae:	f300 8095 	bgt.w	80048dc <_dtoa_r+0x8dc>
 80047b2:	9b02      	ldr	r3, [sp, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 8087 	bne.w	80048c8 <_dtoa_r+0x8c8>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 8089 	bne.w	80048d8 <_dtoa_r+0x8d8>
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047cc:	0d1b      	lsrs	r3, r3, #20
 80047ce:	051b      	lsls	r3, r3, #20
 80047d0:	b12b      	cbz	r3, 80047de <_dtoa_r+0x7de>
 80047d2:	9b08      	ldr	r3, [sp, #32]
 80047d4:	3301      	adds	r3, #1
 80047d6:	9308      	str	r3, [sp, #32]
 80047d8:	f108 0801 	add.w	r8, r8, #1
 80047dc:	2301      	movs	r3, #1
 80047de:	930a      	str	r3, [sp, #40]	@ 0x28
 80047e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 81b0 	beq.w	8004b48 <_dtoa_r+0xb48>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047ee:	6918      	ldr	r0, [r3, #16]
 80047f0:	f000 fb72 	bl	8004ed8 <__hi0bits>
 80047f4:	f1c0 0020 	rsb	r0, r0, #32
 80047f8:	9b08      	ldr	r3, [sp, #32]
 80047fa:	4418      	add	r0, r3
 80047fc:	f010 001f 	ands.w	r0, r0, #31
 8004800:	d077      	beq.n	80048f2 <_dtoa_r+0x8f2>
 8004802:	f1c0 0320 	rsb	r3, r0, #32
 8004806:	2b04      	cmp	r3, #4
 8004808:	dd6b      	ble.n	80048e2 <_dtoa_r+0x8e2>
 800480a:	9b08      	ldr	r3, [sp, #32]
 800480c:	f1c0 001c 	rsb	r0, r0, #28
 8004810:	4403      	add	r3, r0
 8004812:	4480      	add	r8, r0
 8004814:	4406      	add	r6, r0
 8004816:	9308      	str	r3, [sp, #32]
 8004818:	f1b8 0f00 	cmp.w	r8, #0
 800481c:	dd05      	ble.n	800482a <_dtoa_r+0x82a>
 800481e:	4649      	mov	r1, r9
 8004820:	4642      	mov	r2, r8
 8004822:	4658      	mov	r0, fp
 8004824:	f000 fcbe 	bl	80051a4 <__lshift>
 8004828:	4681      	mov	r9, r0
 800482a:	9b08      	ldr	r3, [sp, #32]
 800482c:	2b00      	cmp	r3, #0
 800482e:	dd05      	ble.n	800483c <_dtoa_r+0x83c>
 8004830:	4621      	mov	r1, r4
 8004832:	461a      	mov	r2, r3
 8004834:	4658      	mov	r0, fp
 8004836:	f000 fcb5 	bl	80051a4 <__lshift>
 800483a:	4604      	mov	r4, r0
 800483c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800483e:	2b00      	cmp	r3, #0
 8004840:	d059      	beq.n	80048f6 <_dtoa_r+0x8f6>
 8004842:	4621      	mov	r1, r4
 8004844:	4648      	mov	r0, r9
 8004846:	f000 fd19 	bl	800527c <__mcmp>
 800484a:	2800      	cmp	r0, #0
 800484c:	da53      	bge.n	80048f6 <_dtoa_r+0x8f6>
 800484e:	1e7b      	subs	r3, r7, #1
 8004850:	9304      	str	r3, [sp, #16]
 8004852:	4649      	mov	r1, r9
 8004854:	2300      	movs	r3, #0
 8004856:	220a      	movs	r2, #10
 8004858:	4658      	mov	r0, fp
 800485a:	f000 faf7 	bl	8004e4c <__multadd>
 800485e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004860:	4681      	mov	r9, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8172 	beq.w	8004b4c <_dtoa_r+0xb4c>
 8004868:	2300      	movs	r3, #0
 800486a:	4629      	mov	r1, r5
 800486c:	220a      	movs	r2, #10
 800486e:	4658      	mov	r0, fp
 8004870:	f000 faec 	bl	8004e4c <__multadd>
 8004874:	9b00      	ldr	r3, [sp, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	4605      	mov	r5, r0
 800487a:	dc67      	bgt.n	800494c <_dtoa_r+0x94c>
 800487c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800487e:	2b02      	cmp	r3, #2
 8004880:	dc41      	bgt.n	8004906 <_dtoa_r+0x906>
 8004882:	e063      	b.n	800494c <_dtoa_r+0x94c>
 8004884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800488a:	e746      	b.n	800471a <_dtoa_r+0x71a>
 800488c:	9b07      	ldr	r3, [sp, #28]
 800488e:	1e5c      	subs	r4, r3, #1
 8004890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004892:	42a3      	cmp	r3, r4
 8004894:	bfbf      	itttt	lt
 8004896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004898:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800489a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800489c:	1ae3      	sublt	r3, r4, r3
 800489e:	bfb4      	ite	lt
 80048a0:	18d2      	addlt	r2, r2, r3
 80048a2:	1b1c      	subge	r4, r3, r4
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	bfbc      	itt	lt
 80048a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80048aa:	2400      	movlt	r4, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bfb5      	itete	lt
 80048b0:	eba8 0603 	sublt.w	r6, r8, r3
 80048b4:	9b07      	ldrge	r3, [sp, #28]
 80048b6:	2300      	movlt	r3, #0
 80048b8:	4646      	movge	r6, r8
 80048ba:	e730      	b.n	800471e <_dtoa_r+0x71e>
 80048bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80048c0:	4646      	mov	r6, r8
 80048c2:	e735      	b.n	8004730 <_dtoa_r+0x730>
 80048c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048c6:	e75c      	b.n	8004782 <_dtoa_r+0x782>
 80048c8:	2300      	movs	r3, #0
 80048ca:	e788      	b.n	80047de <_dtoa_r+0x7de>
 80048cc:	3fe00000 	.word	0x3fe00000
 80048d0:	40240000 	.word	0x40240000
 80048d4:	40140000 	.word	0x40140000
 80048d8:	9b02      	ldr	r3, [sp, #8]
 80048da:	e780      	b.n	80047de <_dtoa_r+0x7de>
 80048dc:	2300      	movs	r3, #0
 80048de:	930a      	str	r3, [sp, #40]	@ 0x28
 80048e0:	e782      	b.n	80047e8 <_dtoa_r+0x7e8>
 80048e2:	d099      	beq.n	8004818 <_dtoa_r+0x818>
 80048e4:	9a08      	ldr	r2, [sp, #32]
 80048e6:	331c      	adds	r3, #28
 80048e8:	441a      	add	r2, r3
 80048ea:	4498      	add	r8, r3
 80048ec:	441e      	add	r6, r3
 80048ee:	9208      	str	r2, [sp, #32]
 80048f0:	e792      	b.n	8004818 <_dtoa_r+0x818>
 80048f2:	4603      	mov	r3, r0
 80048f4:	e7f6      	b.n	80048e4 <_dtoa_r+0x8e4>
 80048f6:	9b07      	ldr	r3, [sp, #28]
 80048f8:	9704      	str	r7, [sp, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dc20      	bgt.n	8004940 <_dtoa_r+0x940>
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004902:	2b02      	cmp	r3, #2
 8004904:	dd1e      	ble.n	8004944 <_dtoa_r+0x944>
 8004906:	9b00      	ldr	r3, [sp, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f47f aec0 	bne.w	800468e <_dtoa_r+0x68e>
 800490e:	4621      	mov	r1, r4
 8004910:	2205      	movs	r2, #5
 8004912:	4658      	mov	r0, fp
 8004914:	f000 fa9a 	bl	8004e4c <__multadd>
 8004918:	4601      	mov	r1, r0
 800491a:	4604      	mov	r4, r0
 800491c:	4648      	mov	r0, r9
 800491e:	f000 fcad 	bl	800527c <__mcmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	f77f aeb3 	ble.w	800468e <_dtoa_r+0x68e>
 8004928:	4656      	mov	r6, sl
 800492a:	2331      	movs	r3, #49	@ 0x31
 800492c:	f806 3b01 	strb.w	r3, [r6], #1
 8004930:	9b04      	ldr	r3, [sp, #16]
 8004932:	3301      	adds	r3, #1
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	e6ae      	b.n	8004696 <_dtoa_r+0x696>
 8004938:	9c07      	ldr	r4, [sp, #28]
 800493a:	9704      	str	r7, [sp, #16]
 800493c:	4625      	mov	r5, r4
 800493e:	e7f3      	b.n	8004928 <_dtoa_r+0x928>
 8004940:	9b07      	ldr	r3, [sp, #28]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8104 	beq.w	8004b54 <_dtoa_r+0xb54>
 800494c:	2e00      	cmp	r6, #0
 800494e:	dd05      	ble.n	800495c <_dtoa_r+0x95c>
 8004950:	4629      	mov	r1, r5
 8004952:	4632      	mov	r2, r6
 8004954:	4658      	mov	r0, fp
 8004956:	f000 fc25 	bl	80051a4 <__lshift>
 800495a:	4605      	mov	r5, r0
 800495c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05a      	beq.n	8004a18 <_dtoa_r+0xa18>
 8004962:	6869      	ldr	r1, [r5, #4]
 8004964:	4658      	mov	r0, fp
 8004966:	f000 fa0f 	bl	8004d88 <_Balloc>
 800496a:	4606      	mov	r6, r0
 800496c:	b928      	cbnz	r0, 800497a <_dtoa_r+0x97a>
 800496e:	4b84      	ldr	r3, [pc, #528]	@ (8004b80 <_dtoa_r+0xb80>)
 8004970:	4602      	mov	r2, r0
 8004972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004976:	f7ff bb5a 	b.w	800402e <_dtoa_r+0x2e>
 800497a:	692a      	ldr	r2, [r5, #16]
 800497c:	3202      	adds	r2, #2
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	f105 010c 	add.w	r1, r5, #12
 8004984:	300c      	adds	r0, #12
 8004986:	f000 ffaf 	bl	80058e8 <memcpy>
 800498a:	2201      	movs	r2, #1
 800498c:	4631      	mov	r1, r6
 800498e:	4658      	mov	r0, fp
 8004990:	f000 fc08 	bl	80051a4 <__lshift>
 8004994:	f10a 0301 	add.w	r3, sl, #1
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	9b00      	ldr	r3, [sp, #0]
 800499c:	4453      	add	r3, sl
 800499e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049a0:	9b02      	ldr	r3, [sp, #8]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	462f      	mov	r7, r5
 80049a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049aa:	4605      	mov	r5, r0
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	4621      	mov	r1, r4
 80049b0:	3b01      	subs	r3, #1
 80049b2:	4648      	mov	r0, r9
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	f7ff fa98 	bl	8003eea <quorem>
 80049ba:	4639      	mov	r1, r7
 80049bc:	9002      	str	r0, [sp, #8]
 80049be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80049c2:	4648      	mov	r0, r9
 80049c4:	f000 fc5a 	bl	800527c <__mcmp>
 80049c8:	462a      	mov	r2, r5
 80049ca:	9008      	str	r0, [sp, #32]
 80049cc:	4621      	mov	r1, r4
 80049ce:	4658      	mov	r0, fp
 80049d0:	f000 fc70 	bl	80052b4 <__mdiff>
 80049d4:	68c2      	ldr	r2, [r0, #12]
 80049d6:	4606      	mov	r6, r0
 80049d8:	bb02      	cbnz	r2, 8004a1c <_dtoa_r+0xa1c>
 80049da:	4601      	mov	r1, r0
 80049dc:	4648      	mov	r0, r9
 80049de:	f000 fc4d 	bl	800527c <__mcmp>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4631      	mov	r1, r6
 80049e6:	4658      	mov	r0, fp
 80049e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80049ea:	f000 fa0d 	bl	8004e08 <_Bfree>
 80049ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049f2:	9e07      	ldr	r6, [sp, #28]
 80049f4:	ea43 0102 	orr.w	r1, r3, r2
 80049f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049fa:	4319      	orrs	r1, r3
 80049fc:	d110      	bne.n	8004a20 <_dtoa_r+0xa20>
 80049fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a02:	d029      	beq.n	8004a58 <_dtoa_r+0xa58>
 8004a04:	9b08      	ldr	r3, [sp, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dd02      	ble.n	8004a10 <_dtoa_r+0xa10>
 8004a0a:	9b02      	ldr	r3, [sp, #8]
 8004a0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004a10:	9b00      	ldr	r3, [sp, #0]
 8004a12:	f883 8000 	strb.w	r8, [r3]
 8004a16:	e63f      	b.n	8004698 <_dtoa_r+0x698>
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e7bb      	b.n	8004994 <_dtoa_r+0x994>
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	e7e1      	b.n	80049e4 <_dtoa_r+0x9e4>
 8004a20:	9b08      	ldr	r3, [sp, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db04      	blt.n	8004a30 <_dtoa_r+0xa30>
 8004a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	d120      	bne.n	8004a72 <_dtoa_r+0xa72>
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	dded      	ble.n	8004a10 <_dtoa_r+0xa10>
 8004a34:	4649      	mov	r1, r9
 8004a36:	2201      	movs	r2, #1
 8004a38:	4658      	mov	r0, fp
 8004a3a:	f000 fbb3 	bl	80051a4 <__lshift>
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4681      	mov	r9, r0
 8004a42:	f000 fc1b 	bl	800527c <__mcmp>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	dc03      	bgt.n	8004a52 <_dtoa_r+0xa52>
 8004a4a:	d1e1      	bne.n	8004a10 <_dtoa_r+0xa10>
 8004a4c:	f018 0f01 	tst.w	r8, #1
 8004a50:	d0de      	beq.n	8004a10 <_dtoa_r+0xa10>
 8004a52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a56:	d1d8      	bne.n	8004a0a <_dtoa_r+0xa0a>
 8004a58:	9a00      	ldr	r2, [sp, #0]
 8004a5a:	2339      	movs	r3, #57	@ 0x39
 8004a5c:	7013      	strb	r3, [r2, #0]
 8004a5e:	4633      	mov	r3, r6
 8004a60:	461e      	mov	r6, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004a68:	2a39      	cmp	r2, #57	@ 0x39
 8004a6a:	d052      	beq.n	8004b12 <_dtoa_r+0xb12>
 8004a6c:	3201      	adds	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	e612      	b.n	8004698 <_dtoa_r+0x698>
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	dd07      	ble.n	8004a86 <_dtoa_r+0xa86>
 8004a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a7a:	d0ed      	beq.n	8004a58 <_dtoa_r+0xa58>
 8004a7c:	9a00      	ldr	r2, [sp, #0]
 8004a7e:	f108 0301 	add.w	r3, r8, #1
 8004a82:	7013      	strb	r3, [r2, #0]
 8004a84:	e608      	b.n	8004698 <_dtoa_r+0x698>
 8004a86:	9b07      	ldr	r3, [sp, #28]
 8004a88:	9a07      	ldr	r2, [sp, #28]
 8004a8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d028      	beq.n	8004ae6 <_dtoa_r+0xae6>
 8004a94:	4649      	mov	r1, r9
 8004a96:	2300      	movs	r3, #0
 8004a98:	220a      	movs	r2, #10
 8004a9a:	4658      	mov	r0, fp
 8004a9c:	f000 f9d6 	bl	8004e4c <__multadd>
 8004aa0:	42af      	cmp	r7, r5
 8004aa2:	4681      	mov	r9, r0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	f04f 020a 	mov.w	r2, #10
 8004aac:	4639      	mov	r1, r7
 8004aae:	4658      	mov	r0, fp
 8004ab0:	d107      	bne.n	8004ac2 <_dtoa_r+0xac2>
 8004ab2:	f000 f9cb 	bl	8004e4c <__multadd>
 8004ab6:	4607      	mov	r7, r0
 8004ab8:	4605      	mov	r5, r0
 8004aba:	9b07      	ldr	r3, [sp, #28]
 8004abc:	3301      	adds	r3, #1
 8004abe:	9307      	str	r3, [sp, #28]
 8004ac0:	e774      	b.n	80049ac <_dtoa_r+0x9ac>
 8004ac2:	f000 f9c3 	bl	8004e4c <__multadd>
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4607      	mov	r7, r0
 8004aca:	2300      	movs	r3, #0
 8004acc:	220a      	movs	r2, #10
 8004ace:	4658      	mov	r0, fp
 8004ad0:	f000 f9bc 	bl	8004e4c <__multadd>
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	e7f0      	b.n	8004aba <_dtoa_r+0xaba>
 8004ad8:	9b00      	ldr	r3, [sp, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfcc      	ite	gt
 8004ade:	461e      	movgt	r6, r3
 8004ae0:	2601      	movle	r6, #1
 8004ae2:	4456      	add	r6, sl
 8004ae4:	2700      	movs	r7, #0
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4658      	mov	r0, fp
 8004aec:	f000 fb5a 	bl	80051a4 <__lshift>
 8004af0:	4621      	mov	r1, r4
 8004af2:	4681      	mov	r9, r0
 8004af4:	f000 fbc2 	bl	800527c <__mcmp>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	dcb0      	bgt.n	8004a5e <_dtoa_r+0xa5e>
 8004afc:	d102      	bne.n	8004b04 <_dtoa_r+0xb04>
 8004afe:	f018 0f01 	tst.w	r8, #1
 8004b02:	d1ac      	bne.n	8004a5e <_dtoa_r+0xa5e>
 8004b04:	4633      	mov	r3, r6
 8004b06:	461e      	mov	r6, r3
 8004b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b0c:	2a30      	cmp	r2, #48	@ 0x30
 8004b0e:	d0fa      	beq.n	8004b06 <_dtoa_r+0xb06>
 8004b10:	e5c2      	b.n	8004698 <_dtoa_r+0x698>
 8004b12:	459a      	cmp	sl, r3
 8004b14:	d1a4      	bne.n	8004a60 <_dtoa_r+0xa60>
 8004b16:	9b04      	ldr	r3, [sp, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	2331      	movs	r3, #49	@ 0x31
 8004b1e:	f88a 3000 	strb.w	r3, [sl]
 8004b22:	e5b9      	b.n	8004698 <_dtoa_r+0x698>
 8004b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004b84 <_dtoa_r+0xb84>
 8004b2a:	b11b      	cbz	r3, 8004b34 <_dtoa_r+0xb34>
 8004b2c:	f10a 0308 	add.w	r3, sl, #8
 8004b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4650      	mov	r0, sl
 8004b36:	b019      	add	sp, #100	@ 0x64
 8004b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	f77f ae37 	ble.w	80047b2 <_dtoa_r+0x7b2>
 8004b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e655      	b.n	80047f8 <_dtoa_r+0x7f8>
 8004b4c:	9b00      	ldr	r3, [sp, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f77f aed6 	ble.w	8004900 <_dtoa_r+0x900>
 8004b54:	4656      	mov	r6, sl
 8004b56:	4621      	mov	r1, r4
 8004b58:	4648      	mov	r0, r9
 8004b5a:	f7ff f9c6 	bl	8003eea <quorem>
 8004b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b62:	f806 8b01 	strb.w	r8, [r6], #1
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	eba6 020a 	sub.w	r2, r6, sl
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	ddb3      	ble.n	8004ad8 <_dtoa_r+0xad8>
 8004b70:	4649      	mov	r1, r9
 8004b72:	2300      	movs	r3, #0
 8004b74:	220a      	movs	r2, #10
 8004b76:	4658      	mov	r0, fp
 8004b78:	f000 f968 	bl	8004e4c <__multadd>
 8004b7c:	4681      	mov	r9, r0
 8004b7e:	e7ea      	b.n	8004b56 <_dtoa_r+0xb56>
 8004b80:	080064cb 	.word	0x080064cb
 8004b84:	0800644f 	.word	0x0800644f

08004b88 <_free_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d041      	beq.n	8004c14 <_free_r+0x8c>
 8004b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b94:	1f0c      	subs	r4, r1, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bfb8      	it	lt
 8004b9a:	18e4      	addlt	r4, r4, r3
 8004b9c:	f000 f8e8 	bl	8004d70 <__malloc_lock>
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <_free_r+0x90>)
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	b933      	cbnz	r3, 8004bb4 <_free_r+0x2c>
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	6014      	str	r4, [r2, #0]
 8004baa:	4628      	mov	r0, r5
 8004bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bb0:	f000 b8e4 	b.w	8004d7c <__malloc_unlock>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d908      	bls.n	8004bca <_free_r+0x42>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	1821      	adds	r1, r4, r0
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	bf01      	itttt	eq
 8004bc0:	6819      	ldreq	r1, [r3, #0]
 8004bc2:	685b      	ldreq	r3, [r3, #4]
 8004bc4:	1809      	addeq	r1, r1, r0
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	e7ed      	b.n	8004ba6 <_free_r+0x1e>
 8004bca:	461a      	mov	r2, r3
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b10b      	cbz	r3, 8004bd4 <_free_r+0x4c>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d9fa      	bls.n	8004bca <_free_r+0x42>
 8004bd4:	6811      	ldr	r1, [r2, #0]
 8004bd6:	1850      	adds	r0, r2, r1
 8004bd8:	42a0      	cmp	r0, r4
 8004bda:	d10b      	bne.n	8004bf4 <_free_r+0x6c>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	4401      	add	r1, r0
 8004be0:	1850      	adds	r0, r2, r1
 8004be2:	4283      	cmp	r3, r0
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	d1e0      	bne.n	8004baa <_free_r+0x22>
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	6053      	str	r3, [r2, #4]
 8004bee:	4408      	add	r0, r1
 8004bf0:	6010      	str	r0, [r2, #0]
 8004bf2:	e7da      	b.n	8004baa <_free_r+0x22>
 8004bf4:	d902      	bls.n	8004bfc <_free_r+0x74>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	e7d6      	b.n	8004baa <_free_r+0x22>
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	1821      	adds	r1, r4, r0
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf04      	itt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	bf04      	itt	eq
 8004c0c:	1809      	addeq	r1, r1, r0
 8004c0e:	6021      	streq	r1, [r4, #0]
 8004c10:	6054      	str	r4, [r2, #4]
 8004c12:	e7ca      	b.n	8004baa <_free_r+0x22>
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
 8004c16:	bf00      	nop
 8004c18:	20000498 	.word	0x20000498

08004c1c <malloc>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	@ (8004c28 <malloc+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f000 b825 	b.w	8004c70 <_malloc_r>
 8004c26:	bf00      	nop
 8004c28:	2000009c 	.word	0x2000009c

08004c2c <sbrk_aligned>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c6c <sbrk_aligned+0x40>)
 8004c30:	460c      	mov	r4, r1
 8004c32:	6831      	ldr	r1, [r6, #0]
 8004c34:	4605      	mov	r5, r0
 8004c36:	b911      	cbnz	r1, 8004c3e <sbrk_aligned+0x12>
 8004c38:	f000 fe46 	bl	80058c8 <_sbrk_r>
 8004c3c:	6030      	str	r0, [r6, #0]
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fe41 	bl	80058c8 <_sbrk_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d103      	bne.n	8004c52 <sbrk_aligned+0x26>
 8004c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c4e:	4620      	mov	r0, r4
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
 8004c52:	1cc4      	adds	r4, r0, #3
 8004c54:	f024 0403 	bic.w	r4, r4, #3
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d0f8      	beq.n	8004c4e <sbrk_aligned+0x22>
 8004c5c:	1a21      	subs	r1, r4, r0
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fe32 	bl	80058c8 <_sbrk_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1f2      	bne.n	8004c4e <sbrk_aligned+0x22>
 8004c68:	e7ef      	b.n	8004c4a <sbrk_aligned+0x1e>
 8004c6a:	bf00      	nop
 8004c6c:	20000494 	.word	0x20000494

08004c70 <_malloc_r>:
 8004c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c74:	1ccd      	adds	r5, r1, #3
 8004c76:	f025 0503 	bic.w	r5, r5, #3
 8004c7a:	3508      	adds	r5, #8
 8004c7c:	2d0c      	cmp	r5, #12
 8004c7e:	bf38      	it	cc
 8004c80:	250c      	movcc	r5, #12
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	4606      	mov	r6, r0
 8004c86:	db01      	blt.n	8004c8c <_malloc_r+0x1c>
 8004c88:	42a9      	cmp	r1, r5
 8004c8a:	d904      	bls.n	8004c96 <_malloc_r+0x26>
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	2000      	movs	r0, #0
 8004c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d6c <_malloc_r+0xfc>
 8004c9a:	f000 f869 	bl	8004d70 <__malloc_lock>
 8004c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	bb44      	cbnz	r4, 8004cf8 <_malloc_r+0x88>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f7ff ffbf 	bl	8004c2c <sbrk_aligned>
 8004cae:	1c43      	adds	r3, r0, #1
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	d158      	bne.n	8004d66 <_malloc_r+0xf6>
 8004cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8004cb8:	4627      	mov	r7, r4
 8004cba:	2f00      	cmp	r7, #0
 8004cbc:	d143      	bne.n	8004d46 <_malloc_r+0xd6>
 8004cbe:	2c00      	cmp	r4, #0
 8004cc0:	d04b      	beq.n	8004d5a <_malloc_r+0xea>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	eb04 0903 	add.w	r9, r4, r3
 8004ccc:	f000 fdfc 	bl	80058c8 <_sbrk_r>
 8004cd0:	4581      	cmp	r9, r0
 8004cd2:	d142      	bne.n	8004d5a <_malloc_r+0xea>
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	1a6d      	subs	r5, r5, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff ffa6 	bl	8004c2c <sbrk_aligned>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d03a      	beq.n	8004d5a <_malloc_r+0xea>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	442b      	add	r3, r5
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	f8d8 3000 	ldr.w	r3, [r8]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	bb62      	cbnz	r2, 8004d4c <_malloc_r+0xdc>
 8004cf2:	f8c8 7000 	str.w	r7, [r8]
 8004cf6:	e00f      	b.n	8004d18 <_malloc_r+0xa8>
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	1b52      	subs	r2, r2, r5
 8004cfc:	d420      	bmi.n	8004d40 <_malloc_r+0xd0>
 8004cfe:	2a0b      	cmp	r2, #11
 8004d00:	d917      	bls.n	8004d32 <_malloc_r+0xc2>
 8004d02:	1961      	adds	r1, r4, r5
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	6025      	str	r5, [r4, #0]
 8004d08:	bf18      	it	ne
 8004d0a:	6059      	strne	r1, [r3, #4]
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	bf08      	it	eq
 8004d10:	f8c8 1000 	streq.w	r1, [r8]
 8004d14:	5162      	str	r2, [r4, r5]
 8004d16:	604b      	str	r3, [r1, #4]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f82f 	bl	8004d7c <__malloc_unlock>
 8004d1e:	f104 000b 	add.w	r0, r4, #11
 8004d22:	1d23      	adds	r3, r4, #4
 8004d24:	f020 0007 	bic.w	r0, r0, #7
 8004d28:	1ac2      	subs	r2, r0, r3
 8004d2a:	bf1c      	itt	ne
 8004d2c:	1a1b      	subne	r3, r3, r0
 8004d2e:	50a3      	strne	r3, [r4, r2]
 8004d30:	e7af      	b.n	8004c92 <_malloc_r+0x22>
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	bf0c      	ite	eq
 8004d38:	f8c8 2000 	streq.w	r2, [r8]
 8004d3c:	605a      	strne	r2, [r3, #4]
 8004d3e:	e7eb      	b.n	8004d18 <_malloc_r+0xa8>
 8004d40:	4623      	mov	r3, r4
 8004d42:	6864      	ldr	r4, [r4, #4]
 8004d44:	e7ae      	b.n	8004ca4 <_malloc_r+0x34>
 8004d46:	463c      	mov	r4, r7
 8004d48:	687f      	ldr	r7, [r7, #4]
 8004d4a:	e7b6      	b.n	8004cba <_malloc_r+0x4a>
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d1fb      	bne.n	8004d4c <_malloc_r+0xdc>
 8004d54:	2300      	movs	r3, #0
 8004d56:	6053      	str	r3, [r2, #4]
 8004d58:	e7de      	b.n	8004d18 <_malloc_r+0xa8>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f80c 	bl	8004d7c <__malloc_unlock>
 8004d64:	e794      	b.n	8004c90 <_malloc_r+0x20>
 8004d66:	6005      	str	r5, [r0, #0]
 8004d68:	e7d6      	b.n	8004d18 <_malloc_r+0xa8>
 8004d6a:	bf00      	nop
 8004d6c:	20000498 	.word	0x20000498

08004d70 <__malloc_lock>:
 8004d70:	4801      	ldr	r0, [pc, #4]	@ (8004d78 <__malloc_lock+0x8>)
 8004d72:	f7ff b8b8 	b.w	8003ee6 <__retarget_lock_acquire_recursive>
 8004d76:	bf00      	nop
 8004d78:	20000490 	.word	0x20000490

08004d7c <__malloc_unlock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	@ (8004d84 <__malloc_unlock+0x8>)
 8004d7e:	f7ff b8b3 	b.w	8003ee8 <__retarget_lock_release_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000490 	.word	0x20000490

08004d88 <_Balloc>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	69c6      	ldr	r6, [r0, #28]
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	460d      	mov	r5, r1
 8004d90:	b976      	cbnz	r6, 8004db0 <_Balloc+0x28>
 8004d92:	2010      	movs	r0, #16
 8004d94:	f7ff ff42 	bl	8004c1c <malloc>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	61e0      	str	r0, [r4, #28]
 8004d9c:	b920      	cbnz	r0, 8004da8 <_Balloc+0x20>
 8004d9e:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <_Balloc+0x78>)
 8004da0:	4818      	ldr	r0, [pc, #96]	@ (8004e04 <_Balloc+0x7c>)
 8004da2:	216b      	movs	r1, #107	@ 0x6b
 8004da4:	f000 fdae 	bl	8005904 <__assert_func>
 8004da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dac:	6006      	str	r6, [r0, #0]
 8004dae:	60c6      	str	r6, [r0, #12]
 8004db0:	69e6      	ldr	r6, [r4, #28]
 8004db2:	68f3      	ldr	r3, [r6, #12]
 8004db4:	b183      	cbz	r3, 8004dd8 <_Balloc+0x50>
 8004db6:	69e3      	ldr	r3, [r4, #28]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dbe:	b9b8      	cbnz	r0, 8004df0 <_Balloc+0x68>
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8004dc6:	1d72      	adds	r2, r6, #5
 8004dc8:	0092      	lsls	r2, r2, #2
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 fdb8 	bl	8005940 <_calloc_r>
 8004dd0:	b160      	cbz	r0, 8004dec <_Balloc+0x64>
 8004dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dd6:	e00e      	b.n	8004df6 <_Balloc+0x6e>
 8004dd8:	2221      	movs	r2, #33	@ 0x21
 8004dda:	2104      	movs	r1, #4
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 fdaf 	bl	8005940 <_calloc_r>
 8004de2:	69e3      	ldr	r3, [r4, #28]
 8004de4:	60f0      	str	r0, [r6, #12]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e4      	bne.n	8004db6 <_Balloc+0x2e>
 8004dec:	2000      	movs	r0, #0
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	6802      	ldr	r2, [r0, #0]
 8004df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004df6:	2300      	movs	r3, #0
 8004df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004dfc:	e7f7      	b.n	8004dee <_Balloc+0x66>
 8004dfe:	bf00      	nop
 8004e00:	0800645c 	.word	0x0800645c
 8004e04:	080064dc 	.word	0x080064dc

08004e08 <_Bfree>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	69c6      	ldr	r6, [r0, #28]
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b976      	cbnz	r6, 8004e30 <_Bfree+0x28>
 8004e12:	2010      	movs	r0, #16
 8004e14:	f7ff ff02 	bl	8004c1c <malloc>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	61e8      	str	r0, [r5, #28]
 8004e1c:	b920      	cbnz	r0, 8004e28 <_Bfree+0x20>
 8004e1e:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <_Bfree+0x3c>)
 8004e20:	4809      	ldr	r0, [pc, #36]	@ (8004e48 <_Bfree+0x40>)
 8004e22:	218f      	movs	r1, #143	@ 0x8f
 8004e24:	f000 fd6e 	bl	8005904 <__assert_func>
 8004e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e2c:	6006      	str	r6, [r0, #0]
 8004e2e:	60c6      	str	r6, [r0, #12]
 8004e30:	b13c      	cbz	r4, 8004e42 <_Bfree+0x3a>
 8004e32:	69eb      	ldr	r3, [r5, #28]
 8004e34:	6862      	ldr	r2, [r4, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e3c:	6021      	str	r1, [r4, #0]
 8004e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	0800645c 	.word	0x0800645c
 8004e48:	080064dc 	.word	0x080064dc

08004e4c <__multadd>:
 8004e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e50:	690d      	ldr	r5, [r1, #16]
 8004e52:	4607      	mov	r7, r0
 8004e54:	460c      	mov	r4, r1
 8004e56:	461e      	mov	r6, r3
 8004e58:	f101 0c14 	add.w	ip, r1, #20
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8004e62:	b299      	uxth	r1, r3
 8004e64:	fb02 6101 	mla	r1, r2, r1, r6
 8004e68:	0c1e      	lsrs	r6, r3, #16
 8004e6a:	0c0b      	lsrs	r3, r1, #16
 8004e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8004e70:	b289      	uxth	r1, r1
 8004e72:	3001      	adds	r0, #1
 8004e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e78:	4285      	cmp	r5, r0
 8004e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8004e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e82:	dcec      	bgt.n	8004e5e <__multadd+0x12>
 8004e84:	b30e      	cbz	r6, 8004eca <__multadd+0x7e>
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc19      	bgt.n	8004ec0 <__multadd+0x74>
 8004e8c:	6861      	ldr	r1, [r4, #4]
 8004e8e:	4638      	mov	r0, r7
 8004e90:	3101      	adds	r1, #1
 8004e92:	f7ff ff79 	bl	8004d88 <_Balloc>
 8004e96:	4680      	mov	r8, r0
 8004e98:	b928      	cbnz	r0, 8004ea6 <__multadd+0x5a>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <__multadd+0x84>)
 8004e9e:	480d      	ldr	r0, [pc, #52]	@ (8004ed4 <__multadd+0x88>)
 8004ea0:	21ba      	movs	r1, #186	@ 0xba
 8004ea2:	f000 fd2f 	bl	8005904 <__assert_func>
 8004ea6:	6922      	ldr	r2, [r4, #16]
 8004ea8:	3202      	adds	r2, #2
 8004eaa:	f104 010c 	add.w	r1, r4, #12
 8004eae:	0092      	lsls	r2, r2, #2
 8004eb0:	300c      	adds	r0, #12
 8004eb2:	f000 fd19 	bl	80058e8 <memcpy>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f7ff ffa5 	bl	8004e08 <_Bfree>
 8004ebe:	4644      	mov	r4, r8
 8004ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	615e      	str	r6, [r3, #20]
 8004ec8:	6125      	str	r5, [r4, #16]
 8004eca:	4620      	mov	r0, r4
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed0:	080064cb 	.word	0x080064cb
 8004ed4:	080064dc 	.word	0x080064dc

08004ed8 <__hi0bits>:
 8004ed8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004edc:	4603      	mov	r3, r0
 8004ede:	bf36      	itet	cc
 8004ee0:	0403      	lslcc	r3, r0, #16
 8004ee2:	2000      	movcs	r0, #0
 8004ee4:	2010      	movcc	r0, #16
 8004ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eea:	bf3c      	itt	cc
 8004eec:	021b      	lslcc	r3, r3, #8
 8004eee:	3008      	addcc	r0, #8
 8004ef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef4:	bf3c      	itt	cc
 8004ef6:	011b      	lslcc	r3, r3, #4
 8004ef8:	3004      	addcc	r0, #4
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efe:	bf3c      	itt	cc
 8004f00:	009b      	lslcc	r3, r3, #2
 8004f02:	3002      	addcc	r0, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db05      	blt.n	8004f14 <__hi0bits+0x3c>
 8004f08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004f0c:	f100 0001 	add.w	r0, r0, #1
 8004f10:	bf08      	it	eq
 8004f12:	2020      	moveq	r0, #32
 8004f14:	4770      	bx	lr

08004f16 <__lo0bits>:
 8004f16:	6803      	ldr	r3, [r0, #0]
 8004f18:	4602      	mov	r2, r0
 8004f1a:	f013 0007 	ands.w	r0, r3, #7
 8004f1e:	d00b      	beq.n	8004f38 <__lo0bits+0x22>
 8004f20:	07d9      	lsls	r1, r3, #31
 8004f22:	d421      	bmi.n	8004f68 <__lo0bits+0x52>
 8004f24:	0798      	lsls	r0, r3, #30
 8004f26:	bf49      	itett	mi
 8004f28:	085b      	lsrmi	r3, r3, #1
 8004f2a:	089b      	lsrpl	r3, r3, #2
 8004f2c:	2001      	movmi	r0, #1
 8004f2e:	6013      	strmi	r3, [r2, #0]
 8004f30:	bf5c      	itt	pl
 8004f32:	6013      	strpl	r3, [r2, #0]
 8004f34:	2002      	movpl	r0, #2
 8004f36:	4770      	bx	lr
 8004f38:	b299      	uxth	r1, r3
 8004f3a:	b909      	cbnz	r1, 8004f40 <__lo0bits+0x2a>
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	2010      	movs	r0, #16
 8004f40:	b2d9      	uxtb	r1, r3
 8004f42:	b909      	cbnz	r1, 8004f48 <__lo0bits+0x32>
 8004f44:	3008      	adds	r0, #8
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	0719      	lsls	r1, r3, #28
 8004f4a:	bf04      	itt	eq
 8004f4c:	091b      	lsreq	r3, r3, #4
 8004f4e:	3004      	addeq	r0, #4
 8004f50:	0799      	lsls	r1, r3, #30
 8004f52:	bf04      	itt	eq
 8004f54:	089b      	lsreq	r3, r3, #2
 8004f56:	3002      	addeq	r0, #2
 8004f58:	07d9      	lsls	r1, r3, #31
 8004f5a:	d403      	bmi.n	8004f64 <__lo0bits+0x4e>
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	f100 0001 	add.w	r0, r0, #1
 8004f62:	d003      	beq.n	8004f6c <__lo0bits+0x56>
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4770      	bx	lr
 8004f68:	2000      	movs	r0, #0
 8004f6a:	4770      	bx	lr
 8004f6c:	2020      	movs	r0, #32
 8004f6e:	4770      	bx	lr

08004f70 <__i2b>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	460c      	mov	r4, r1
 8004f74:	2101      	movs	r1, #1
 8004f76:	f7ff ff07 	bl	8004d88 <_Balloc>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	b928      	cbnz	r0, 8004f8a <__i2b+0x1a>
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <__i2b+0x24>)
 8004f80:	4805      	ldr	r0, [pc, #20]	@ (8004f98 <__i2b+0x28>)
 8004f82:	f240 1145 	movw	r1, #325	@ 0x145
 8004f86:	f000 fcbd 	bl	8005904 <__assert_func>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	6144      	str	r4, [r0, #20]
 8004f8e:	6103      	str	r3, [r0, #16]
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	080064cb 	.word	0x080064cb
 8004f98:	080064dc 	.word	0x080064dc

08004f9c <__multiply>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	690a      	ldr	r2, [r1, #16]
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bfa8      	it	ge
 8004faa:	4623      	movge	r3, r4
 8004fac:	460f      	mov	r7, r1
 8004fae:	bfa4      	itt	ge
 8004fb0:	460c      	movge	r4, r1
 8004fb2:	461f      	movge	r7, r3
 8004fb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004fb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	6861      	ldr	r1, [r4, #4]
 8004fc0:	eb0a 0609 	add.w	r6, sl, r9
 8004fc4:	42b3      	cmp	r3, r6
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	bfb8      	it	lt
 8004fca:	3101      	addlt	r1, #1
 8004fcc:	f7ff fedc 	bl	8004d88 <_Balloc>
 8004fd0:	b930      	cbnz	r0, 8004fe0 <__multiply+0x44>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <__multiply+0x14c>)
 8004fd6:	4845      	ldr	r0, [pc, #276]	@ (80050ec <__multiply+0x150>)
 8004fd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004fdc:	f000 fc92 	bl	8005904 <__assert_func>
 8004fe0:	f100 0514 	add.w	r5, r0, #20
 8004fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fe8:	462b      	mov	r3, r5
 8004fea:	2200      	movs	r2, #0
 8004fec:	4543      	cmp	r3, r8
 8004fee:	d321      	bcc.n	8005034 <__multiply+0x98>
 8004ff0:	f107 0114 	add.w	r1, r7, #20
 8004ff4:	f104 0214 	add.w	r2, r4, #20
 8004ff8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004ffc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	1b13      	subs	r3, r2, r4
 8005004:	3b15      	subs	r3, #21
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	3304      	adds	r3, #4
 800500c:	f104 0715 	add.w	r7, r4, #21
 8005010:	42ba      	cmp	r2, r7
 8005012:	bf38      	it	cc
 8005014:	2304      	movcc	r3, #4
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	428b      	cmp	r3, r1
 800501e:	d80c      	bhi.n	800503a <__multiply+0x9e>
 8005020:	2e00      	cmp	r6, #0
 8005022:	dd03      	ble.n	800502c <__multiply+0x90>
 8005024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05b      	beq.n	80050e4 <__multiply+0x148>
 800502c:	6106      	str	r6, [r0, #16]
 800502e:	b005      	add	sp, #20
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	f843 2b04 	str.w	r2, [r3], #4
 8005038:	e7d8      	b.n	8004fec <__multiply+0x50>
 800503a:	f8b1 a000 	ldrh.w	sl, [r1]
 800503e:	f1ba 0f00 	cmp.w	sl, #0
 8005042:	d024      	beq.n	800508e <__multiply+0xf2>
 8005044:	f104 0e14 	add.w	lr, r4, #20
 8005048:	46a9      	mov	r9, r5
 800504a:	f04f 0c00 	mov.w	ip, #0
 800504e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005052:	f8d9 3000 	ldr.w	r3, [r9]
 8005056:	fa1f fb87 	uxth.w	fp, r7
 800505a:	b29b      	uxth	r3, r3
 800505c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005060:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005064:	f8d9 7000 	ldr.w	r7, [r9]
 8005068:	4463      	add	r3, ip
 800506a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800506e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005072:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800507c:	4572      	cmp	r2, lr
 800507e:	f849 3b04 	str.w	r3, [r9], #4
 8005082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005086:	d8e2      	bhi.n	800504e <__multiply+0xb2>
 8005088:	9b01      	ldr	r3, [sp, #4]
 800508a:	f845 c003 	str.w	ip, [r5, r3]
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005094:	3104      	adds	r1, #4
 8005096:	f1b9 0f00 	cmp.w	r9, #0
 800509a:	d021      	beq.n	80050e0 <__multiply+0x144>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	f104 0c14 	add.w	ip, r4, #20
 80050a2:	46ae      	mov	lr, r5
 80050a4:	f04f 0a00 	mov.w	sl, #0
 80050a8:	f8bc b000 	ldrh.w	fp, [ip]
 80050ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80050b0:	fb09 770b 	mla	r7, r9, fp, r7
 80050b4:	4457      	add	r7, sl
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80050bc:	f84e 3b04 	str.w	r3, [lr], #4
 80050c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80050c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050c8:	f8be 3000 	ldrh.w	r3, [lr]
 80050cc:	fb09 330a 	mla	r3, r9, sl, r3
 80050d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80050d4:	4562      	cmp	r2, ip
 80050d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050da:	d8e5      	bhi.n	80050a8 <__multiply+0x10c>
 80050dc:	9f01      	ldr	r7, [sp, #4]
 80050de:	51eb      	str	r3, [r5, r7]
 80050e0:	3504      	adds	r5, #4
 80050e2:	e799      	b.n	8005018 <__multiply+0x7c>
 80050e4:	3e01      	subs	r6, #1
 80050e6:	e79b      	b.n	8005020 <__multiply+0x84>
 80050e8:	080064cb 	.word	0x080064cb
 80050ec:	080064dc 	.word	0x080064dc

080050f0 <__pow5mult>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	4615      	mov	r5, r2
 80050f6:	f012 0203 	ands.w	r2, r2, #3
 80050fa:	4607      	mov	r7, r0
 80050fc:	460e      	mov	r6, r1
 80050fe:	d007      	beq.n	8005110 <__pow5mult+0x20>
 8005100:	4c25      	ldr	r4, [pc, #148]	@ (8005198 <__pow5mult+0xa8>)
 8005102:	3a01      	subs	r2, #1
 8005104:	2300      	movs	r3, #0
 8005106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800510a:	f7ff fe9f 	bl	8004e4c <__multadd>
 800510e:	4606      	mov	r6, r0
 8005110:	10ad      	asrs	r5, r5, #2
 8005112:	d03d      	beq.n	8005190 <__pow5mult+0xa0>
 8005114:	69fc      	ldr	r4, [r7, #28]
 8005116:	b97c      	cbnz	r4, 8005138 <__pow5mult+0x48>
 8005118:	2010      	movs	r0, #16
 800511a:	f7ff fd7f 	bl	8004c1c <malloc>
 800511e:	4602      	mov	r2, r0
 8005120:	61f8      	str	r0, [r7, #28]
 8005122:	b928      	cbnz	r0, 8005130 <__pow5mult+0x40>
 8005124:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <__pow5mult+0xac>)
 8005126:	481e      	ldr	r0, [pc, #120]	@ (80051a0 <__pow5mult+0xb0>)
 8005128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800512c:	f000 fbea 	bl	8005904 <__assert_func>
 8005130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005134:	6004      	str	r4, [r0, #0]
 8005136:	60c4      	str	r4, [r0, #12]
 8005138:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800513c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005140:	b94c      	cbnz	r4, 8005156 <__pow5mult+0x66>
 8005142:	f240 2171 	movw	r1, #625	@ 0x271
 8005146:	4638      	mov	r0, r7
 8005148:	f7ff ff12 	bl	8004f70 <__i2b>
 800514c:	2300      	movs	r3, #0
 800514e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005152:	4604      	mov	r4, r0
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	07eb      	lsls	r3, r5, #31
 800515c:	d50a      	bpl.n	8005174 <__pow5mult+0x84>
 800515e:	4631      	mov	r1, r6
 8005160:	4622      	mov	r2, r4
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ff1a 	bl	8004f9c <__multiply>
 8005168:	4631      	mov	r1, r6
 800516a:	4680      	mov	r8, r0
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff fe4b 	bl	8004e08 <_Bfree>
 8005172:	4646      	mov	r6, r8
 8005174:	106d      	asrs	r5, r5, #1
 8005176:	d00b      	beq.n	8005190 <__pow5mult+0xa0>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	b938      	cbnz	r0, 800518c <__pow5mult+0x9c>
 800517c:	4622      	mov	r2, r4
 800517e:	4621      	mov	r1, r4
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff0b 	bl	8004f9c <__multiply>
 8005186:	6020      	str	r0, [r4, #0]
 8005188:	f8c0 9000 	str.w	r9, [r0]
 800518c:	4604      	mov	r4, r0
 800518e:	e7e4      	b.n	800515a <__pow5mult+0x6a>
 8005190:	4630      	mov	r0, r6
 8005192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005196:	bf00      	nop
 8005198:	08006538 	.word	0x08006538
 800519c:	0800645c 	.word	0x0800645c
 80051a0:	080064dc 	.word	0x080064dc

080051a4 <__lshift>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	460c      	mov	r4, r1
 80051aa:	6849      	ldr	r1, [r1, #4]
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	4607      	mov	r7, r0
 80051b6:	4691      	mov	r9, r2
 80051b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051bc:	f108 0601 	add.w	r6, r8, #1
 80051c0:	42b3      	cmp	r3, r6
 80051c2:	db0b      	blt.n	80051dc <__lshift+0x38>
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff fddf 	bl	8004d88 <_Balloc>
 80051ca:	4605      	mov	r5, r0
 80051cc:	b948      	cbnz	r0, 80051e2 <__lshift+0x3e>
 80051ce:	4602      	mov	r2, r0
 80051d0:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <__lshift+0xd0>)
 80051d2:	4829      	ldr	r0, [pc, #164]	@ (8005278 <__lshift+0xd4>)
 80051d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80051d8:	f000 fb94 	bl	8005904 <__assert_func>
 80051dc:	3101      	adds	r1, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	e7ee      	b.n	80051c0 <__lshift+0x1c>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f100 0114 	add.w	r1, r0, #20
 80051e8:	f100 0210 	add.w	r2, r0, #16
 80051ec:	4618      	mov	r0, r3
 80051ee:	4553      	cmp	r3, sl
 80051f0:	db33      	blt.n	800525a <__lshift+0xb6>
 80051f2:	6920      	ldr	r0, [r4, #16]
 80051f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051f8:	f104 0314 	add.w	r3, r4, #20
 80051fc:	f019 091f 	ands.w	r9, r9, #31
 8005200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005208:	d02b      	beq.n	8005262 <__lshift+0xbe>
 800520a:	f1c9 0e20 	rsb	lr, r9, #32
 800520e:	468a      	mov	sl, r1
 8005210:	2200      	movs	r2, #0
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	fa00 f009 	lsl.w	r0, r0, r9
 8005218:	4310      	orrs	r0, r2
 800521a:	f84a 0b04 	str.w	r0, [sl], #4
 800521e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005222:	459c      	cmp	ip, r3
 8005224:	fa22 f20e 	lsr.w	r2, r2, lr
 8005228:	d8f3      	bhi.n	8005212 <__lshift+0x6e>
 800522a:	ebac 0304 	sub.w	r3, ip, r4
 800522e:	3b15      	subs	r3, #21
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	3304      	adds	r3, #4
 8005236:	f104 0015 	add.w	r0, r4, #21
 800523a:	4584      	cmp	ip, r0
 800523c:	bf38      	it	cc
 800523e:	2304      	movcc	r3, #4
 8005240:	50ca      	str	r2, [r1, r3]
 8005242:	b10a      	cbz	r2, 8005248 <__lshift+0xa4>
 8005244:	f108 0602 	add.w	r6, r8, #2
 8005248:	3e01      	subs	r6, #1
 800524a:	4638      	mov	r0, r7
 800524c:	612e      	str	r6, [r5, #16]
 800524e:	4621      	mov	r1, r4
 8005250:	f7ff fdda 	bl	8004e08 <_Bfree>
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525a:	f842 0f04 	str.w	r0, [r2, #4]!
 800525e:	3301      	adds	r3, #1
 8005260:	e7c5      	b.n	80051ee <__lshift+0x4a>
 8005262:	3904      	subs	r1, #4
 8005264:	f853 2b04 	ldr.w	r2, [r3], #4
 8005268:	f841 2f04 	str.w	r2, [r1, #4]!
 800526c:	459c      	cmp	ip, r3
 800526e:	d8f9      	bhi.n	8005264 <__lshift+0xc0>
 8005270:	e7ea      	b.n	8005248 <__lshift+0xa4>
 8005272:	bf00      	nop
 8005274:	080064cb 	.word	0x080064cb
 8005278:	080064dc 	.word	0x080064dc

0800527c <__mcmp>:
 800527c:	690a      	ldr	r2, [r1, #16]
 800527e:	4603      	mov	r3, r0
 8005280:	6900      	ldr	r0, [r0, #16]
 8005282:	1a80      	subs	r0, r0, r2
 8005284:	b530      	push	{r4, r5, lr}
 8005286:	d10e      	bne.n	80052a6 <__mcmp+0x2a>
 8005288:	3314      	adds	r3, #20
 800528a:	3114      	adds	r1, #20
 800528c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800529c:	4295      	cmp	r5, r2
 800529e:	d003      	beq.n	80052a8 <__mcmp+0x2c>
 80052a0:	d205      	bcs.n	80052ae <__mcmp+0x32>
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295
 80052a6:	bd30      	pop	{r4, r5, pc}
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d3f3      	bcc.n	8005294 <__mcmp+0x18>
 80052ac:	e7fb      	b.n	80052a6 <__mcmp+0x2a>
 80052ae:	2001      	movs	r0, #1
 80052b0:	e7f9      	b.n	80052a6 <__mcmp+0x2a>
	...

080052b4 <__mdiff>:
 80052b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	4689      	mov	r9, r1
 80052ba:	4606      	mov	r6, r0
 80052bc:	4611      	mov	r1, r2
 80052be:	4648      	mov	r0, r9
 80052c0:	4614      	mov	r4, r2
 80052c2:	f7ff ffdb 	bl	800527c <__mcmp>
 80052c6:	1e05      	subs	r5, r0, #0
 80052c8:	d112      	bne.n	80052f0 <__mdiff+0x3c>
 80052ca:	4629      	mov	r1, r5
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff fd5b 	bl	8004d88 <_Balloc>
 80052d2:	4602      	mov	r2, r0
 80052d4:	b928      	cbnz	r0, 80052e2 <__mdiff+0x2e>
 80052d6:	4b3f      	ldr	r3, [pc, #252]	@ (80053d4 <__mdiff+0x120>)
 80052d8:	f240 2137 	movw	r1, #567	@ 0x237
 80052dc:	483e      	ldr	r0, [pc, #248]	@ (80053d8 <__mdiff+0x124>)
 80052de:	f000 fb11 	bl	8005904 <__assert_func>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052e8:	4610      	mov	r0, r2
 80052ea:	b003      	add	sp, #12
 80052ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f0:	bfbc      	itt	lt
 80052f2:	464b      	movlt	r3, r9
 80052f4:	46a1      	movlt	r9, r4
 80052f6:	4630      	mov	r0, r6
 80052f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80052fc:	bfba      	itte	lt
 80052fe:	461c      	movlt	r4, r3
 8005300:	2501      	movlt	r5, #1
 8005302:	2500      	movge	r5, #0
 8005304:	f7ff fd40 	bl	8004d88 <_Balloc>
 8005308:	4602      	mov	r2, r0
 800530a:	b918      	cbnz	r0, 8005314 <__mdiff+0x60>
 800530c:	4b31      	ldr	r3, [pc, #196]	@ (80053d4 <__mdiff+0x120>)
 800530e:	f240 2145 	movw	r1, #581	@ 0x245
 8005312:	e7e3      	b.n	80052dc <__mdiff+0x28>
 8005314:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005318:	6926      	ldr	r6, [r4, #16]
 800531a:	60c5      	str	r5, [r0, #12]
 800531c:	f109 0310 	add.w	r3, r9, #16
 8005320:	f109 0514 	add.w	r5, r9, #20
 8005324:	f104 0e14 	add.w	lr, r4, #20
 8005328:	f100 0b14 	add.w	fp, r0, #20
 800532c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005330:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	46d9      	mov	r9, fp
 8005338:	f04f 0c00 	mov.w	ip, #0
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005342:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	fa1f f38a 	uxth.w	r3, sl
 800534c:	4619      	mov	r1, r3
 800534e:	b283      	uxth	r3, r0
 8005350:	1acb      	subs	r3, r1, r3
 8005352:	0c00      	lsrs	r0, r0, #16
 8005354:	4463      	add	r3, ip
 8005356:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800535a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005364:	4576      	cmp	r6, lr
 8005366:	f849 3b04 	str.w	r3, [r9], #4
 800536a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800536e:	d8e5      	bhi.n	800533c <__mdiff+0x88>
 8005370:	1b33      	subs	r3, r6, r4
 8005372:	3b15      	subs	r3, #21
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	3415      	adds	r4, #21
 800537a:	3304      	adds	r3, #4
 800537c:	42a6      	cmp	r6, r4
 800537e:	bf38      	it	cc
 8005380:	2304      	movcc	r3, #4
 8005382:	441d      	add	r5, r3
 8005384:	445b      	add	r3, fp
 8005386:	461e      	mov	r6, r3
 8005388:	462c      	mov	r4, r5
 800538a:	4544      	cmp	r4, r8
 800538c:	d30e      	bcc.n	80053ac <__mdiff+0xf8>
 800538e:	f108 0103 	add.w	r1, r8, #3
 8005392:	1b49      	subs	r1, r1, r5
 8005394:	f021 0103 	bic.w	r1, r1, #3
 8005398:	3d03      	subs	r5, #3
 800539a:	45a8      	cmp	r8, r5
 800539c:	bf38      	it	cc
 800539e:	2100      	movcc	r1, #0
 80053a0:	440b      	add	r3, r1
 80053a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80053a6:	b191      	cbz	r1, 80053ce <__mdiff+0x11a>
 80053a8:	6117      	str	r7, [r2, #16]
 80053aa:	e79d      	b.n	80052e8 <__mdiff+0x34>
 80053ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80053b0:	46e6      	mov	lr, ip
 80053b2:	0c08      	lsrs	r0, r1, #16
 80053b4:	fa1c fc81 	uxtah	ip, ip, r1
 80053b8:	4471      	add	r1, lr
 80053ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80053be:	b289      	uxth	r1, r1
 80053c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80053c4:	f846 1b04 	str.w	r1, [r6], #4
 80053c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053cc:	e7dd      	b.n	800538a <__mdiff+0xd6>
 80053ce:	3f01      	subs	r7, #1
 80053d0:	e7e7      	b.n	80053a2 <__mdiff+0xee>
 80053d2:	bf00      	nop
 80053d4:	080064cb 	.word	0x080064cb
 80053d8:	080064dc 	.word	0x080064dc

080053dc <__d2b>:
 80053dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	460f      	mov	r7, r1
 80053e2:	2101      	movs	r1, #1
 80053e4:	ec59 8b10 	vmov	r8, r9, d0
 80053e8:	4616      	mov	r6, r2
 80053ea:	f7ff fccd 	bl	8004d88 <_Balloc>
 80053ee:	4604      	mov	r4, r0
 80053f0:	b930      	cbnz	r0, 8005400 <__d2b+0x24>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <__d2b+0xa8>)
 80053f6:	4824      	ldr	r0, [pc, #144]	@ (8005488 <__d2b+0xac>)
 80053f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80053fc:	f000 fa82 	bl	8005904 <__assert_func>
 8005400:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005408:	b10d      	cbz	r5, 800540e <__d2b+0x32>
 800540a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	f1b8 0300 	subs.w	r3, r8, #0
 8005414:	d023      	beq.n	800545e <__d2b+0x82>
 8005416:	4668      	mov	r0, sp
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	f7ff fd7c 	bl	8004f16 <__lo0bits>
 800541e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005422:	b1d0      	cbz	r0, 800545a <__d2b+0x7e>
 8005424:	f1c0 0320 	rsb	r3, r0, #32
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	430b      	orrs	r3, r1
 800542e:	40c2      	lsrs	r2, r0
 8005430:	6163      	str	r3, [r4, #20]
 8005432:	9201      	str	r2, [sp, #4]
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	61a3      	str	r3, [r4, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2201      	moveq	r2, #1
 800543e:	2202      	movne	r2, #2
 8005440:	6122      	str	r2, [r4, #16]
 8005442:	b1a5      	cbz	r5, 800546e <__d2b+0x92>
 8005444:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005448:	4405      	add	r5, r0
 800544a:	603d      	str	r5, [r7, #0]
 800544c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005450:	6030      	str	r0, [r6, #0]
 8005452:	4620      	mov	r0, r4
 8005454:	b003      	add	sp, #12
 8005456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800545a:	6161      	str	r1, [r4, #20]
 800545c:	e7ea      	b.n	8005434 <__d2b+0x58>
 800545e:	a801      	add	r0, sp, #4
 8005460:	f7ff fd59 	bl	8004f16 <__lo0bits>
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	3020      	adds	r0, #32
 800546a:	2201      	movs	r2, #1
 800546c:	e7e8      	b.n	8005440 <__d2b+0x64>
 800546e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005472:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005476:	6038      	str	r0, [r7, #0]
 8005478:	6918      	ldr	r0, [r3, #16]
 800547a:	f7ff fd2d 	bl	8004ed8 <__hi0bits>
 800547e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005482:	e7e5      	b.n	8005450 <__d2b+0x74>
 8005484:	080064cb 	.word	0x080064cb
 8005488:	080064dc 	.word	0x080064dc

0800548c <__ssputs_r>:
 800548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	688e      	ldr	r6, [r1, #8]
 8005492:	461f      	mov	r7, r3
 8005494:	42be      	cmp	r6, r7
 8005496:	680b      	ldr	r3, [r1, #0]
 8005498:	4682      	mov	sl, r0
 800549a:	460c      	mov	r4, r1
 800549c:	4690      	mov	r8, r2
 800549e:	d82d      	bhi.n	80054fc <__ssputs_r+0x70>
 80054a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054a8:	d026      	beq.n	80054f8 <__ssputs_r+0x6c>
 80054aa:	6965      	ldr	r5, [r4, #20]
 80054ac:	6909      	ldr	r1, [r1, #16]
 80054ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054b2:	eba3 0901 	sub.w	r9, r3, r1
 80054b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054ba:	1c7b      	adds	r3, r7, #1
 80054bc:	444b      	add	r3, r9
 80054be:	106d      	asrs	r5, r5, #1
 80054c0:	429d      	cmp	r5, r3
 80054c2:	bf38      	it	cc
 80054c4:	461d      	movcc	r5, r3
 80054c6:	0553      	lsls	r3, r2, #21
 80054c8:	d527      	bpl.n	800551a <__ssputs_r+0x8e>
 80054ca:	4629      	mov	r1, r5
 80054cc:	f7ff fbd0 	bl	8004c70 <_malloc_r>
 80054d0:	4606      	mov	r6, r0
 80054d2:	b360      	cbz	r0, 800552e <__ssputs_r+0xa2>
 80054d4:	6921      	ldr	r1, [r4, #16]
 80054d6:	464a      	mov	r2, r9
 80054d8:	f000 fa06 	bl	80058e8 <memcpy>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	6126      	str	r6, [r4, #16]
 80054ea:	6165      	str	r5, [r4, #20]
 80054ec:	444e      	add	r6, r9
 80054ee:	eba5 0509 	sub.w	r5, r5, r9
 80054f2:	6026      	str	r6, [r4, #0]
 80054f4:	60a5      	str	r5, [r4, #8]
 80054f6:	463e      	mov	r6, r7
 80054f8:	42be      	cmp	r6, r7
 80054fa:	d900      	bls.n	80054fe <__ssputs_r+0x72>
 80054fc:	463e      	mov	r6, r7
 80054fe:	6820      	ldr	r0, [r4, #0]
 8005500:	4632      	mov	r2, r6
 8005502:	4641      	mov	r1, r8
 8005504:	f000 f9c6 	bl	8005894 <memmove>
 8005508:	68a3      	ldr	r3, [r4, #8]
 800550a:	1b9b      	subs	r3, r3, r6
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	4433      	add	r3, r6
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2000      	movs	r0, #0
 8005516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551a:	462a      	mov	r2, r5
 800551c:	f000 fa36 	bl	800598c <_realloc_r>
 8005520:	4606      	mov	r6, r0
 8005522:	2800      	cmp	r0, #0
 8005524:	d1e0      	bne.n	80054e8 <__ssputs_r+0x5c>
 8005526:	6921      	ldr	r1, [r4, #16]
 8005528:	4650      	mov	r0, sl
 800552a:	f7ff fb2d 	bl	8004b88 <_free_r>
 800552e:	230c      	movs	r3, #12
 8005530:	f8ca 3000 	str.w	r3, [sl]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	e7e9      	b.n	8005516 <__ssputs_r+0x8a>
	...

08005544 <_svfiprintf_r>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	4698      	mov	r8, r3
 800554a:	898b      	ldrh	r3, [r1, #12]
 800554c:	061b      	lsls	r3, r3, #24
 800554e:	b09d      	sub	sp, #116	@ 0x74
 8005550:	4607      	mov	r7, r0
 8005552:	460d      	mov	r5, r1
 8005554:	4614      	mov	r4, r2
 8005556:	d510      	bpl.n	800557a <_svfiprintf_r+0x36>
 8005558:	690b      	ldr	r3, [r1, #16]
 800555a:	b973      	cbnz	r3, 800557a <_svfiprintf_r+0x36>
 800555c:	2140      	movs	r1, #64	@ 0x40
 800555e:	f7ff fb87 	bl	8004c70 <_malloc_r>
 8005562:	6028      	str	r0, [r5, #0]
 8005564:	6128      	str	r0, [r5, #16]
 8005566:	b930      	cbnz	r0, 8005576 <_svfiprintf_r+0x32>
 8005568:	230c      	movs	r3, #12
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	b01d      	add	sp, #116	@ 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	2340      	movs	r3, #64	@ 0x40
 8005578:	616b      	str	r3, [r5, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	9309      	str	r3, [sp, #36]	@ 0x24
 800557e:	2320      	movs	r3, #32
 8005580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005584:	f8cd 800c 	str.w	r8, [sp, #12]
 8005588:	2330      	movs	r3, #48	@ 0x30
 800558a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005728 <_svfiprintf_r+0x1e4>
 800558e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005592:	f04f 0901 	mov.w	r9, #1
 8005596:	4623      	mov	r3, r4
 8005598:	469a      	mov	sl, r3
 800559a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559e:	b10a      	cbz	r2, 80055a4 <_svfiprintf_r+0x60>
 80055a0:	2a25      	cmp	r2, #37	@ 0x25
 80055a2:	d1f9      	bne.n	8005598 <_svfiprintf_r+0x54>
 80055a4:	ebba 0b04 	subs.w	fp, sl, r4
 80055a8:	d00b      	beq.n	80055c2 <_svfiprintf_r+0x7e>
 80055aa:	465b      	mov	r3, fp
 80055ac:	4622      	mov	r2, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	4638      	mov	r0, r7
 80055b2:	f7ff ff6b 	bl	800548c <__ssputs_r>
 80055b6:	3001      	adds	r0, #1
 80055b8:	f000 80a7 	beq.w	800570a <_svfiprintf_r+0x1c6>
 80055bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055be:	445a      	add	r2, fp
 80055c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c2:	f89a 3000 	ldrb.w	r3, [sl]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 809f 	beq.w	800570a <_svfiprintf_r+0x1c6>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d6:	f10a 0a01 	add.w	sl, sl, #1
 80055da:	9304      	str	r3, [sp, #16]
 80055dc:	9307      	str	r3, [sp, #28]
 80055de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e4:	4654      	mov	r4, sl
 80055e6:	2205      	movs	r2, #5
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	484e      	ldr	r0, [pc, #312]	@ (8005728 <_svfiprintf_r+0x1e4>)
 80055ee:	f7fa fdef 	bl	80001d0 <memchr>
 80055f2:	9a04      	ldr	r2, [sp, #16]
 80055f4:	b9d8      	cbnz	r0, 800562e <_svfiprintf_r+0xea>
 80055f6:	06d0      	lsls	r0, r2, #27
 80055f8:	bf44      	itt	mi
 80055fa:	2320      	movmi	r3, #32
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005600:	0711      	lsls	r1, r2, #28
 8005602:	bf44      	itt	mi
 8005604:	232b      	movmi	r3, #43	@ 0x2b
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560a:	f89a 3000 	ldrb.w	r3, [sl]
 800560e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005610:	d015      	beq.n	800563e <_svfiprintf_r+0xfa>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4654      	mov	r4, sl
 8005616:	2000      	movs	r0, #0
 8005618:	f04f 0c0a 	mov.w	ip, #10
 800561c:	4621      	mov	r1, r4
 800561e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005622:	3b30      	subs	r3, #48	@ 0x30
 8005624:	2b09      	cmp	r3, #9
 8005626:	d94b      	bls.n	80056c0 <_svfiprintf_r+0x17c>
 8005628:	b1b0      	cbz	r0, 8005658 <_svfiprintf_r+0x114>
 800562a:	9207      	str	r2, [sp, #28]
 800562c:	e014      	b.n	8005658 <_svfiprintf_r+0x114>
 800562e:	eba0 0308 	sub.w	r3, r0, r8
 8005632:	fa09 f303 	lsl.w	r3, r9, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	46a2      	mov	sl, r4
 800563c:	e7d2      	b.n	80055e4 <_svfiprintf_r+0xa0>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	9103      	str	r1, [sp, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbb      	ittet	lt
 800564a:	425b      	neglt	r3, r3
 800564c:	f042 0202 	orrlt.w	r2, r2, #2
 8005650:	9307      	strge	r3, [sp, #28]
 8005652:	9307      	strlt	r3, [sp, #28]
 8005654:	bfb8      	it	lt
 8005656:	9204      	strlt	r2, [sp, #16]
 8005658:	7823      	ldrb	r3, [r4, #0]
 800565a:	2b2e      	cmp	r3, #46	@ 0x2e
 800565c:	d10a      	bne.n	8005674 <_svfiprintf_r+0x130>
 800565e:	7863      	ldrb	r3, [r4, #1]
 8005660:	2b2a      	cmp	r3, #42	@ 0x2a
 8005662:	d132      	bne.n	80056ca <_svfiprintf_r+0x186>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005670:	3402      	adds	r4, #2
 8005672:	9305      	str	r3, [sp, #20]
 8005674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005738 <_svfiprintf_r+0x1f4>
 8005678:	7821      	ldrb	r1, [r4, #0]
 800567a:	2203      	movs	r2, #3
 800567c:	4650      	mov	r0, sl
 800567e:	f7fa fda7 	bl	80001d0 <memchr>
 8005682:	b138      	cbz	r0, 8005694 <_svfiprintf_r+0x150>
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	eba0 000a 	sub.w	r0, r0, sl
 800568a:	2240      	movs	r2, #64	@ 0x40
 800568c:	4082      	lsls	r2, r0
 800568e:	4313      	orrs	r3, r2
 8005690:	3401      	adds	r4, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	4824      	ldr	r0, [pc, #144]	@ (800572c <_svfiprintf_r+0x1e8>)
 800569a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800569e:	2206      	movs	r2, #6
 80056a0:	f7fa fd96 	bl	80001d0 <memchr>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d036      	beq.n	8005716 <_svfiprintf_r+0x1d2>
 80056a8:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <_svfiprintf_r+0x1ec>)
 80056aa:	bb1b      	cbnz	r3, 80056f4 <_svfiprintf_r+0x1b0>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	3307      	adds	r3, #7
 80056b0:	f023 0307 	bic.w	r3, r3, #7
 80056b4:	3308      	adds	r3, #8
 80056b6:	9303      	str	r3, [sp, #12]
 80056b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ba:	4433      	add	r3, r6
 80056bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056be:	e76a      	b.n	8005596 <_svfiprintf_r+0x52>
 80056c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c4:	460c      	mov	r4, r1
 80056c6:	2001      	movs	r0, #1
 80056c8:	e7a8      	b.n	800561c <_svfiprintf_r+0xd8>
 80056ca:	2300      	movs	r3, #0
 80056cc:	3401      	adds	r4, #1
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	4619      	mov	r1, r3
 80056d2:	f04f 0c0a 	mov.w	ip, #10
 80056d6:	4620      	mov	r0, r4
 80056d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056dc:	3a30      	subs	r2, #48	@ 0x30
 80056de:	2a09      	cmp	r2, #9
 80056e0:	d903      	bls.n	80056ea <_svfiprintf_r+0x1a6>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c6      	beq.n	8005674 <_svfiprintf_r+0x130>
 80056e6:	9105      	str	r1, [sp, #20]
 80056e8:	e7c4      	b.n	8005674 <_svfiprintf_r+0x130>
 80056ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ee:	4604      	mov	r4, r0
 80056f0:	2301      	movs	r3, #1
 80056f2:	e7f0      	b.n	80056d6 <_svfiprintf_r+0x192>
 80056f4:	ab03      	add	r3, sp, #12
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	462a      	mov	r2, r5
 80056fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <_svfiprintf_r+0x1f0>)
 80056fc:	a904      	add	r1, sp, #16
 80056fe:	4638      	mov	r0, r7
 8005700:	f7fd fe62 	bl	80033c8 <_printf_float>
 8005704:	1c42      	adds	r2, r0, #1
 8005706:	4606      	mov	r6, r0
 8005708:	d1d6      	bne.n	80056b8 <_svfiprintf_r+0x174>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	065b      	lsls	r3, r3, #25
 800570e:	f53f af2d 	bmi.w	800556c <_svfiprintf_r+0x28>
 8005712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005714:	e72c      	b.n	8005570 <_svfiprintf_r+0x2c>
 8005716:	ab03      	add	r3, sp, #12
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	462a      	mov	r2, r5
 800571c:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <_svfiprintf_r+0x1f0>)
 800571e:	a904      	add	r1, sp, #16
 8005720:	4638      	mov	r0, r7
 8005722:	f7fe f8e9 	bl	80038f8 <_printf_i>
 8005726:	e7ed      	b.n	8005704 <_svfiprintf_r+0x1c0>
 8005728:	08006638 	.word	0x08006638
 800572c:	08006642 	.word	0x08006642
 8005730:	080033c9 	.word	0x080033c9
 8005734:	0800548d 	.word	0x0800548d
 8005738:	0800663e 	.word	0x0800663e

0800573c <__sflush_r>:
 800573c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	0716      	lsls	r6, r2, #28
 8005746:	4605      	mov	r5, r0
 8005748:	460c      	mov	r4, r1
 800574a:	d454      	bmi.n	80057f6 <__sflush_r+0xba>
 800574c:	684b      	ldr	r3, [r1, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	dc02      	bgt.n	8005758 <__sflush_r+0x1c>
 8005752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	dd48      	ble.n	80057ea <__sflush_r+0xae>
 8005758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800575a:	2e00      	cmp	r6, #0
 800575c:	d045      	beq.n	80057ea <__sflush_r+0xae>
 800575e:	2300      	movs	r3, #0
 8005760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005764:	682f      	ldr	r7, [r5, #0]
 8005766:	6a21      	ldr	r1, [r4, #32]
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	d030      	beq.n	80057ce <__sflush_r+0x92>
 800576c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	0759      	lsls	r1, r3, #29
 8005772:	d505      	bpl.n	8005780 <__sflush_r+0x44>
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800577a:	b10b      	cbz	r3, 8005780 <__sflush_r+0x44>
 800577c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	2300      	movs	r3, #0
 8005782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005784:	6a21      	ldr	r1, [r4, #32]
 8005786:	4628      	mov	r0, r5
 8005788:	47b0      	blx	r6
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	d106      	bne.n	800579e <__sflush_r+0x62>
 8005790:	6829      	ldr	r1, [r5, #0]
 8005792:	291d      	cmp	r1, #29
 8005794:	d82b      	bhi.n	80057ee <__sflush_r+0xb2>
 8005796:	4a2a      	ldr	r2, [pc, #168]	@ (8005840 <__sflush_r+0x104>)
 8005798:	410a      	asrs	r2, r1
 800579a:	07d6      	lsls	r6, r2, #31
 800579c:	d427      	bmi.n	80057ee <__sflush_r+0xb2>
 800579e:	2200      	movs	r2, #0
 80057a0:	6062      	str	r2, [r4, #4]
 80057a2:	04d9      	lsls	r1, r3, #19
 80057a4:	6922      	ldr	r2, [r4, #16]
 80057a6:	6022      	str	r2, [r4, #0]
 80057a8:	d504      	bpl.n	80057b4 <__sflush_r+0x78>
 80057aa:	1c42      	adds	r2, r0, #1
 80057ac:	d101      	bne.n	80057b2 <__sflush_r+0x76>
 80057ae:	682b      	ldr	r3, [r5, #0]
 80057b0:	b903      	cbnz	r3, 80057b4 <__sflush_r+0x78>
 80057b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80057b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057b6:	602f      	str	r7, [r5, #0]
 80057b8:	b1b9      	cbz	r1, 80057ea <__sflush_r+0xae>
 80057ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057be:	4299      	cmp	r1, r3
 80057c0:	d002      	beq.n	80057c8 <__sflush_r+0x8c>
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7ff f9e0 	bl	8004b88 <_free_r>
 80057c8:	2300      	movs	r3, #0
 80057ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80057cc:	e00d      	b.n	80057ea <__sflush_r+0xae>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b0      	blx	r6
 80057d4:	4602      	mov	r2, r0
 80057d6:	1c50      	adds	r0, r2, #1
 80057d8:	d1c9      	bne.n	800576e <__sflush_r+0x32>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0c6      	beq.n	800576e <__sflush_r+0x32>
 80057e0:	2b1d      	cmp	r3, #29
 80057e2:	d001      	beq.n	80057e8 <__sflush_r+0xac>
 80057e4:	2b16      	cmp	r3, #22
 80057e6:	d11e      	bne.n	8005826 <__sflush_r+0xea>
 80057e8:	602f      	str	r7, [r5, #0]
 80057ea:	2000      	movs	r0, #0
 80057ec:	e022      	b.n	8005834 <__sflush_r+0xf8>
 80057ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	e01b      	b.n	800582e <__sflush_r+0xf2>
 80057f6:	690f      	ldr	r7, [r1, #16]
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	d0f6      	beq.n	80057ea <__sflush_r+0xae>
 80057fc:	0793      	lsls	r3, r2, #30
 80057fe:	680e      	ldr	r6, [r1, #0]
 8005800:	bf08      	it	eq
 8005802:	694b      	ldreq	r3, [r1, #20]
 8005804:	600f      	str	r7, [r1, #0]
 8005806:	bf18      	it	ne
 8005808:	2300      	movne	r3, #0
 800580a:	eba6 0807 	sub.w	r8, r6, r7
 800580e:	608b      	str	r3, [r1, #8]
 8005810:	f1b8 0f00 	cmp.w	r8, #0
 8005814:	dde9      	ble.n	80057ea <__sflush_r+0xae>
 8005816:	6a21      	ldr	r1, [r4, #32]
 8005818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800581a:	4643      	mov	r3, r8
 800581c:	463a      	mov	r2, r7
 800581e:	4628      	mov	r0, r5
 8005820:	47b0      	blx	r6
 8005822:	2800      	cmp	r0, #0
 8005824:	dc08      	bgt.n	8005838 <__sflush_r+0xfc>
 8005826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	4407      	add	r7, r0
 800583a:	eba8 0800 	sub.w	r8, r8, r0
 800583e:	e7e7      	b.n	8005810 <__sflush_r+0xd4>
 8005840:	dfbffffe 	.word	0xdfbffffe

08005844 <_fflush_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	b913      	cbnz	r3, 8005854 <_fflush_r+0x10>
 800584e:	2500      	movs	r5, #0
 8005850:	4628      	mov	r0, r5
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	b118      	cbz	r0, 800585e <_fflush_r+0x1a>
 8005856:	6a03      	ldr	r3, [r0, #32]
 8005858:	b90b      	cbnz	r3, 800585e <_fflush_r+0x1a>
 800585a:	f7fe f9f9 	bl	8003c50 <__sinit>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f3      	beq.n	800584e <_fflush_r+0xa>
 8005866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	d404      	bmi.n	8005876 <_fflush_r+0x32>
 800586c:	0599      	lsls	r1, r3, #22
 800586e:	d402      	bmi.n	8005876 <_fflush_r+0x32>
 8005870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005872:	f7fe fb38 	bl	8003ee6 <__retarget_lock_acquire_recursive>
 8005876:	4628      	mov	r0, r5
 8005878:	4621      	mov	r1, r4
 800587a:	f7ff ff5f 	bl	800573c <__sflush_r>
 800587e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005880:	07da      	lsls	r2, r3, #31
 8005882:	4605      	mov	r5, r0
 8005884:	d4e4      	bmi.n	8005850 <_fflush_r+0xc>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	d4e1      	bmi.n	8005850 <_fflush_r+0xc>
 800588c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588e:	f7fe fb2b 	bl	8003ee8 <__retarget_lock_release_recursive>
 8005892:	e7dd      	b.n	8005850 <_fflush_r+0xc>

08005894 <memmove>:
 8005894:	4288      	cmp	r0, r1
 8005896:	b510      	push	{r4, lr}
 8005898:	eb01 0402 	add.w	r4, r1, r2
 800589c:	d902      	bls.n	80058a4 <memmove+0x10>
 800589e:	4284      	cmp	r4, r0
 80058a0:	4623      	mov	r3, r4
 80058a2:	d807      	bhi.n	80058b4 <memmove+0x20>
 80058a4:	1e43      	subs	r3, r0, #1
 80058a6:	42a1      	cmp	r1, r4
 80058a8:	d008      	beq.n	80058bc <memmove+0x28>
 80058aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058b2:	e7f8      	b.n	80058a6 <memmove+0x12>
 80058b4:	4402      	add	r2, r0
 80058b6:	4601      	mov	r1, r0
 80058b8:	428a      	cmp	r2, r1
 80058ba:	d100      	bne.n	80058be <memmove+0x2a>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058c6:	e7f7      	b.n	80058b8 <memmove+0x24>

080058c8 <_sbrk_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	@ (80058e4 <_sbrk_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc f99c 	bl	8001c10 <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_sbrk_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_sbrk_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	2000048c 	.word	0x2000048c

080058e8 <memcpy>:
 80058e8:	440a      	add	r2, r1
 80058ea:	4291      	cmp	r1, r2
 80058ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80058f0:	d100      	bne.n	80058f4 <memcpy+0xc>
 80058f2:	4770      	bx	lr
 80058f4:	b510      	push	{r4, lr}
 80058f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fe:	4291      	cmp	r1, r2
 8005900:	d1f9      	bne.n	80058f6 <memcpy+0xe>
 8005902:	bd10      	pop	{r4, pc}

08005904 <__assert_func>:
 8005904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005906:	4614      	mov	r4, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <__assert_func+0x2c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4605      	mov	r5, r0
 8005910:	68d8      	ldr	r0, [r3, #12]
 8005912:	b954      	cbnz	r4, 800592a <__assert_func+0x26>
 8005914:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <__assert_func+0x30>)
 8005916:	461c      	mov	r4, r3
 8005918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800591c:	9100      	str	r1, [sp, #0]
 800591e:	462b      	mov	r3, r5
 8005920:	4905      	ldr	r1, [pc, #20]	@ (8005938 <__assert_func+0x34>)
 8005922:	f000 f86f 	bl	8005a04 <fiprintf>
 8005926:	f000 f87f 	bl	8005a28 <abort>
 800592a:	4b04      	ldr	r3, [pc, #16]	@ (800593c <__assert_func+0x38>)
 800592c:	e7f4      	b.n	8005918 <__assert_func+0x14>
 800592e:	bf00      	nop
 8005930:	2000009c 	.word	0x2000009c
 8005934:	0800668e 	.word	0x0800668e
 8005938:	08006660 	.word	0x08006660
 800593c:	08006653 	.word	0x08006653

08005940 <_calloc_r>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	fba1 5402 	umull	r5, r4, r1, r2
 8005946:	b93c      	cbnz	r4, 8005958 <_calloc_r+0x18>
 8005948:	4629      	mov	r1, r5
 800594a:	f7ff f991 	bl	8004c70 <_malloc_r>
 800594e:	4606      	mov	r6, r0
 8005950:	b928      	cbnz	r0, 800595e <_calloc_r+0x1e>
 8005952:	2600      	movs	r6, #0
 8005954:	4630      	mov	r0, r6
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	220c      	movs	r2, #12
 800595a:	6002      	str	r2, [r0, #0]
 800595c:	e7f9      	b.n	8005952 <_calloc_r+0x12>
 800595e:	462a      	mov	r2, r5
 8005960:	4621      	mov	r1, r4
 8005962:	f7fe fa42 	bl	8003dea <memset>
 8005966:	e7f5      	b.n	8005954 <_calloc_r+0x14>

08005968 <__ascii_mbtowc>:
 8005968:	b082      	sub	sp, #8
 800596a:	b901      	cbnz	r1, 800596e <__ascii_mbtowc+0x6>
 800596c:	a901      	add	r1, sp, #4
 800596e:	b142      	cbz	r2, 8005982 <__ascii_mbtowc+0x1a>
 8005970:	b14b      	cbz	r3, 8005986 <__ascii_mbtowc+0x1e>
 8005972:	7813      	ldrb	r3, [r2, #0]
 8005974:	600b      	str	r3, [r1, #0]
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	1e10      	subs	r0, r2, #0
 800597a:	bf18      	it	ne
 800597c:	2001      	movne	r0, #1
 800597e:	b002      	add	sp, #8
 8005980:	4770      	bx	lr
 8005982:	4610      	mov	r0, r2
 8005984:	e7fb      	b.n	800597e <__ascii_mbtowc+0x16>
 8005986:	f06f 0001 	mvn.w	r0, #1
 800598a:	e7f8      	b.n	800597e <__ascii_mbtowc+0x16>

0800598c <_realloc_r>:
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	4680      	mov	r8, r0
 8005992:	4615      	mov	r5, r2
 8005994:	460c      	mov	r4, r1
 8005996:	b921      	cbnz	r1, 80059a2 <_realloc_r+0x16>
 8005998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	4611      	mov	r1, r2
 800599e:	f7ff b967 	b.w	8004c70 <_malloc_r>
 80059a2:	b92a      	cbnz	r2, 80059b0 <_realloc_r+0x24>
 80059a4:	f7ff f8f0 	bl	8004b88 <_free_r>
 80059a8:	2400      	movs	r4, #0
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	f000 f841 	bl	8005a36 <_malloc_usable_size_r>
 80059b4:	4285      	cmp	r5, r0
 80059b6:	4606      	mov	r6, r0
 80059b8:	d802      	bhi.n	80059c0 <_realloc_r+0x34>
 80059ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059be:	d8f4      	bhi.n	80059aa <_realloc_r+0x1e>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff f954 	bl	8004c70 <_malloc_r>
 80059c8:	4607      	mov	r7, r0
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d0ec      	beq.n	80059a8 <_realloc_r+0x1c>
 80059ce:	42b5      	cmp	r5, r6
 80059d0:	462a      	mov	r2, r5
 80059d2:	4621      	mov	r1, r4
 80059d4:	bf28      	it	cs
 80059d6:	4632      	movcs	r2, r6
 80059d8:	f7ff ff86 	bl	80058e8 <memcpy>
 80059dc:	4621      	mov	r1, r4
 80059de:	4640      	mov	r0, r8
 80059e0:	f7ff f8d2 	bl	8004b88 <_free_r>
 80059e4:	463c      	mov	r4, r7
 80059e6:	e7e0      	b.n	80059aa <_realloc_r+0x1e>

080059e8 <__ascii_wctomb>:
 80059e8:	4603      	mov	r3, r0
 80059ea:	4608      	mov	r0, r1
 80059ec:	b141      	cbz	r1, 8005a00 <__ascii_wctomb+0x18>
 80059ee:	2aff      	cmp	r2, #255	@ 0xff
 80059f0:	d904      	bls.n	80059fc <__ascii_wctomb+0x14>
 80059f2:	228a      	movs	r2, #138	@ 0x8a
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	4770      	bx	lr
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	2001      	movs	r0, #1
 8005a00:	4770      	bx	lr
	...

08005a04 <fiprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	b503      	push	{r0, r1, lr}
 8005a08:	4601      	mov	r1, r0
 8005a0a:	ab03      	add	r3, sp, #12
 8005a0c:	4805      	ldr	r0, [pc, #20]	@ (8005a24 <fiprintf+0x20>)
 8005a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	f000 f83f 	bl	8005a98 <_vfiprintf_r>
 8005a1a:	b002      	add	sp, #8
 8005a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a20:	b003      	add	sp, #12
 8005a22:	4770      	bx	lr
 8005a24:	2000009c 	.word	0x2000009c

08005a28 <abort>:
 8005a28:	b508      	push	{r3, lr}
 8005a2a:	2006      	movs	r0, #6
 8005a2c:	f000 fa08 	bl	8005e40 <raise>
 8005a30:	2001      	movs	r0, #1
 8005a32:	f7fc f875 	bl	8001b20 <_exit>

08005a36 <_malloc_usable_size_r>:
 8005a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3a:	1f18      	subs	r0, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfbc      	itt	lt
 8005a40:	580b      	ldrlt	r3, [r1, r0]
 8005a42:	18c0      	addlt	r0, r0, r3
 8005a44:	4770      	bx	lr

08005a46 <__sfputc_r>:
 8005a46:	6893      	ldr	r3, [r2, #8]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	b410      	push	{r4}
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	da08      	bge.n	8005a64 <__sfputc_r+0x1e>
 8005a52:	6994      	ldr	r4, [r2, #24]
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	db01      	blt.n	8005a5c <__sfputc_r+0x16>
 8005a58:	290a      	cmp	r1, #10
 8005a5a:	d103      	bne.n	8005a64 <__sfputc_r+0x1e>
 8005a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a60:	f000 b932 	b.w	8005cc8 <__swbuf_r>
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	1c58      	adds	r0, r3, #1
 8005a68:	6010      	str	r0, [r2, #0]
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <__sfputs_r>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	4606      	mov	r6, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	18d5      	adds	r5, r2, r3
 8005a7e:	42ac      	cmp	r4, r5
 8005a80:	d101      	bne.n	8005a86 <__sfputs_r+0x12>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e007      	b.n	8005a96 <__sfputs_r+0x22>
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff ffda 	bl	8005a46 <__sfputc_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d1f3      	bne.n	8005a7e <__sfputs_r+0xa>
 8005a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a98 <_vfiprintf_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	b09d      	sub	sp, #116	@ 0x74
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	4698      	mov	r8, r3
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	b118      	cbz	r0, 8005ab0 <_vfiprintf_r+0x18>
 8005aa8:	6a03      	ldr	r3, [r0, #32]
 8005aaa:	b90b      	cbnz	r3, 8005ab0 <_vfiprintf_r+0x18>
 8005aac:	f7fe f8d0 	bl	8003c50 <__sinit>
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x2a>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x2a>
 8005abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005abe:	f7fe fa12 	bl	8003ee6 <__retarget_lock_acquire_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	071b      	lsls	r3, r3, #28
 8005ac6:	d501      	bpl.n	8005acc <_vfiprintf_r+0x34>
 8005ac8:	692b      	ldr	r3, [r5, #16]
 8005aca:	b99b      	cbnz	r3, 8005af4 <_vfiprintf_r+0x5c>
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f938 	bl	8005d44 <__swsetup_r>
 8005ad4:	b170      	cbz	r0, 8005af4 <_vfiprintf_r+0x5c>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ad8:	07dc      	lsls	r4, r3, #31
 8005ada:	d504      	bpl.n	8005ae6 <_vfiprintf_r+0x4e>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	b01d      	add	sp, #116	@ 0x74
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	0598      	lsls	r0, r3, #22
 8005aea:	d4f7      	bmi.n	8005adc <_vfiprintf_r+0x44>
 8005aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aee:	f7fe f9fb 	bl	8003ee8 <__retarget_lock_release_recursive>
 8005af2:	e7f3      	b.n	8005adc <_vfiprintf_r+0x44>
 8005af4:	2300      	movs	r3, #0
 8005af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af8:	2320      	movs	r3, #32
 8005afa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b02:	2330      	movs	r3, #48	@ 0x30
 8005b04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cb4 <_vfiprintf_r+0x21c>
 8005b08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b0c:	f04f 0901 	mov.w	r9, #1
 8005b10:	4623      	mov	r3, r4
 8005b12:	469a      	mov	sl, r3
 8005b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b18:	b10a      	cbz	r2, 8005b1e <_vfiprintf_r+0x86>
 8005b1a:	2a25      	cmp	r2, #37	@ 0x25
 8005b1c:	d1f9      	bne.n	8005b12 <_vfiprintf_r+0x7a>
 8005b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b22:	d00b      	beq.n	8005b3c <_vfiprintf_r+0xa4>
 8005b24:	465b      	mov	r3, fp
 8005b26:	4622      	mov	r2, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff ffa2 	bl	8005a74 <__sfputs_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	f000 80a7 	beq.w	8005c84 <_vfiprintf_r+0x1ec>
 8005b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b38:	445a      	add	r2, fp
 8005b3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 809f 	beq.w	8005c84 <_vfiprintf_r+0x1ec>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b50:	f10a 0a01 	add.w	sl, sl, #1
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b5e:	4654      	mov	r4, sl
 8005b60:	2205      	movs	r2, #5
 8005b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b66:	4853      	ldr	r0, [pc, #332]	@ (8005cb4 <_vfiprintf_r+0x21c>)
 8005b68:	f7fa fb32 	bl	80001d0 <memchr>
 8005b6c:	9a04      	ldr	r2, [sp, #16]
 8005b6e:	b9d8      	cbnz	r0, 8005ba8 <_vfiprintf_r+0x110>
 8005b70:	06d1      	lsls	r1, r2, #27
 8005b72:	bf44      	itt	mi
 8005b74:	2320      	movmi	r3, #32
 8005b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b7a:	0713      	lsls	r3, r2, #28
 8005b7c:	bf44      	itt	mi
 8005b7e:	232b      	movmi	r3, #43	@ 0x2b
 8005b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b84:	f89a 3000 	ldrb.w	r3, [sl]
 8005b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8a:	d015      	beq.n	8005bb8 <_vfiprintf_r+0x120>
 8005b8c:	9a07      	ldr	r2, [sp, #28]
 8005b8e:	4654      	mov	r4, sl
 8005b90:	2000      	movs	r0, #0
 8005b92:	f04f 0c0a 	mov.w	ip, #10
 8005b96:	4621      	mov	r1, r4
 8005b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9c:	3b30      	subs	r3, #48	@ 0x30
 8005b9e:	2b09      	cmp	r3, #9
 8005ba0:	d94b      	bls.n	8005c3a <_vfiprintf_r+0x1a2>
 8005ba2:	b1b0      	cbz	r0, 8005bd2 <_vfiprintf_r+0x13a>
 8005ba4:	9207      	str	r2, [sp, #28]
 8005ba6:	e014      	b.n	8005bd2 <_vfiprintf_r+0x13a>
 8005ba8:	eba0 0308 	sub.w	r3, r0, r8
 8005bac:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	46a2      	mov	sl, r4
 8005bb6:	e7d2      	b.n	8005b5e <_vfiprintf_r+0xc6>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	1d19      	adds	r1, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	9103      	str	r1, [sp, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfbb      	ittet	lt
 8005bc4:	425b      	neglt	r3, r3
 8005bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8005bca:	9307      	strge	r3, [sp, #28]
 8005bcc:	9307      	strlt	r3, [sp, #28]
 8005bce:	bfb8      	it	lt
 8005bd0:	9204      	strlt	r2, [sp, #16]
 8005bd2:	7823      	ldrb	r3, [r4, #0]
 8005bd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bd6:	d10a      	bne.n	8005bee <_vfiprintf_r+0x156>
 8005bd8:	7863      	ldrb	r3, [r4, #1]
 8005bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bdc:	d132      	bne.n	8005c44 <_vfiprintf_r+0x1ac>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	9203      	str	r2, [sp, #12]
 8005be6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bea:	3402      	adds	r4, #2
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005cc4 <_vfiprintf_r+0x22c>
 8005bf2:	7821      	ldrb	r1, [r4, #0]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	4650      	mov	r0, sl
 8005bf8:	f7fa faea 	bl	80001d0 <memchr>
 8005bfc:	b138      	cbz	r0, 8005c0e <_vfiprintf_r+0x176>
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	eba0 000a 	sub.w	r0, r0, sl
 8005c04:	2240      	movs	r2, #64	@ 0x40
 8005c06:	4082      	lsls	r2, r0
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c12:	4829      	ldr	r0, [pc, #164]	@ (8005cb8 <_vfiprintf_r+0x220>)
 8005c14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c18:	2206      	movs	r2, #6
 8005c1a:	f7fa fad9 	bl	80001d0 <memchr>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d03f      	beq.n	8005ca2 <_vfiprintf_r+0x20a>
 8005c22:	4b26      	ldr	r3, [pc, #152]	@ (8005cbc <_vfiprintf_r+0x224>)
 8005c24:	bb1b      	cbnz	r3, 8005c6e <_vfiprintf_r+0x1d6>
 8005c26:	9b03      	ldr	r3, [sp, #12]
 8005c28:	3307      	adds	r3, #7
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	3308      	adds	r3, #8
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c34:	443b      	add	r3, r7
 8005c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c38:	e76a      	b.n	8005b10 <_vfiprintf_r+0x78>
 8005c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c3e:	460c      	mov	r4, r1
 8005c40:	2001      	movs	r0, #1
 8005c42:	e7a8      	b.n	8005b96 <_vfiprintf_r+0xfe>
 8005c44:	2300      	movs	r3, #0
 8005c46:	3401      	adds	r4, #1
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f04f 0c0a 	mov.w	ip, #10
 8005c50:	4620      	mov	r0, r4
 8005c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c56:	3a30      	subs	r2, #48	@ 0x30
 8005c58:	2a09      	cmp	r2, #9
 8005c5a:	d903      	bls.n	8005c64 <_vfiprintf_r+0x1cc>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0c6      	beq.n	8005bee <_vfiprintf_r+0x156>
 8005c60:	9105      	str	r1, [sp, #20]
 8005c62:	e7c4      	b.n	8005bee <_vfiprintf_r+0x156>
 8005c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c68:	4604      	mov	r4, r0
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e7f0      	b.n	8005c50 <_vfiprintf_r+0x1b8>
 8005c6e:	ab03      	add	r3, sp, #12
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <_vfiprintf_r+0x228>)
 8005c76:	a904      	add	r1, sp, #16
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fd fba5 	bl	80033c8 <_printf_float>
 8005c7e:	4607      	mov	r7, r0
 8005c80:	1c78      	adds	r0, r7, #1
 8005c82:	d1d6      	bne.n	8005c32 <_vfiprintf_r+0x19a>
 8005c84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c86:	07d9      	lsls	r1, r3, #31
 8005c88:	d405      	bmi.n	8005c96 <_vfiprintf_r+0x1fe>
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	059a      	lsls	r2, r3, #22
 8005c8e:	d402      	bmi.n	8005c96 <_vfiprintf_r+0x1fe>
 8005c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c92:	f7fe f929 	bl	8003ee8 <__retarget_lock_release_recursive>
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	065b      	lsls	r3, r3, #25
 8005c9a:	f53f af1f 	bmi.w	8005adc <_vfiprintf_r+0x44>
 8005c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ca0:	e71e      	b.n	8005ae0 <_vfiprintf_r+0x48>
 8005ca2:	ab03      	add	r3, sp, #12
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <_vfiprintf_r+0x228>)
 8005caa:	a904      	add	r1, sp, #16
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7fd fe23 	bl	80038f8 <_printf_i>
 8005cb2:	e7e4      	b.n	8005c7e <_vfiprintf_r+0x1e6>
 8005cb4:	08006638 	.word	0x08006638
 8005cb8:	08006642 	.word	0x08006642
 8005cbc:	080033c9 	.word	0x080033c9
 8005cc0:	08005a75 	.word	0x08005a75
 8005cc4:	0800663e 	.word	0x0800663e

08005cc8 <__swbuf_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b118      	cbz	r0, 8005cda <__swbuf_r+0x12>
 8005cd2:	6a03      	ldr	r3, [r0, #32]
 8005cd4:	b90b      	cbnz	r3, 8005cda <__swbuf_r+0x12>
 8005cd6:	f7fd ffbb 	bl	8003c50 <__sinit>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	60a3      	str	r3, [r4, #8]
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	071a      	lsls	r2, r3, #28
 8005ce2:	d501      	bpl.n	8005ce8 <__swbuf_r+0x20>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b943      	cbnz	r3, 8005cfa <__swbuf_r+0x32>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f82a 	bl	8005d44 <__swsetup_r>
 8005cf0:	b118      	cbz	r0, 8005cfa <__swbuf_r+0x32>
 8005cf2:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6922      	ldr	r2, [r4, #16]
 8005cfe:	1a98      	subs	r0, r3, r2
 8005d00:	6963      	ldr	r3, [r4, #20]
 8005d02:	b2f6      	uxtb	r6, r6
 8005d04:	4283      	cmp	r3, r0
 8005d06:	4637      	mov	r7, r6
 8005d08:	dc05      	bgt.n	8005d16 <__swbuf_r+0x4e>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f7ff fd99 	bl	8005844 <_fflush_r>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d1ed      	bne.n	8005cf2 <__swbuf_r+0x2a>
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	60a3      	str	r3, [r4, #8]
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	701e      	strb	r6, [r3, #0]
 8005d24:	6962      	ldr	r2, [r4, #20]
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d004      	beq.n	8005d36 <__swbuf_r+0x6e>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	07db      	lsls	r3, r3, #31
 8005d30:	d5e1      	bpl.n	8005cf6 <__swbuf_r+0x2e>
 8005d32:	2e0a      	cmp	r6, #10
 8005d34:	d1df      	bne.n	8005cf6 <__swbuf_r+0x2e>
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff fd83 	bl	8005844 <_fflush_r>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0d9      	beq.n	8005cf6 <__swbuf_r+0x2e>
 8005d42:	e7d6      	b.n	8005cf2 <__swbuf_r+0x2a>

08005d44 <__swsetup_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4b29      	ldr	r3, [pc, #164]	@ (8005dec <__swsetup_r+0xa8>)
 8005d48:	4605      	mov	r5, r0
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	b118      	cbz	r0, 8005d58 <__swsetup_r+0x14>
 8005d50:	6a03      	ldr	r3, [r0, #32]
 8005d52:	b90b      	cbnz	r3, 8005d58 <__swsetup_r+0x14>
 8005d54:	f7fd ff7c 	bl	8003c50 <__sinit>
 8005d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5c:	0719      	lsls	r1, r3, #28
 8005d5e:	d422      	bmi.n	8005da6 <__swsetup_r+0x62>
 8005d60:	06da      	lsls	r2, r3, #27
 8005d62:	d407      	bmi.n	8005d74 <__swsetup_r+0x30>
 8005d64:	2209      	movs	r2, #9
 8005d66:	602a      	str	r2, [r5, #0]
 8005d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	e033      	b.n	8005ddc <__swsetup_r+0x98>
 8005d74:	0758      	lsls	r0, r3, #29
 8005d76:	d512      	bpl.n	8005d9e <__swsetup_r+0x5a>
 8005d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d7a:	b141      	cbz	r1, 8005d8e <__swsetup_r+0x4a>
 8005d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <__swsetup_r+0x46>
 8005d84:	4628      	mov	r0, r5
 8005d86:	f7fe feff 	bl	8004b88 <_free_r>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	b94b      	cbnz	r3, 8005dbe <__swsetup_r+0x7a>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db4:	d003      	beq.n	8005dbe <__swsetup_r+0x7a>
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f883 	bl	8005ec4 <__smakebuf_r>
 8005dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc2:	f013 0201 	ands.w	r2, r3, #1
 8005dc6:	d00a      	beq.n	8005dde <__swsetup_r+0x9a>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60a2      	str	r2, [r4, #8]
 8005dcc:	6962      	ldr	r2, [r4, #20]
 8005dce:	4252      	negs	r2, r2
 8005dd0:	61a2      	str	r2, [r4, #24]
 8005dd2:	6922      	ldr	r2, [r4, #16]
 8005dd4:	b942      	cbnz	r2, 8005de8 <__swsetup_r+0xa4>
 8005dd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dda:	d1c5      	bne.n	8005d68 <__swsetup_r+0x24>
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	0799      	lsls	r1, r3, #30
 8005de0:	bf58      	it	pl
 8005de2:	6962      	ldrpl	r2, [r4, #20]
 8005de4:	60a2      	str	r2, [r4, #8]
 8005de6:	e7f4      	b.n	8005dd2 <__swsetup_r+0x8e>
 8005de8:	2000      	movs	r0, #0
 8005dea:	e7f7      	b.n	8005ddc <__swsetup_r+0x98>
 8005dec:	2000009c 	.word	0x2000009c

08005df0 <_raise_r>:
 8005df0:	291f      	cmp	r1, #31
 8005df2:	b538      	push	{r3, r4, r5, lr}
 8005df4:	4605      	mov	r5, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	d904      	bls.n	8005e04 <_raise_r+0x14>
 8005dfa:	2316      	movs	r3, #22
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e06:	b112      	cbz	r2, 8005e0e <_raise_r+0x1e>
 8005e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e0c:	b94b      	cbnz	r3, 8005e22 <_raise_r+0x32>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f830 	bl	8005e74 <_getpid_r>
 8005e14:	4622      	mov	r2, r4
 8005e16:	4601      	mov	r1, r0
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e1e:	f000 b817 	b.w	8005e50 <_kill_r>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d00a      	beq.n	8005e3c <_raise_r+0x4c>
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	d103      	bne.n	8005e32 <_raise_r+0x42>
 8005e2a:	2316      	movs	r3, #22
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e7e7      	b.n	8005e02 <_raise_r+0x12>
 8005e32:	2100      	movs	r1, #0
 8005e34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4798      	blx	r3
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e7e0      	b.n	8005e02 <_raise_r+0x12>

08005e40 <raise>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <raise+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f7ff bfd3 	b.w	8005df0 <_raise_r>
 8005e4a:	bf00      	nop
 8005e4c:	2000009c 	.word	0x2000009c

08005e50 <_kill_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	@ (8005e70 <_kill_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fb fe4f 	bl	8001b00 <_kill>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_kill_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_kill_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000048c 	.word	0x2000048c

08005e74 <_getpid_r>:
 8005e74:	f7fb be3c 	b.w	8001af0 <_getpid>

08005e78 <__swhatbuf_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	b096      	sub	sp, #88	@ 0x58
 8005e84:	4615      	mov	r5, r2
 8005e86:	461e      	mov	r6, r3
 8005e88:	da0d      	bge.n	8005ea6 <__swhatbuf_r+0x2e>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	bf14      	ite	ne
 8005e96:	2340      	movne	r3, #64	@ 0x40
 8005e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	b016      	add	sp, #88	@ 0x58
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	466a      	mov	r2, sp
 8005ea8:	f000 f848 	bl	8005f3c <_fstat_r>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dbec      	blt.n	8005e8a <__swhatbuf_r+0x12>
 8005eb0:	9901      	ldr	r1, [sp, #4]
 8005eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005eba:	4259      	negs	r1, r3
 8005ebc:	4159      	adcs	r1, r3
 8005ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ec2:	e7eb      	b.n	8005e9c <__swhatbuf_r+0x24>

08005ec4 <__smakebuf_r>:
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec8:	079d      	lsls	r5, r3, #30
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460c      	mov	r4, r1
 8005ece:	d507      	bpl.n	8005ee0 <__smakebuf_r+0x1c>
 8005ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	b003      	add	sp, #12
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	ab01      	add	r3, sp, #4
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	f7ff ffc8 	bl	8005e78 <__swhatbuf_r>
 8005ee8:	9f00      	ldr	r7, [sp, #0]
 8005eea:	4605      	mov	r5, r0
 8005eec:	4639      	mov	r1, r7
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7fe febe 	bl	8004c70 <_malloc_r>
 8005ef4:	b948      	cbnz	r0, 8005f0a <__smakebuf_r+0x46>
 8005ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efa:	059a      	lsls	r2, r3, #22
 8005efc:	d4ee      	bmi.n	8005edc <__smakebuf_r+0x18>
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	f043 0302 	orr.w	r3, r3, #2
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	e7e2      	b.n	8005ed0 <__smakebuf_r+0xc>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	6020      	str	r0, [r4, #0]
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x70>
 8005f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f81d 	bl	8005f60 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x70>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	431d      	orrs	r5, r3
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cf      	b.n	8005edc <__smakebuf_r+0x18>

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	@ (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fb fe39 	bl	8001bc0 <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2000048c 	.word	0x2000048c

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	@ (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fb fe38 	bl	8001be0 <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	2000048c 	.word	0x2000048c

08005f80 <log>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	ed2d 8b02 	vpush	{d8}
 8005f86:	ec55 4b10 	vmov	r4, r5, d0
 8005f8a:	f000 f841 	bl	8006010 <__ieee754_log>
 8005f8e:	4622      	mov	r2, r4
 8005f90:	462b      	mov	r3, r5
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	eeb0 8a40 	vmov.f32	s16, s0
 8005f9a:	eef0 8a60 	vmov.f32	s17, s1
 8005f9e:	f7fa fdc5 	bl	8000b2c <__aeabi_dcmpun>
 8005fa2:	b998      	cbnz	r0, 8005fcc <log+0x4c>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 8005fb0:	b960      	cbnz	r0, 8005fcc <log+0x4c>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fbe:	b160      	cbz	r0, 8005fda <log+0x5a>
 8005fc0:	f7fd ff66 	bl	8003e90 <__errno>
 8005fc4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8005ff0 <log+0x70>
 8005fc8:	2322      	movs	r3, #34	@ 0x22
 8005fca:	6003      	str	r3, [r0, #0]
 8005fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd0:	eef0 0a68 	vmov.f32	s1, s17
 8005fd4:	ecbd 8b02 	vpop	{d8}
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	f7fd ff59 	bl	8003e90 <__errno>
 8005fde:	ecbd 8b02 	vpop	{d8}
 8005fe2:	2321      	movs	r3, #33	@ 0x21
 8005fe4:	6003      	str	r3, [r0, #0]
 8005fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fea:	4803      	ldr	r0, [pc, #12]	@ (8005ff8 <log+0x78>)
 8005fec:	f000 b808 	b.w	8006000 <nan>
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	fff00000 	.word	0xfff00000
 8005ff8:	0800668e 	.word	0x0800668e
 8005ffc:	00000000 	.word	0x00000000

08006000 <nan>:
 8006000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006008 <nan+0x8>
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	00000000 	.word	0x00000000
 800600c:	7ff80000 	.word	0x7ff80000

08006010 <__ieee754_log>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ec51 0b10 	vmov	r0, r1, d0
 8006018:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800601c:	b087      	sub	sp, #28
 800601e:	460d      	mov	r5, r1
 8006020:	da26      	bge.n	8006070 <__ieee754_log+0x60>
 8006022:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006026:	4303      	orrs	r3, r0
 8006028:	4602      	mov	r2, r0
 800602a:	d10a      	bne.n	8006042 <__ieee754_log+0x32>
 800602c:	49ce      	ldr	r1, [pc, #824]	@ (8006368 <__ieee754_log+0x358>)
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	2000      	movs	r0, #0
 8006034:	f7fa fc0a 	bl	800084c <__aeabi_ddiv>
 8006038:	ec41 0b10 	vmov	d0, r0, r1
 800603c:	b007      	add	sp, #28
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	2900      	cmp	r1, #0
 8006044:	da05      	bge.n	8006052 <__ieee754_log+0x42>
 8006046:	460b      	mov	r3, r1
 8006048:	f7fa f91e 	bl	8000288 <__aeabi_dsub>
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	e7f0      	b.n	8006034 <__ieee754_log+0x24>
 8006052:	4bc6      	ldr	r3, [pc, #792]	@ (800636c <__ieee754_log+0x35c>)
 8006054:	2200      	movs	r2, #0
 8006056:	f7fa facf 	bl	80005f8 <__aeabi_dmul>
 800605a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800605e:	460d      	mov	r5, r1
 8006060:	4ac3      	ldr	r2, [pc, #780]	@ (8006370 <__ieee754_log+0x360>)
 8006062:	4295      	cmp	r5, r2
 8006064:	dd06      	ble.n	8006074 <__ieee754_log+0x64>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	f7fa f90f 	bl	800028c <__adddf3>
 800606e:	e7e3      	b.n	8006038 <__ieee754_log+0x28>
 8006070:	2300      	movs	r3, #0
 8006072:	e7f5      	b.n	8006060 <__ieee754_log+0x50>
 8006074:	152c      	asrs	r4, r5, #20
 8006076:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800607a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800607e:	441c      	add	r4, r3
 8006080:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8006084:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8006088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800608c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8006090:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8006094:	ea42 0105 	orr.w	r1, r2, r5
 8006098:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800609c:	2200      	movs	r2, #0
 800609e:	4bb5      	ldr	r3, [pc, #724]	@ (8006374 <__ieee754_log+0x364>)
 80060a0:	f7fa f8f2 	bl	8000288 <__aeabi_dsub>
 80060a4:	1cab      	adds	r3, r5, #2
 80060a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	4682      	mov	sl, r0
 80060ae:	468b      	mov	fp, r1
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	dc53      	bgt.n	800615e <__ieee754_log+0x14e>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f7fa fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80060bc:	b1d0      	cbz	r0, 80060f4 <__ieee754_log+0xe4>
 80060be:	2c00      	cmp	r4, #0
 80060c0:	f000 8120 	beq.w	8006304 <__ieee754_log+0x2f4>
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7fa fa2d 	bl	8000524 <__aeabi_i2d>
 80060ca:	a391      	add	r3, pc, #580	@ (adr r3, 8006310 <__ieee754_log+0x300>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	f7fa fa90 	bl	80005f8 <__aeabi_dmul>
 80060d8:	a38f      	add	r3, pc, #572	@ (adr r3, 8006318 <__ieee754_log+0x308>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	4604      	mov	r4, r0
 80060e0:	460d      	mov	r5, r1
 80060e2:	4630      	mov	r0, r6
 80060e4:	4639      	mov	r1, r7
 80060e6:	f7fa fa87 	bl	80005f8 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	e7ba      	b.n	800606a <__ieee754_log+0x5a>
 80060f4:	a38a      	add	r3, pc, #552	@ (adr r3, 8006320 <__ieee754_log+0x310>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	4650      	mov	r0, sl
 80060fc:	4659      	mov	r1, fp
 80060fe:	f7fa fa7b 	bl	80005f8 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	2000      	movs	r0, #0
 8006108:	499b      	ldr	r1, [pc, #620]	@ (8006378 <__ieee754_log+0x368>)
 800610a:	f7fa f8bd 	bl	8000288 <__aeabi_dsub>
 800610e:	4652      	mov	r2, sl
 8006110:	4606      	mov	r6, r0
 8006112:	460f      	mov	r7, r1
 8006114:	465b      	mov	r3, fp
 8006116:	4650      	mov	r0, sl
 8006118:	4659      	mov	r1, fp
 800611a:	f7fa fa6d 	bl	80005f8 <__aeabi_dmul>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4630      	mov	r0, r6
 8006124:	4639      	mov	r1, r7
 8006126:	f7fa fa67 	bl	80005f8 <__aeabi_dmul>
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	b914      	cbnz	r4, 8006136 <__ieee754_log+0x126>
 8006130:	4632      	mov	r2, r6
 8006132:	463b      	mov	r3, r7
 8006134:	e0a0      	b.n	8006278 <__ieee754_log+0x268>
 8006136:	4620      	mov	r0, r4
 8006138:	f7fa f9f4 	bl	8000524 <__aeabi_i2d>
 800613c:	a374      	add	r3, pc, #464	@ (adr r3, 8006310 <__ieee754_log+0x300>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	4680      	mov	r8, r0
 8006144:	4689      	mov	r9, r1
 8006146:	f7fa fa57 	bl	80005f8 <__aeabi_dmul>
 800614a:	a373      	add	r3, pc, #460	@ (adr r3, 8006318 <__ieee754_log+0x308>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	4604      	mov	r4, r0
 8006152:	460d      	mov	r5, r1
 8006154:	4640      	mov	r0, r8
 8006156:	4649      	mov	r1, r9
 8006158:	f7fa fa4e 	bl	80005f8 <__aeabi_dmul>
 800615c:	e0a5      	b.n	80062aa <__ieee754_log+0x29a>
 800615e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006162:	f7fa f893 	bl	800028c <__adddf3>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4650      	mov	r0, sl
 800616c:	4659      	mov	r1, fp
 800616e:	f7fa fb6d 	bl	800084c <__aeabi_ddiv>
 8006172:	e9cd 0100 	strd	r0, r1, [sp]
 8006176:	4620      	mov	r0, r4
 8006178:	f7fa f9d4 	bl	8000524 <__aeabi_i2d>
 800617c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	f7fa fa36 	bl	80005f8 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006194:	f7fa fa30 	bl	80005f8 <__aeabi_dmul>
 8006198:	a363      	add	r3, pc, #396	@ (adr r3, 8006328 <__ieee754_log+0x318>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	4680      	mov	r8, r0
 80061a0:	4689      	mov	r9, r1
 80061a2:	f7fa fa29 	bl	80005f8 <__aeabi_dmul>
 80061a6:	a362      	add	r3, pc, #392	@ (adr r3, 8006330 <__ieee754_log+0x320>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fa f86e 	bl	800028c <__adddf3>
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	f7fa fa20 	bl	80005f8 <__aeabi_dmul>
 80061b8:	a35f      	add	r3, pc, #380	@ (adr r3, 8006338 <__ieee754_log+0x328>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa f865 	bl	800028c <__adddf3>
 80061c2:	4642      	mov	r2, r8
 80061c4:	464b      	mov	r3, r9
 80061c6:	f7fa fa17 	bl	80005f8 <__aeabi_dmul>
 80061ca:	a35d      	add	r3, pc, #372	@ (adr r3, 8006340 <__ieee754_log+0x330>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa f85c 	bl	800028c <__adddf3>
 80061d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	a35a      	add	r3, pc, #360	@ (adr r3, 8006348 <__ieee754_log+0x338>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e6:	4640      	mov	r0, r8
 80061e8:	4649      	mov	r1, r9
 80061ea:	f7fa fa05 	bl	80005f8 <__aeabi_dmul>
 80061ee:	a358      	add	r3, pc, #352	@ (adr r3, 8006350 <__ieee754_log+0x340>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7fa f84a 	bl	800028c <__adddf3>
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f7fa f9fc 	bl	80005f8 <__aeabi_dmul>
 8006200:	a355      	add	r3, pc, #340	@ (adr r3, 8006358 <__ieee754_log+0x348>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f841 	bl	800028c <__adddf3>
 800620a:	4642      	mov	r2, r8
 800620c:	464b      	mov	r3, r9
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800621e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006222:	f7fa f833 	bl	800028c <__adddf3>
 8006226:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800622a:	3551      	adds	r5, #81	@ 0x51
 800622c:	4335      	orrs	r5, r6
 800622e:	2d00      	cmp	r5, #0
 8006230:	4680      	mov	r8, r0
 8006232:	4689      	mov	r9, r1
 8006234:	dd48      	ble.n	80062c8 <__ieee754_log+0x2b8>
 8006236:	4b50      	ldr	r3, [pc, #320]	@ (8006378 <__ieee754_log+0x368>)
 8006238:	2200      	movs	r2, #0
 800623a:	4650      	mov	r0, sl
 800623c:	4659      	mov	r1, fp
 800623e:	f7fa f9db 	bl	80005f8 <__aeabi_dmul>
 8006242:	4652      	mov	r2, sl
 8006244:	465b      	mov	r3, fp
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7fa f819 	bl	800028c <__adddf3>
 800625a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	4680      	mov	r8, r0
 8006264:	4689      	mov	r9, r1
 8006266:	b964      	cbnz	r4, 8006282 <__ieee754_log+0x272>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa f80a 	bl	8000288 <__aeabi_dsub>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	f7fa f804 	bl	8000288 <__aeabi_dsub>
 8006280:	e6da      	b.n	8006038 <__ieee754_log+0x28>
 8006282:	a323      	add	r3, pc, #140	@ (adr r3, 8006310 <__ieee754_log+0x300>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	a321      	add	r3, pc, #132	@ (adr r3, 8006318 <__ieee754_log+0x308>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	4604      	mov	r4, r0
 8006298:	460d      	mov	r5, r1
 800629a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629e:	f7fa f9ab 	bl	80005f8 <__aeabi_dmul>
 80062a2:	4642      	mov	r2, r8
 80062a4:	464b      	mov	r3, r9
 80062a6:	f7f9 fff1 	bl	800028c <__adddf3>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7f9 ffe9 	bl	8000288 <__aeabi_dsub>
 80062b6:	4652      	mov	r2, sl
 80062b8:	465b      	mov	r3, fp
 80062ba:	f7f9 ffe5 	bl	8000288 <__aeabi_dsub>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	e7d9      	b.n	800627c <__ieee754_log+0x26c>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4650      	mov	r0, sl
 80062ce:	4659      	mov	r1, fp
 80062d0:	f7f9 ffda 	bl	8000288 <__aeabi_dsub>
 80062d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d8:	f7fa f98e 	bl	80005f8 <__aeabi_dmul>
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	2c00      	cmp	r4, #0
 80062e2:	f43f af25 	beq.w	8006130 <__ieee754_log+0x120>
 80062e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8006310 <__ieee754_log+0x300>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f0:	f7fa f982 	bl	80005f8 <__aeabi_dmul>
 80062f4:	a308      	add	r3, pc, #32	@ (adr r3, 8006318 <__ieee754_log+0x308>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006302:	e729      	b.n	8006158 <__ieee754_log+0x148>
 8006304:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8006360 <__ieee754_log+0x350>
 8006308:	e698      	b.n	800603c <__ieee754_log+0x2c>
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w
 8006310:	fee00000 	.word	0xfee00000
 8006314:	3fe62e42 	.word	0x3fe62e42
 8006318:	35793c76 	.word	0x35793c76
 800631c:	3dea39ef 	.word	0x3dea39ef
 8006320:	55555555 	.word	0x55555555
 8006324:	3fd55555 	.word	0x3fd55555
 8006328:	df3e5244 	.word	0xdf3e5244
 800632c:	3fc2f112 	.word	0x3fc2f112
 8006330:	96cb03de 	.word	0x96cb03de
 8006334:	3fc74664 	.word	0x3fc74664
 8006338:	94229359 	.word	0x94229359
 800633c:	3fd24924 	.word	0x3fd24924
 8006340:	55555593 	.word	0x55555593
 8006344:	3fe55555 	.word	0x3fe55555
 8006348:	d078c69f 	.word	0xd078c69f
 800634c:	3fc39a09 	.word	0x3fc39a09
 8006350:	1d8e78af 	.word	0x1d8e78af
 8006354:	3fcc71c5 	.word	0x3fcc71c5
 8006358:	9997fa04 	.word	0x9997fa04
 800635c:	3fd99999 	.word	0x3fd99999
	...
 8006368:	c3500000 	.word	0xc3500000
 800636c:	43500000 	.word	0x43500000
 8006370:	7fefffff 	.word	0x7fefffff
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	3fe00000 	.word	0x3fe00000

0800637c <_init>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr

08006388 <_fini>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr
